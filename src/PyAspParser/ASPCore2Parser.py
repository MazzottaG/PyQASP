# Generated from ASPCore2.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,74,1018,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,1,0,5,0,212,8,0,10,0,12,0,215,9,0,1,1,1,1,1,1,1,1,1,
        1,1,1,3,1,223,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,247,8,2,1,3,1,3,3,
        3,251,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,264,8,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,275,8,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,287,8,7,1,8,1,8,1,8,1,8,1,8,3,8,294,
        8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,3,9,316,8,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,3,12,329,8,12,1,13,1,13,1,13,1,13,1,13,3,
        13,336,8,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,3,15,345,8,15,1,16,
        1,16,1,16,1,16,1,16,3,16,352,8,16,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,3,17,361,8,17,1,18,1,18,1,18,1,18,3,18,367,8,18,1,19,1,19,1,
        19,1,19,1,20,1,20,1,20,3,20,376,8,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,3,21,388,8,21,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,417,8,22,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,3,24,426,8,24,1,25,1,25,1,25,1,25,1,
        25,3,25,433,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,
        28,3,28,445,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,3,31,462,8,31,1,32,1,32,1,32,1,32,1,
        32,1,32,3,32,470,8,32,1,33,1,33,1,33,3,33,475,8,33,1,34,1,34,1,34,
        1,34,1,34,3,34,482,8,34,1,35,1,35,1,35,1,35,1,35,3,35,489,8,35,1,
        36,1,36,1,36,3,36,494,8,36,1,37,1,37,1,37,1,37,1,37,3,37,501,8,37,
        1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,514,
        8,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,
        1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,536,8,46,1,47,1,47,
        1,47,1,48,1,48,1,48,1,49,1,49,3,49,546,8,49,1,50,1,50,1,50,1,51,
        1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,
        1,54,3,54,566,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        3,55,577,8,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,3,58,592,8,58,1,59,1,59,1,59,1,59,1,59,3,59,599,8,
        59,1,60,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,3,
        62,613,8,62,1,63,1,63,1,63,1,63,3,63,619,8,63,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,3,64,630,8,64,1,65,1,65,1,65,1,65,1,65,
        1,65,3,65,638,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,646,8,66,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
        67,3,67,662,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,3,68,678,8,68,1,69,1,69,1,69,1,69,1,69,1,
        69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,
        71,1,71,3,71,700,8,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
        77,1,77,1,77,1,77,3,77,740,8,77,1,78,1,78,1,78,3,78,745,8,78,1,79,
        1,79,1,79,1,79,3,79,751,8,79,1,80,1,80,1,80,3,80,756,8,80,1,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,768,8,81,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,780,8,82,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,792,8,83,1,84,1,
        84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,804,8,84,1,85,1,
        85,1,85,1,85,1,85,3,85,811,8,85,1,86,1,86,1,86,1,86,1,86,3,86,818,
        8,86,1,87,1,87,1,87,1,87,1,87,3,87,825,8,87,1,88,1,88,1,88,1,88,
        1,88,1,88,3,88,833,8,88,1,89,1,89,1,90,1,90,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,1,91,3,91,871,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,905,
        8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,95,1,95,
        1,95,1,95,1,95,1,95,3,95,923,8,95,1,96,1,96,1,96,1,96,1,96,1,96,
        3,96,931,8,96,1,97,1,97,1,97,1,97,1,97,1,97,3,97,939,8,97,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,3,98,969,8,98,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,
        100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
        3,100,1001,8,100,1,101,1,101,1,102,1,102,1,103,1,103,3,103,1009,
        8,103,1,104,1,104,1,104,1,104,1,104,3,104,1016,8,104,1,104,0,0,105,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,0,9,1,0,29,30,1,0,16,17,
        1,0,18,20,2,0,3,3,28,28,1,0,2,4,2,0,31,31,33,33,2,0,32,32,34,34,
        1,0,37,40,1,0,58,64,1037,0,213,1,0,0,0,2,222,1,0,0,0,4,246,1,0,0,
        0,6,250,1,0,0,0,8,252,1,0,0,0,10,263,1,0,0,0,12,274,1,0,0,0,14,286,
        1,0,0,0,16,293,1,0,0,0,18,315,1,0,0,0,20,317,1,0,0,0,22,320,1,0,
        0,0,24,328,1,0,0,0,26,335,1,0,0,0,28,337,1,0,0,0,30,344,1,0,0,0,
        32,351,1,0,0,0,34,360,1,0,0,0,36,366,1,0,0,0,38,368,1,0,0,0,40,375,
        1,0,0,0,42,387,1,0,0,0,44,416,1,0,0,0,46,418,1,0,0,0,48,425,1,0,
        0,0,50,432,1,0,0,0,52,434,1,0,0,0,54,438,1,0,0,0,56,444,1,0,0,0,
        58,446,1,0,0,0,60,448,1,0,0,0,62,461,1,0,0,0,64,469,1,0,0,0,66,474,
        1,0,0,0,68,481,1,0,0,0,70,488,1,0,0,0,72,493,1,0,0,0,74,500,1,0,
        0,0,76,502,1,0,0,0,78,504,1,0,0,0,80,513,1,0,0,0,82,515,1,0,0,0,
        84,517,1,0,0,0,86,520,1,0,0,0,88,523,1,0,0,0,90,526,1,0,0,0,92,535,
        1,0,0,0,94,537,1,0,0,0,96,540,1,0,0,0,98,545,1,0,0,0,100,547,1,0,
        0,0,102,550,1,0,0,0,104,553,1,0,0,0,106,556,1,0,0,0,108,565,1,0,
        0,0,110,576,1,0,0,0,112,578,1,0,0,0,114,580,1,0,0,0,116,591,1,0,
        0,0,118,598,1,0,0,0,120,600,1,0,0,0,122,604,1,0,0,0,124,612,1,0,
        0,0,126,618,1,0,0,0,128,629,1,0,0,0,130,637,1,0,0,0,132,645,1,0,
        0,0,134,661,1,0,0,0,136,677,1,0,0,0,138,679,1,0,0,0,140,691,1,0,
        0,0,142,699,1,0,0,0,144,701,1,0,0,0,146,703,1,0,0,0,148,705,1,0,
        0,0,150,707,1,0,0,0,152,721,1,0,0,0,154,739,1,0,0,0,156,744,1,0,
        0,0,158,750,1,0,0,0,160,755,1,0,0,0,162,767,1,0,0,0,164,779,1,0,
        0,0,166,791,1,0,0,0,168,803,1,0,0,0,170,810,1,0,0,0,172,817,1,0,
        0,0,174,824,1,0,0,0,176,832,1,0,0,0,178,834,1,0,0,0,180,836,1,0,
        0,0,182,870,1,0,0,0,184,904,1,0,0,0,186,906,1,0,0,0,188,914,1,0,
        0,0,190,922,1,0,0,0,192,930,1,0,0,0,194,938,1,0,0,0,196,968,1,0,
        0,0,198,970,1,0,0,0,200,1000,1,0,0,0,202,1002,1,0,0,0,204,1004,1,
        0,0,0,206,1008,1,0,0,0,208,1015,1,0,0,0,210,212,3,2,1,0,211,210,
        1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,1,1,
        0,0,0,215,213,1,0,0,0,216,223,3,4,2,0,217,218,3,126,63,0,218,219,
        3,4,2,0,219,223,1,0,0,0,220,223,3,124,62,0,221,223,3,84,42,0,222,
        216,1,0,0,0,222,217,1,0,0,0,222,220,1,0,0,0,222,221,1,0,0,0,223,
        3,1,0,0,0,224,225,3,6,3,0,225,226,5,7,0,0,226,247,1,0,0,0,227,228,
        3,6,3,0,228,229,5,14,0,0,229,230,5,7,0,0,230,247,1,0,0,0,231,232,
        3,6,3,0,232,233,5,14,0,0,233,234,3,8,4,0,234,235,5,7,0,0,235,247,
        1,0,0,0,236,237,5,14,0,0,237,238,3,8,4,0,238,239,5,7,0,0,239,247,
        1,0,0,0,240,241,5,15,0,0,241,242,3,8,4,0,242,243,5,7,0,0,243,244,
        3,10,5,0,244,247,1,0,0,0,245,247,3,86,43,0,246,224,1,0,0,0,246,227,
        1,0,0,0,246,231,1,0,0,0,246,236,1,0,0,0,246,240,1,0,0,0,246,245,
        1,0,0,0,247,5,1,0,0,0,248,251,3,14,7,0,249,251,3,18,9,0,250,248,
        1,0,0,0,250,249,1,0,0,0,251,7,1,0,0,0,252,253,3,16,8,0,253,9,1,0,
        0,0,254,255,5,23,0,0,255,256,3,66,33,0,256,257,5,24,0,0,257,264,
        1,0,0,0,258,259,5,23,0,0,259,260,3,66,33,0,260,261,3,12,6,0,261,
        262,5,24,0,0,262,264,1,0,0,0,263,254,1,0,0,0,263,258,1,0,0,0,264,
        11,1,0,0,0,265,266,5,13,0,0,266,275,3,66,33,0,267,268,5,13,0,0,268,
        269,3,66,33,0,269,270,5,9,0,0,270,271,3,48,24,0,271,275,1,0,0,0,
        272,273,5,9,0,0,273,275,3,48,24,0,274,265,1,0,0,0,274,267,1,0,0,
        0,274,272,1,0,0,0,275,13,1,0,0,0,276,287,3,40,20,0,277,278,3,40,
        20,0,278,279,5,10,0,0,279,280,3,14,7,0,280,287,1,0,0,0,281,287,3,
        38,19,0,282,283,3,38,19,0,283,284,5,10,0,0,284,285,3,14,7,0,285,
        287,1,0,0,0,286,276,1,0,0,0,286,277,1,0,0,0,286,281,1,0,0,0,286,
        282,1,0,0,0,287,15,1,0,0,0,288,294,3,36,18,0,289,290,3,36,18,0,290,
        291,5,9,0,0,291,292,3,16,8,0,292,294,1,0,0,0,293,288,1,0,0,0,293,
        289,1,0,0,0,294,17,1,0,0,0,295,296,3,20,10,0,296,297,5,25,0,0,297,
        298,3,24,12,0,298,299,5,26,0,0,299,300,3,22,11,0,300,316,1,0,0,0,
        301,302,3,20,10,0,302,303,5,25,0,0,303,304,3,24,12,0,304,305,5,26,
        0,0,305,316,1,0,0,0,306,307,5,25,0,0,307,308,3,24,12,0,308,309,5,
        26,0,0,309,316,1,0,0,0,310,311,5,25,0,0,311,312,3,24,12,0,312,313,
        5,26,0,0,313,314,3,22,11,0,314,316,1,0,0,0,315,295,1,0,0,0,315,301,
        1,0,0,0,315,306,1,0,0,0,315,310,1,0,0,0,316,19,1,0,0,0,317,318,3,
        66,33,0,318,319,3,56,28,0,319,21,1,0,0,0,320,321,3,56,28,0,321,322,
        3,66,33,0,322,23,1,0,0,0,323,324,3,26,13,0,324,325,5,11,0,0,325,
        326,3,24,12,0,326,329,1,0,0,0,327,329,3,26,13,0,328,323,1,0,0,0,
        328,327,1,0,0,0,329,25,1,0,0,0,330,336,3,28,14,0,331,332,3,28,14,
        0,332,333,5,12,0,0,333,334,3,30,15,0,334,336,1,0,0,0,335,330,1,0,
        0,0,335,331,1,0,0,0,336,27,1,0,0,0,337,338,3,42,21,0,338,29,1,0,
        0,0,339,345,3,34,17,0,340,341,3,32,16,0,341,342,5,9,0,0,342,343,
        3,34,17,0,343,345,1,0,0,0,344,339,1,0,0,0,344,340,1,0,0,0,345,31,
        1,0,0,0,346,352,3,34,17,0,347,348,3,34,17,0,348,349,5,9,0,0,349,
        350,3,32,16,0,350,352,1,0,0,0,351,346,1,0,0,0,351,347,1,0,0,0,352,
        33,1,0,0,0,353,361,3,40,20,0,354,355,5,1,0,0,355,361,3,40,20,0,356,
        361,3,52,26,0,357,361,3,44,22,0,358,359,5,1,0,0,359,361,3,44,22,
        0,360,353,1,0,0,0,360,354,1,0,0,0,360,356,1,0,0,0,360,357,1,0,0,
        0,360,358,1,0,0,0,361,35,1,0,0,0,362,367,3,34,17,0,363,367,3,110,
        55,0,364,365,5,1,0,0,365,367,3,110,55,0,366,362,1,0,0,0,366,363,
        1,0,0,0,366,364,1,0,0,0,367,37,1,0,0,0,368,369,5,36,0,0,369,370,
        3,80,40,0,370,371,3,42,21,0,371,39,1,0,0,0,372,376,3,42,21,0,373,
        374,5,17,0,0,374,376,3,42,21,0,375,372,1,0,0,0,375,373,1,0,0,0,376,
        41,1,0,0,0,377,388,3,82,41,0,378,379,3,82,41,0,379,380,5,21,0,0,
        380,381,3,48,24,0,381,382,5,22,0,0,382,388,1,0,0,0,383,384,3,82,
        41,0,384,385,5,21,0,0,385,386,5,22,0,0,386,388,1,0,0,0,387,377,1,
        0,0,0,387,378,1,0,0,0,387,383,1,0,0,0,388,43,1,0,0,0,389,390,5,35,
        0,0,390,391,3,82,41,0,391,392,5,21,0,0,392,393,3,48,24,0,393,394,
        3,46,23,0,394,395,3,48,24,0,395,396,5,22,0,0,396,417,1,0,0,0,397,
        398,5,35,0,0,398,399,3,82,41,0,399,400,5,21,0,0,400,401,3,46,23,
        0,401,402,3,48,24,0,402,403,5,22,0,0,403,417,1,0,0,0,404,405,5,35,
        0,0,405,406,3,82,41,0,406,407,5,21,0,0,407,408,3,48,24,0,408,409,
        3,46,23,0,409,410,5,22,0,0,410,417,1,0,0,0,411,412,5,35,0,0,412,
        413,3,82,41,0,413,414,5,21,0,0,414,415,5,22,0,0,415,417,1,0,0,0,
        416,389,1,0,0,0,416,397,1,0,0,0,416,404,1,0,0,0,416,411,1,0,0,0,
        417,45,1,0,0,0,418,419,5,11,0,0,419,47,1,0,0,0,420,426,3,66,33,0,
        421,422,3,66,33,0,422,423,5,9,0,0,423,424,3,48,24,0,424,426,1,0,
        0,0,425,420,1,0,0,0,425,421,1,0,0,0,426,49,1,0,0,0,427,433,3,72,
        36,0,428,429,3,72,36,0,429,430,5,9,0,0,430,431,3,50,25,0,431,433,
        1,0,0,0,432,427,1,0,0,0,432,428,1,0,0,0,433,51,1,0,0,0,434,435,3,
        66,33,0,435,436,3,56,28,0,436,437,3,66,33,0,437,53,1,0,0,0,438,439,
        7,0,0,0,439,55,1,0,0,0,440,445,3,54,27,0,441,445,3,54,27,0,442,445,
        3,112,56,0,443,445,3,114,57,0,444,440,1,0,0,0,444,441,1,0,0,0,444,
        442,1,0,0,0,444,443,1,0,0,0,445,57,1,0,0,0,446,447,7,1,0,0,447,59,
        1,0,0,0,448,449,7,2,0,0,449,61,1,0,0,0,450,462,5,28,0,0,451,452,
        3,82,41,0,452,453,5,21,0,0,453,454,3,48,24,0,454,455,5,22,0,0,455,
        462,1,0,0,0,456,457,5,5,0,0,457,458,5,8,0,0,458,462,5,5,0,0,459,
        460,5,17,0,0,460,462,3,66,33,0,461,450,1,0,0,0,461,451,1,0,0,0,461,
        456,1,0,0,0,461,459,1,0,0,0,462,63,1,0,0,0,463,470,3,82,41,0,464,
        470,5,5,0,0,465,466,5,21,0,0,466,467,3,66,33,0,467,468,5,22,0,0,
        468,470,1,0,0,0,469,463,1,0,0,0,469,464,1,0,0,0,469,465,1,0,0,0,
        470,65,1,0,0,0,471,475,3,62,31,0,472,475,3,82,41,0,473,475,3,68,
        34,0,474,471,1,0,0,0,474,472,1,0,0,0,474,473,1,0,0,0,475,67,1,0,
        0,0,476,482,3,70,35,0,477,478,3,70,35,0,478,479,3,58,29,0,479,480,
        3,68,34,0,480,482,1,0,0,0,481,476,1,0,0,0,481,477,1,0,0,0,482,69,
        1,0,0,0,483,489,3,64,32,0,484,485,3,64,32,0,485,486,3,60,30,0,486,
        487,3,70,35,0,487,489,1,0,0,0,488,483,1,0,0,0,488,484,1,0,0,0,489,
        71,1,0,0,0,490,494,3,74,37,0,491,494,3,76,38,0,492,494,3,78,39,0,
        493,490,1,0,0,0,493,491,1,0,0,0,493,492,1,0,0,0,494,73,1,0,0,0,495,
        501,5,2,0,0,496,501,5,4,0,0,497,501,5,5,0,0,498,499,5,17,0,0,499,
        501,5,5,0,0,500,495,1,0,0,0,500,496,1,0,0,0,500,497,1,0,0,0,500,
        498,1,0,0,0,501,75,1,0,0,0,502,503,7,3,0,0,503,77,1,0,0,0,504,505,
        3,82,41,0,505,506,5,21,0,0,506,507,3,48,24,0,507,508,5,22,0,0,508,
        79,1,0,0,0,509,514,5,3,0,0,510,511,5,3,0,0,511,512,5,9,0,0,512,514,
        3,80,40,0,513,509,1,0,0,0,513,510,1,0,0,0,514,81,1,0,0,0,515,516,
        7,4,0,0,516,83,1,0,0,0,517,518,5,42,0,0,518,519,5,43,0,0,519,85,
        1,0,0,0,520,521,3,42,21,0,521,522,5,27,0,0,522,87,1,0,0,0,523,524,
        3,66,33,0,524,525,3,54,27,0,525,89,1,0,0,0,526,527,3,54,27,0,527,
        528,3,66,33,0,528,91,1,0,0,0,529,530,3,88,44,0,530,531,3,116,58,
        0,531,536,1,0,0,0,532,533,3,116,58,0,533,534,3,90,45,0,534,536,1,
        0,0,0,535,529,1,0,0,0,535,532,1,0,0,0,536,93,1,0,0,0,537,538,3,66,
        33,0,538,539,3,112,56,0,539,95,1,0,0,0,540,541,3,94,47,0,541,542,
        3,116,58,0,542,97,1,0,0,0,543,546,3,96,48,0,544,546,3,102,51,0,545,
        543,1,0,0,0,545,544,1,0,0,0,546,99,1,0,0,0,547,548,3,66,33,0,548,
        549,3,114,57,0,549,101,1,0,0,0,550,551,3,100,50,0,551,552,3,116,
        58,0,552,103,1,0,0,0,553,554,3,112,56,0,554,555,3,66,33,0,555,105,
        1,0,0,0,556,557,3,114,57,0,557,558,3,66,33,0,558,107,1,0,0,0,559,
        560,3,116,58,0,560,561,3,104,52,0,561,566,1,0,0,0,562,563,3,116,
        58,0,563,564,3,106,53,0,564,566,1,0,0,0,565,559,1,0,0,0,565,562,
        1,0,0,0,566,109,1,0,0,0,567,577,3,98,49,0,568,577,3,108,54,0,569,
        577,3,92,46,0,570,571,3,96,48,0,571,572,3,104,52,0,572,577,1,0,0,
        0,573,574,3,102,51,0,574,575,3,106,53,0,575,577,1,0,0,0,576,567,
        1,0,0,0,576,568,1,0,0,0,576,569,1,0,0,0,576,570,1,0,0,0,576,573,
        1,0,0,0,577,111,1,0,0,0,578,579,7,5,0,0,579,113,1,0,0,0,580,581,
        7,6,0,0,581,115,1,0,0,0,582,583,3,122,61,0,583,584,5,25,0,0,584,
        585,3,118,59,0,585,586,5,26,0,0,586,592,1,0,0,0,587,588,3,122,61,
        0,588,589,5,25,0,0,589,590,5,26,0,0,590,592,1,0,0,0,591,582,1,0,
        0,0,591,587,1,0,0,0,592,117,1,0,0,0,593,594,3,120,60,0,594,595,5,
        11,0,0,595,596,3,118,59,0,596,599,1,0,0,0,597,599,3,120,60,0,598,
        593,1,0,0,0,598,597,1,0,0,0,599,119,1,0,0,0,600,601,3,50,25,0,601,
        602,5,12,0,0,602,603,3,32,16,0,603,121,1,0,0,0,604,605,7,7,0,0,605,
        123,1,0,0,0,606,613,3,136,68,0,607,613,3,152,76,0,608,613,3,184,
        92,0,609,613,3,138,69,0,610,613,3,200,100,0,611,613,3,196,98,0,612,
        606,1,0,0,0,612,607,1,0,0,0,612,608,1,0,0,0,612,609,1,0,0,0,612,
        610,1,0,0,0,612,611,1,0,0,0,613,125,1,0,0,0,614,619,3,128,64,0,615,
        616,3,128,64,0,616,617,3,126,63,0,617,619,1,0,0,0,618,614,1,0,0,
        0,618,615,1,0,0,0,619,127,1,0,0,0,620,630,3,134,67,0,621,630,3,150,
        75,0,622,630,3,182,91,0,623,630,3,186,93,0,624,630,3,190,95,0,625,
        630,3,192,96,0,626,630,3,194,97,0,627,630,3,130,65,0,628,630,3,132,
        66,0,629,620,1,0,0,0,629,621,1,0,0,0,629,622,1,0,0,0,629,623,1,0,
        0,0,629,624,1,0,0,0,629,625,1,0,0,0,629,626,1,0,0,0,629,627,1,0,
        0,0,629,628,1,0,0,0,630,129,1,0,0,0,631,632,5,69,0,0,632,633,5,21,
        0,0,633,634,5,22,0,0,634,638,5,7,0,0,635,636,5,69,0,0,636,638,5,
        7,0,0,637,631,1,0,0,0,637,635,1,0,0,0,638,131,1,0,0,0,639,640,5,
        70,0,0,640,641,5,21,0,0,641,642,5,22,0,0,642,646,5,7,0,0,643,644,
        5,70,0,0,644,646,5,7,0,0,645,639,1,0,0,0,645,643,1,0,0,0,646,133,
        1,0,0,0,647,648,5,48,0,0,648,649,5,21,0,0,649,650,5,49,0,0,650,651,
        5,29,0,0,651,652,3,146,73,0,652,653,5,22,0,0,653,654,5,7,0,0,654,
        662,1,0,0,0,655,656,5,48,0,0,656,657,5,21,0,0,657,658,3,146,73,0,
        658,659,5,22,0,0,659,660,5,7,0,0,660,662,1,0,0,0,661,647,1,0,0,0,
        661,655,1,0,0,0,662,135,1,0,0,0,663,664,5,65,0,0,664,665,5,21,0,
        0,665,666,5,49,0,0,666,667,5,29,0,0,667,668,3,148,74,0,668,669,5,
        22,0,0,669,670,5,7,0,0,670,678,1,0,0,0,671,672,5,65,0,0,672,673,
        5,21,0,0,673,674,3,148,74,0,674,675,5,22,0,0,675,676,5,7,0,0,676,
        678,1,0,0,0,677,663,1,0,0,0,677,671,1,0,0,0,678,137,1,0,0,0,679,
        680,5,68,0,0,680,681,5,21,0,0,681,682,5,56,0,0,682,683,5,29,0,0,
        683,684,3,140,70,0,684,685,5,9,0,0,685,686,5,57,0,0,686,687,5,29,
        0,0,687,688,3,142,71,0,688,689,5,22,0,0,689,690,5,7,0,0,690,139,
        1,0,0,0,691,692,5,35,0,0,692,693,3,82,41,0,693,141,1,0,0,0,694,700,
        3,144,72,0,695,696,3,144,72,0,696,697,5,9,0,0,697,698,3,142,71,0,
        698,700,1,0,0,0,699,694,1,0,0,0,699,695,1,0,0,0,700,143,1,0,0,0,
        701,702,7,8,0,0,702,145,1,0,0,0,703,704,5,5,0,0,704,147,1,0,0,0,
        705,706,5,5,0,0,706,149,1,0,0,0,707,708,5,50,0,0,708,709,5,21,0,
        0,709,710,5,51,0,0,710,711,5,29,0,0,711,712,3,156,78,0,712,713,5,
        9,0,0,713,714,5,52,0,0,714,715,5,29,0,0,715,716,5,25,0,0,716,717,
        3,154,77,0,717,718,5,26,0,0,718,719,5,22,0,0,719,720,5,7,0,0,720,
        151,1,0,0,0,721,722,5,66,0,0,722,723,5,21,0,0,723,724,5,51,0,0,724,
        725,5,29,0,0,725,726,3,160,80,0,726,727,5,9,0,0,727,728,5,52,0,0,
        728,729,5,29,0,0,729,730,5,25,0,0,730,731,3,158,79,0,731,732,5,26,
        0,0,732,733,5,22,0,0,733,734,5,7,0,0,734,153,1,0,0,0,735,740,5,5,
        0,0,736,737,5,5,0,0,737,738,5,9,0,0,738,740,3,154,77,0,739,735,1,
        0,0,0,739,736,1,0,0,0,740,155,1,0,0,0,741,745,3,40,20,0,742,743,
        5,1,0,0,743,745,3,40,20,0,744,741,1,0,0,0,744,742,1,0,0,0,745,157,
        1,0,0,0,746,751,5,5,0,0,747,748,5,5,0,0,748,749,5,9,0,0,749,751,
        3,158,79,0,750,746,1,0,0,0,750,747,1,0,0,0,751,159,1,0,0,0,752,756,
        3,40,20,0,753,754,5,1,0,0,754,756,3,40,20,0,755,752,1,0,0,0,755,
        753,1,0,0,0,756,161,1,0,0,0,757,768,3,40,20,0,758,759,5,1,0,0,759,
        768,3,40,20,0,760,768,3,52,26,0,761,768,3,110,55,0,762,763,5,1,0,
        0,763,768,3,110,55,0,764,768,3,44,22,0,765,766,5,1,0,0,766,768,3,
        44,22,0,767,757,1,0,0,0,767,758,1,0,0,0,767,760,1,0,0,0,767,761,
        1,0,0,0,767,762,1,0,0,0,767,764,1,0,0,0,767,765,1,0,0,0,768,163,
        1,0,0,0,769,780,3,40,20,0,770,771,5,1,0,0,771,780,3,40,20,0,772,
        780,3,52,26,0,773,780,3,110,55,0,774,775,5,1,0,0,775,780,3,110,55,
        0,776,780,3,44,22,0,777,778,5,1,0,0,778,780,3,44,22,0,779,769,1,
        0,0,0,779,770,1,0,0,0,779,772,1,0,0,0,779,773,1,0,0,0,779,774,1,
        0,0,0,779,776,1,0,0,0,779,777,1,0,0,0,780,165,1,0,0,0,781,792,3,
        40,20,0,782,783,5,1,0,0,783,792,3,40,20,0,784,792,3,52,26,0,785,
        792,3,110,55,0,786,787,5,1,0,0,787,792,3,110,55,0,788,792,3,44,22,
        0,789,790,5,1,0,0,790,792,3,44,22,0,791,781,1,0,0,0,791,782,1,0,
        0,0,791,784,1,0,0,0,791,785,1,0,0,0,791,786,1,0,0,0,791,788,1,0,
        0,0,791,789,1,0,0,0,792,167,1,0,0,0,793,804,3,40,20,0,794,795,5,
        1,0,0,795,804,3,40,20,0,796,804,3,52,26,0,797,804,3,110,55,0,798,
        799,5,1,0,0,799,804,3,110,55,0,800,804,3,44,22,0,801,802,5,1,0,0,
        802,804,3,44,22,0,803,793,1,0,0,0,803,794,1,0,0,0,803,796,1,0,0,
        0,803,797,1,0,0,0,803,798,1,0,0,0,803,800,1,0,0,0,803,801,1,0,0,
        0,804,169,1,0,0,0,805,811,3,162,81,0,806,807,3,162,81,0,807,808,
        5,9,0,0,808,809,3,170,85,0,809,811,1,0,0,0,810,805,1,0,0,0,810,806,
        1,0,0,0,811,171,1,0,0,0,812,818,3,164,82,0,813,814,3,164,82,0,814,
        815,5,9,0,0,815,816,3,172,86,0,816,818,1,0,0,0,817,812,1,0,0,0,817,
        813,1,0,0,0,818,173,1,0,0,0,819,825,3,166,83,0,820,821,3,166,83,
        0,821,822,5,9,0,0,822,823,3,174,87,0,823,825,1,0,0,0,824,819,1,0,
        0,0,824,820,1,0,0,0,825,175,1,0,0,0,826,833,3,168,84,0,827,828,3,
        168,84,0,828,829,5,9,0,0,829,830,3,176,88,0,830,831,3,176,88,0,831,
        833,1,0,0,0,832,826,1,0,0,0,832,827,1,0,0,0,833,177,1,0,0,0,834,
        835,5,53,0,0,835,179,1,0,0,0,836,837,5,67,0,0,837,181,1,0,0,0,838,
        839,3,178,89,0,839,840,5,21,0,0,840,841,5,54,0,0,841,842,5,29,0,
        0,842,843,5,25,0,0,843,844,3,170,85,0,844,845,5,26,0,0,845,846,5,
        9,0,0,846,847,5,55,0,0,847,848,5,29,0,0,848,849,5,25,0,0,849,850,
        3,174,87,0,850,851,5,26,0,0,851,852,5,22,0,0,852,853,5,7,0,0,853,
        871,1,0,0,0,854,855,3,178,89,0,855,856,5,21,0,0,856,857,5,55,0,0,
        857,858,5,29,0,0,858,859,5,25,0,0,859,860,3,174,87,0,860,861,5,26,
        0,0,861,862,5,9,0,0,862,863,5,54,0,0,863,864,5,29,0,0,864,865,5,
        25,0,0,865,866,3,170,85,0,866,867,5,26,0,0,867,868,5,22,0,0,868,
        869,5,7,0,0,869,871,1,0,0,0,870,838,1,0,0,0,870,854,1,0,0,0,871,
        183,1,0,0,0,872,873,3,180,90,0,873,874,5,21,0,0,874,875,5,54,0,0,
        875,876,5,29,0,0,876,877,5,25,0,0,877,878,3,172,86,0,878,879,5,26,
        0,0,879,880,5,9,0,0,880,881,5,55,0,0,881,882,5,29,0,0,882,883,5,
        25,0,0,883,884,3,176,88,0,884,885,5,26,0,0,885,886,5,22,0,0,886,
        887,5,7,0,0,887,905,1,0,0,0,888,889,3,180,90,0,889,890,5,21,0,0,
        890,891,5,55,0,0,891,892,5,29,0,0,892,893,5,25,0,0,893,894,3,176,
        88,0,894,895,5,26,0,0,895,896,5,9,0,0,896,897,5,54,0,0,897,898,5,
        29,0,0,898,899,5,25,0,0,899,900,3,172,86,0,900,901,5,26,0,0,901,
        902,5,22,0,0,902,903,5,7,0,0,903,905,1,0,0,0,904,872,1,0,0,0,904,
        888,1,0,0,0,905,185,1,0,0,0,906,907,5,46,0,0,907,908,5,21,0,0,908,
        909,5,49,0,0,909,910,5,29,0,0,910,911,3,188,94,0,911,912,5,22,0,
        0,912,913,5,7,0,0,913,187,1,0,0,0,914,915,5,5,0,0,915,189,1,0,0,
        0,916,917,5,47,0,0,917,918,5,21,0,0,918,919,5,22,0,0,919,923,5,7,
        0,0,920,921,5,47,0,0,921,923,5,7,0,0,922,916,1,0,0,0,922,920,1,0,
        0,0,923,191,1,0,0,0,924,925,5,44,0,0,925,926,5,21,0,0,926,927,5,
        22,0,0,927,931,5,7,0,0,928,929,5,44,0,0,929,931,5,7,0,0,930,924,
        1,0,0,0,930,928,1,0,0,0,931,193,1,0,0,0,932,933,5,45,0,0,933,934,
        5,21,0,0,934,935,5,22,0,0,935,939,5,7,0,0,936,937,5,45,0,0,937,939,
        5,7,0,0,938,932,1,0,0,0,938,936,1,0,0,0,939,195,1,0,0,0,940,941,
        3,198,99,0,941,942,5,21,0,0,942,943,5,72,0,0,943,944,5,29,0,0,944,
        945,3,204,102,0,945,946,5,9,0,0,946,947,5,73,0,0,947,948,5,29,0,
        0,948,949,5,25,0,0,949,950,3,208,104,0,950,951,5,26,0,0,951,952,
        5,22,0,0,952,953,5,7,0,0,953,969,1,0,0,0,954,955,3,198,99,0,955,
        956,5,21,0,0,956,957,5,73,0,0,957,958,5,29,0,0,958,959,5,25,0,0,
        959,960,3,208,104,0,960,961,5,26,0,0,961,962,5,9,0,0,962,963,5,72,
        0,0,963,964,5,29,0,0,964,965,3,204,102,0,965,966,5,22,0,0,966,967,
        5,7,0,0,967,969,1,0,0,0,968,940,1,0,0,0,968,954,1,0,0,0,969,197,
        1,0,0,0,970,971,5,41,0,0,971,199,1,0,0,0,972,973,3,202,101,0,973,
        974,5,21,0,0,974,975,5,72,0,0,975,976,5,29,0,0,976,977,3,204,102,
        0,977,978,5,9,0,0,978,979,5,73,0,0,979,980,5,29,0,0,980,981,5,25,
        0,0,981,982,3,208,104,0,982,983,5,26,0,0,983,984,5,22,0,0,984,985,
        5,7,0,0,985,1001,1,0,0,0,986,987,3,202,101,0,987,988,5,21,0,0,988,
        989,5,73,0,0,989,990,5,29,0,0,990,991,5,25,0,0,991,992,3,208,104,
        0,992,993,5,26,0,0,993,994,5,9,0,0,994,995,5,72,0,0,995,996,5,29,
        0,0,996,997,3,204,102,0,997,998,5,22,0,0,998,999,5,7,0,0,999,1001,
        1,0,0,0,1000,972,1,0,0,0,1000,986,1,0,0,0,1001,201,1,0,0,0,1002,
        1003,5,71,0,0,1003,203,1,0,0,0,1004,1005,5,4,0,0,1005,205,1,0,0,
        0,1006,1009,3,120,60,0,1007,1009,3,40,20,0,1008,1006,1,0,0,0,1008,
        1007,1,0,0,0,1009,207,1,0,0,0,1010,1016,3,206,103,0,1011,1012,3,
        206,103,0,1012,1013,5,11,0,0,1013,1014,3,208,104,0,1014,1016,1,0,
        0,0,1015,1010,1,0,0,0,1015,1011,1,0,0,0,1016,209,1,0,0,0,64,213,
        222,246,250,263,274,286,293,315,328,335,344,351,360,366,375,387,
        416,425,432,444,461,469,474,481,488,493,500,513,535,545,565,576,
        591,598,612,618,629,637,645,661,677,699,739,744,750,755,767,779,
        791,803,810,817,824,832,870,904,922,930,938,968,1000,1008,1015
    ]

class ASPCore2Parser ( Parser ):

    grammarFileName = "ASPCore2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'not'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'.'", "'..'", "','", "'|'", 
                     "';'", "':'", "'@'", "':-'", "':~'", "'+'", "'-'", 
                     "'*'", "'/'", "'\\'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'?'", "'_'", "<INVALID>", "<INVALID>", "'<'", 
                     "'>'", "'<='", "'>='", "'&'", "'\\E'", "'#count'", 
                     "'#max'", "'#min'", "'#sum'", "'#propagator'", "'#([A-Za-z_]*)'", 
                     "'.*'", "'%@rule_align_substitutions'", "'%@rule_look_ahead'", 
                     "'%@rule_projection'", "'%@rule_rewriting_arith'", 
                     "'%@rule_ordering'", "'@value'", "'%@rule_atom_indexed'", 
                     "'@atom'", "'@arguments'", "'%@rule_partial_order'", 
                     "'@before'", "'@after'", "'@predicate'", "'@type'", 
                     "'@Q_CONST'", "'@CONST'", "'@U_INT'", "'@UR_INT'", 
                     "'@UT_INT'", "'@R_INT'", "'@T_INT'", "'%@global_ordering'", 
                     "'%@global_atom_indexed'", "'%@global_partial_order'", 
                     "'%@global_external_predicate_conversion'", "'%@rule_to_decompose'", 
                     "'%@rule_to_not_decompose'", "'%@global_heuristic'", 
                     "'@file'", "'@elements'" ]

    symbolicNames = [ "<INVALID>", "NAF", "SYMBOLIC_CONSTANT", "VARIABLE", 
                      "STRING", "NUMBER", "WS", "DOT", "DDOT", "COMMA", 
                      "HEAD_SEPARATOR", "SEMICOLON", "COLON", "AT", "CONS", 
                      "WCONS", "PLUS", "DASH", "TIMES", "SLASH", "BACK_SLASH", 
                      "PARAM_OPEN", "PARAM_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSED", 
                      "CURLY_OPEN", "CURLY_CLOSE", "QUERY_MARK", "ANON_VAR", 
                      "EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
                      "GREATER_OR_EQ", "AMPERSAND", "EXISTS", "AGGR_COUNT", 
                      "AGGR_MAX", "AGGR_MIN", "AGGR_SUM", "ANNOTATION_GLOBAL_WASP_PROPAGATOR", 
                      "DIRECTIVE_NAME", "DIRECTIVE_VALUE", "ANNOTATION_RULE_ALIGN_SUBSTITUTIONS", 
                      "ANNOTATION_RULE_LOOK_AHEAD", "ANNOTATION_RULE_PROJECTION", 
                      "ANNOTATION_RULE_REWRITING_ARITH", "ANNOTATION_RULE_ORDERING", 
                      "ANNOTATION_ORDERING_VALUE", "ANNOTATION_RULE_ATOM_INDEXED", 
                      "ANNOTATION_ATOM_INDEXED_ATOM", "ANNOTATION_ATOM_INDEXED_ARGUMENTS", 
                      "ANNOTATION_RULE_PARTIAL_ORDER", "ANNOTATION_PARTIAL_ORDER_BEFORE", 
                      "ANNOTATION_PARTIAL_ORDER_AFTER", "ANNOTATION_EXTATOM_PREDICATE", 
                      "ANNOTATION_EXTATOM_TYPE", "ANNOTATION_EXTATOM_TYPE_QCONST", 
                      "ANNOTATION_EXTATOM_TYPE_CONST", "ANNOTATION_EXTATOM_TYPE_U_INT", 
                      "ANNOTATION_EXTATOM_TYPE_UR_INT", "ANNOTATION_EXTATOM_TYPE_UT_INT", 
                      "ANNOTATION_EXTATOM_TYPE_R_INT", "ANNOTATION_EXTATOM_TYPE_T_INT", 
                      "ANNOTATION_GLOBAL_ORDERING", "ANNOTATION_GLOBAL_ATOM_INDEXED", 
                      "ANNOTATION_GLOBAL_PARTIAL_ORDER", "ANNOTATION_GLOBAL_EXTATOM_CONVERSION", 
                      "ANNOTATION_RULE_TO_DECOMPOSE", "ANNOTATION_RULE_TO_NOT_DECOMPOSE", 
                      "ANNOTATION_GLOBAL_WASP_HEURISTIC", "ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE", 
                      "ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS", "COMMENT" ]

    RULE_program = 0
    RULE_rule = 1
    RULE_simple_rule = 2
    RULE_head = 3
    RULE_body = 4
    RULE_weight_at_levels = 5
    RULE_levels_and_terms = 6
    RULE_disjunction = 7
    RULE_conjunction = 8
    RULE_choice_atom = 9
    RULE_lower_guard = 10
    RULE_upper_guard = 11
    RULE_choice_elements = 12
    RULE_choice_element = 13
    RULE_choice_element_atom = 14
    RULE_choice_elements_literals = 15
    RULE_naf_literals = 16
    RULE_naf_literal = 17
    RULE_naf_literal_aggregate = 18
    RULE_existential_atom = 19
    RULE_classic_literal = 20
    RULE_atom = 21
    RULE_extAtom = 22
    RULE_extSemicol = 23
    RULE_terms = 24
    RULE_basic_terms = 25
    RULE_builtin_atom = 26
    RULE_compareop = 27
    RULE_binop = 28
    RULE_arithop1 = 29
    RULE_arithop2 = 30
    RULE_term_ = 31
    RULE_term__ = 32
    RULE_term = 33
    RULE_expr = 34
    RULE_factor = 35
    RULE_basic_term = 36
    RULE_ground_term = 37
    RULE_variable_term = 38
    RULE_functional_term = 39
    RULE_vars = 40
    RULE_identifier = 41
    RULE_directive = 42
    RULE_query = 43
    RULE_lower_guard_compare_aggregate = 44
    RULE_upper_guard_compare_aggregate = 45
    RULE_compare_aggregate = 46
    RULE_lower_guard_leftward_left_aggregate = 47
    RULE_leftward_left_aggregate = 48
    RULE_left_aggregate = 49
    RULE_lower_guard_rightward_left_aggregate = 50
    RULE_rightward_left_aggregate = 51
    RULE_upper_guard_leftward_right_aggregate = 52
    RULE_upper_guard_rightward_right_aggregate = 53
    RULE_right_aggregate = 54
    RULE_aggregate_atom = 55
    RULE_leftwardop = 56
    RULE_rightwardop = 57
    RULE_aggregate = 58
    RULE_aggregate_elements = 59
    RULE_aggregate_element = 60
    RULE_aggregate_function = 61
    RULE_annotation_global = 62
    RULE_annotations_rule = 63
    RULE_annotation_rule = 64
    RULE_annotation_rule_to_decompose = 65
    RULE_annotation_rule_to_not_decompose = 66
    RULE_annotation_rule_ordering = 67
    RULE_annotation_global_ordering = 68
    RULE_annotation_global_extatom_conversion = 69
    RULE_annotation_extpredicate = 70
    RULE_extatom_conv_types = 71
    RULE_extatom_conv_type = 72
    RULE_rule_ordering_type = 73
    RULE_global_ordering_type = 74
    RULE_annotation_rule_atom_indexed = 75
    RULE_annotation_global_atom_indexed = 76
    RULE_rule_indexing_arguments = 77
    RULE_rule_naf_literal_annotation = 78
    RULE_global_indexing_arguments = 79
    RULE_global_naf_literal_annotation = 80
    RULE_rule_atom_annotation_before = 81
    RULE_global_atom_annotation_before = 82
    RULE_rule_atom_annotation_after = 83
    RULE_global_atom_annotation_after = 84
    RULE_rule_atoms_annotation_before = 85
    RULE_global_atoms_annotation_before = 86
    RULE_rule_atoms_annotation_after = 87
    RULE_global_atoms_annotation_after = 88
    RULE_annotation_rule_partial_order_begin = 89
    RULE_annotation_global_partial_order_begin = 90
    RULE_annotation_rule_partial_order = 91
    RULE_annotation_global_partial_order = 92
    RULE_annotation_rule_projection = 93
    RULE_annotation_rule_projection_value = 94
    RULE_annotation_rule_rewriting_arith = 95
    RULE_annotation_rule_align_substitutions = 96
    RULE_annotation_rule_look_ahead = 97
    RULE_annotation_global_wasp_propagator = 98
    RULE_annotation_global_wasp_propagator_begin = 99
    RULE_annotation_global_wasp_heuristic = 100
    RULE_annotation_global_wasp_heuristic_begin = 101
    RULE_heuristic_python_file = 102
    RULE_aggregate_element_heuristic = 103
    RULE_aggregate_elements_heuristic = 104

    ruleNames =  [ "program", "rule", "simple_rule", "head", "body", "weight_at_levels", 
                   "levels_and_terms", "disjunction", "conjunction", "choice_atom", 
                   "lower_guard", "upper_guard", "choice_elements", "choice_element", 
                   "choice_element_atom", "choice_elements_literals", "naf_literals", 
                   "naf_literal", "naf_literal_aggregate", "existential_atom", 
                   "classic_literal", "atom", "extAtom", "extSemicol", "terms", 
                   "basic_terms", "builtin_atom", "compareop", "binop", 
                   "arithop1", "arithop2", "term_", "term__", "term", "expr", 
                   "factor", "basic_term", "ground_term", "variable_term", 
                   "functional_term", "vars", "identifier", "directive", 
                   "query", "lower_guard_compare_aggregate", "upper_guard_compare_aggregate", 
                   "compare_aggregate", "lower_guard_leftward_left_aggregate", 
                   "leftward_left_aggregate", "left_aggregate", "lower_guard_rightward_left_aggregate", 
                   "rightward_left_aggregate", "upper_guard_leftward_right_aggregate", 
                   "upper_guard_rightward_right_aggregate", "right_aggregate", 
                   "aggregate_atom", "leftwardop", "rightwardop", "aggregate", 
                   "aggregate_elements", "aggregate_element", "aggregate_function", 
                   "annotation_global", "annotations_rule", "annotation_rule", 
                   "annotation_rule_to_decompose", "annotation_rule_to_not_decompose", 
                   "annotation_rule_ordering", "annotation_global_ordering", 
                   "annotation_global_extatom_conversion", "annotation_extpredicate", 
                   "extatom_conv_types", "extatom_conv_type", "rule_ordering_type", 
                   "global_ordering_type", "annotation_rule_atom_indexed", 
                   "annotation_global_atom_indexed", "rule_indexing_arguments", 
                   "rule_naf_literal_annotation", "global_indexing_arguments", 
                   "global_naf_literal_annotation", "rule_atom_annotation_before", 
                   "global_atom_annotation_before", "rule_atom_annotation_after", 
                   "global_atom_annotation_after", "rule_atoms_annotation_before", 
                   "global_atoms_annotation_before", "rule_atoms_annotation_after", 
                   "global_atoms_annotation_after", "annotation_rule_partial_order_begin", 
                   "annotation_global_partial_order_begin", "annotation_rule_partial_order", 
                   "annotation_global_partial_order", "annotation_rule_projection", 
                   "annotation_rule_projection_value", "annotation_rule_rewriting_arith", 
                   "annotation_rule_align_substitutions", "annotation_rule_look_ahead", 
                   "annotation_global_wasp_propagator", "annotation_global_wasp_propagator_begin", 
                   "annotation_global_wasp_heuristic", "annotation_global_wasp_heuristic_begin", 
                   "heuristic_python_file", "aggregate_element_heuristic", 
                   "aggregate_elements_heuristic" ]

    EOF = Token.EOF
    NAF=1
    SYMBOLIC_CONSTANT=2
    VARIABLE=3
    STRING=4
    NUMBER=5
    WS=6
    DOT=7
    DDOT=8
    COMMA=9
    HEAD_SEPARATOR=10
    SEMICOLON=11
    COLON=12
    AT=13
    CONS=14
    WCONS=15
    PLUS=16
    DASH=17
    TIMES=18
    SLASH=19
    BACK_SLASH=20
    PARAM_OPEN=21
    PARAM_CLOSE=22
    SQUARE_OPEN=23
    SQUARE_CLOSED=24
    CURLY_OPEN=25
    CURLY_CLOSE=26
    QUERY_MARK=27
    ANON_VAR=28
    EQUAL=29
    UNEQUAL=30
    LESS=31
    GREATER=32
    LESS_OR_EQ=33
    GREATER_OR_EQ=34
    AMPERSAND=35
    EXISTS=36
    AGGR_COUNT=37
    AGGR_MAX=38
    AGGR_MIN=39
    AGGR_SUM=40
    ANNOTATION_GLOBAL_WASP_PROPAGATOR=41
    DIRECTIVE_NAME=42
    DIRECTIVE_VALUE=43
    ANNOTATION_RULE_ALIGN_SUBSTITUTIONS=44
    ANNOTATION_RULE_LOOK_AHEAD=45
    ANNOTATION_RULE_PROJECTION=46
    ANNOTATION_RULE_REWRITING_ARITH=47
    ANNOTATION_RULE_ORDERING=48
    ANNOTATION_ORDERING_VALUE=49
    ANNOTATION_RULE_ATOM_INDEXED=50
    ANNOTATION_ATOM_INDEXED_ATOM=51
    ANNOTATION_ATOM_INDEXED_ARGUMENTS=52
    ANNOTATION_RULE_PARTIAL_ORDER=53
    ANNOTATION_PARTIAL_ORDER_BEFORE=54
    ANNOTATION_PARTIAL_ORDER_AFTER=55
    ANNOTATION_EXTATOM_PREDICATE=56
    ANNOTATION_EXTATOM_TYPE=57
    ANNOTATION_EXTATOM_TYPE_QCONST=58
    ANNOTATION_EXTATOM_TYPE_CONST=59
    ANNOTATION_EXTATOM_TYPE_U_INT=60
    ANNOTATION_EXTATOM_TYPE_UR_INT=61
    ANNOTATION_EXTATOM_TYPE_UT_INT=62
    ANNOTATION_EXTATOM_TYPE_R_INT=63
    ANNOTATION_EXTATOM_TYPE_T_INT=64
    ANNOTATION_GLOBAL_ORDERING=65
    ANNOTATION_GLOBAL_ATOM_INDEXED=66
    ANNOTATION_GLOBAL_PARTIAL_ORDER=67
    ANNOTATION_GLOBAL_EXTATOM_CONVERSION=68
    ANNOTATION_RULE_TO_DECOMPOSE=69
    ANNOTATION_RULE_TO_NOT_DECOMPOSE=70
    ANNOTATION_GLOBAL_WASP_HEURISTIC=71
    ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE=72
    ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS=73
    COMMENT=74

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rule_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ASPCore2Parser.RuleContext)
            else:
                return self.getTypedRuleContext(ASPCore2Parser.RuleContext,i)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = ASPCore2Parser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 10685123022471228) != 0 or (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 127) != 0:
                self.state = 210
                self.rule_()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_rule(self):
            return self.getTypedRuleContext(ASPCore2Parser.Simple_ruleContext,0)


        def annotations_rule(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotations_ruleContext,0)


        def annotation_global(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_globalContext,0)


        def directive(self):
            return self.getTypedRuleContext(ASPCore2Parser.DirectiveContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule" ):
                listener.enterRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule" ):
                listener.exitRule(self)




    def rule_(self):

        localctx = ASPCore2Parser.RuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_rule)
        try:
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 14, 15, 17, 21, 25, 28, 36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 216
                self.simple_rule()
                pass
            elif token in [44, 45, 46, 47, 48, 50, 53, 69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self.annotations_rule()
                self.state = 218
                self.simple_rule()
                pass
            elif token in [41, 65, 66, 67, 68, 71]:
                self.enterOuterAlt(localctx, 3)
                self.state = 220
                self.annotation_global()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 4)
                self.state = 221
                self.directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def head(self):
            return self.getTypedRuleContext(ASPCore2Parser.HeadContext,0)


        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def CONS(self):
            return self.getToken(ASPCore2Parser.CONS, 0)

        def body(self):
            return self.getTypedRuleContext(ASPCore2Parser.BodyContext,0)


        def WCONS(self):
            return self.getToken(ASPCore2Parser.WCONS, 0)

        def weight_at_levels(self):
            return self.getTypedRuleContext(ASPCore2Parser.Weight_at_levelsContext,0)


        def query(self):
            return self.getTypedRuleContext(ASPCore2Parser.QueryContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_simple_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_rule" ):
                listener.enterSimple_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_rule" ):
                listener.exitSimple_rule(self)




    def simple_rule(self):

        localctx = ASPCore2Parser.Simple_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_simple_rule)
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.head()
                self.state = 225
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.head()
                self.state = 228
                self.match(ASPCore2Parser.CONS)
                self.state = 229
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 231
                self.head()
                self.state = 232
                self.match(ASPCore2Parser.CONS)
                self.state = 233
                self.body()
                self.state = 234
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 236
                self.match(ASPCore2Parser.CONS)
                self.state = 237
                self.body()
                self.state = 238
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 240
                self.match(ASPCore2Parser.WCONS)
                self.state = 241
                self.body()
                self.state = 242
                self.match(ASPCore2Parser.DOT)
                self.state = 243
                self.weight_at_levels()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 245
                self.query()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self):
            return self.getTypedRuleContext(ASPCore2Parser.DisjunctionContext,0)


        def choice_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Choice_atomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead" ):
                listener.enterHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead" ):
                listener.exitHead(self)




    def head(self):

        localctx = ASPCore2Parser.HeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_head)
        try:
            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.disjunction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.choice_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self):
            return self.getTypedRuleContext(ASPCore2Parser.ConjunctionContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = ASPCore2Parser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.conjunction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Weight_at_levelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQUARE_OPEN(self):
            return self.getToken(ASPCore2Parser.SQUARE_OPEN, 0)

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def SQUARE_CLOSED(self):
            return self.getToken(ASPCore2Parser.SQUARE_CLOSED, 0)

        def levels_and_terms(self):
            return self.getTypedRuleContext(ASPCore2Parser.Levels_and_termsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_weight_at_levels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeight_at_levels" ):
                listener.enterWeight_at_levels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeight_at_levels" ):
                listener.exitWeight_at_levels(self)




    def weight_at_levels(self):

        localctx = ASPCore2Parser.Weight_at_levelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_weight_at_levels)
        try:
            self.state = 263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.match(ASPCore2Parser.SQUARE_OPEN)
                self.state = 255
                self.term()
                self.state = 256
                self.match(ASPCore2Parser.SQUARE_CLOSED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self.match(ASPCore2Parser.SQUARE_OPEN)
                self.state = 259
                self.term()
                self.state = 260
                self.levels_and_terms()
                self.state = 261
                self.match(ASPCore2Parser.SQUARE_CLOSED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Levels_and_termsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(ASPCore2Parser.AT, 0)

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def terms(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_levels_and_terms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevels_and_terms" ):
                listener.enterLevels_and_terms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevels_and_terms" ):
                listener.exitLevels_and_terms(self)




    def levels_and_terms(self):

        localctx = ASPCore2Parser.Levels_and_termsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_levels_and_terms)
        try:
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.match(ASPCore2Parser.AT)
                self.state = 266
                self.term()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.match(ASPCore2Parser.AT)
                self.state = 268
                self.term()
                self.state = 269
                self.match(ASPCore2Parser.COMMA)
                self.state = 270
                self.terms()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 272
                self.match(ASPCore2Parser.COMMA)
                self.state = 273
                self.terms()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def HEAD_SEPARATOR(self):
            return self.getToken(ASPCore2Parser.HEAD_SEPARATOR, 0)

        def disjunction(self):
            return self.getTypedRuleContext(ASPCore2Parser.DisjunctionContext,0)


        def existential_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Existential_atomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)




    def disjunction(self):

        localctx = ASPCore2Parser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_disjunction)
        try:
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.classic_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.classic_literal()
                self.state = 278
                self.match(ASPCore2Parser.HEAD_SEPARATOR)
                self.state = 279
                self.disjunction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 281
                self.existential_atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 282
                self.existential_atom()
                self.state = 283
                self.match(ASPCore2Parser.HEAD_SEPARATOR)
                self.state = 284
                self.disjunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def naf_literal_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Naf_literal_aggregateContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def conjunction(self):
            return self.getTypedRuleContext(ASPCore2Parser.ConjunctionContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)




    def conjunction(self):

        localctx = ASPCore2Parser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_conjunction)
        try:
            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.naf_literal_aggregate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.naf_literal_aggregate()
                self.state = 290
                self.match(ASPCore2Parser.COMMA)
                self.state = 291
                self.conjunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Choice_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_guard(self):
            return self.getTypedRuleContext(ASPCore2Parser.Lower_guardContext,0)


        def CURLY_OPEN(self):
            return self.getToken(ASPCore2Parser.CURLY_OPEN, 0)

        def choice_elements(self):
            return self.getTypedRuleContext(ASPCore2Parser.Choice_elementsContext,0)


        def CURLY_CLOSE(self):
            return self.getToken(ASPCore2Parser.CURLY_CLOSE, 0)

        def upper_guard(self):
            return self.getTypedRuleContext(ASPCore2Parser.Upper_guardContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_choice_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoice_atom" ):
                listener.enterChoice_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoice_atom" ):
                listener.exitChoice_atom(self)




    def choice_atom(self):

        localctx = ASPCore2Parser.Choice_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_choice_atom)
        try:
            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 295
                self.lower_guard()
                self.state = 296
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 297
                self.choice_elements()
                self.state = 298
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 299
                self.upper_guard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.lower_guard()
                self.state = 302
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 303
                self.choice_elements()
                self.state = 304
                self.match(ASPCore2Parser.CURLY_CLOSE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 307
                self.choice_elements()
                self.state = 308
                self.match(ASPCore2Parser.CURLY_CLOSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 310
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 311
                self.choice_elements()
                self.state = 312
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 313
                self.upper_guard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lower_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def binop(self):
            return self.getTypedRuleContext(ASPCore2Parser.BinopContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_lower_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_guard" ):
                listener.enterLower_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_guard" ):
                listener.exitLower_guard(self)




    def lower_guard(self):

        localctx = ASPCore2Parser.Lower_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_lower_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.term()
            self.state = 318
            self.binop()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upper_guardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binop(self):
            return self.getTypedRuleContext(ASPCore2Parser.BinopContext,0)


        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_upper_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_guard" ):
                listener.enterUpper_guard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_guard" ):
                listener.exitUpper_guard(self)




    def upper_guard(self):

        localctx = ASPCore2Parser.Upper_guardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_upper_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.binop()
            self.state = 321
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Choice_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def choice_element(self):
            return self.getTypedRuleContext(ASPCore2Parser.Choice_elementContext,0)


        def SEMICOLON(self):
            return self.getToken(ASPCore2Parser.SEMICOLON, 0)

        def choice_elements(self):
            return self.getTypedRuleContext(ASPCore2Parser.Choice_elementsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_choice_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoice_elements" ):
                listener.enterChoice_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoice_elements" ):
                listener.exitChoice_elements(self)




    def choice_elements(self):

        localctx = ASPCore2Parser.Choice_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_choice_elements)
        try:
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.choice_element()
                self.state = 324
                self.match(ASPCore2Parser.SEMICOLON)
                self.state = 325
                self.choice_elements()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 327
                self.choice_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Choice_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def choice_element_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Choice_element_atomContext,0)


        def COLON(self):
            return self.getToken(ASPCore2Parser.COLON, 0)

        def choice_elements_literals(self):
            return self.getTypedRuleContext(ASPCore2Parser.Choice_elements_literalsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_choice_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoice_element" ):
                listener.enterChoice_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoice_element" ):
                listener.exitChoice_element(self)




    def choice_element(self):

        localctx = ASPCore2Parser.Choice_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_choice_element)
        try:
            self.state = 335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.choice_element_atom()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.choice_element_atom()
                self.state = 332
                self.match(ASPCore2Parser.COLON)
                self.state = 333
                self.choice_elements_literals()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Choice_element_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.AtomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_choice_element_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoice_element_atom" ):
                listener.enterChoice_element_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoice_element_atom" ):
                listener.exitChoice_element_atom(self)




    def choice_element_atom(self):

        localctx = ASPCore2Parser.Choice_element_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_choice_element_atom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Choice_elements_literalsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def naf_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Naf_literalContext,0)


        def naf_literals(self):
            return self.getTypedRuleContext(ASPCore2Parser.Naf_literalsContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_choice_elements_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoice_elements_literals" ):
                listener.enterChoice_elements_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoice_elements_literals" ):
                listener.exitChoice_elements_literals(self)




    def choice_elements_literals(self):

        localctx = ASPCore2Parser.Choice_elements_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_choice_elements_literals)
        try:
            self.state = 344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 339
                self.naf_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                self.naf_literals()
                self.state = 341
                self.match(ASPCore2Parser.COMMA)
                self.state = 342
                self.naf_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Naf_literalsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def naf_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Naf_literalContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def naf_literals(self):
            return self.getTypedRuleContext(ASPCore2Parser.Naf_literalsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_naf_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaf_literals" ):
                listener.enterNaf_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaf_literals" ):
                listener.exitNaf_literals(self)




    def naf_literals(self):

        localctx = ASPCore2Parser.Naf_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_naf_literals)
        try:
            self.state = 351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 346
                self.naf_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 347
                self.naf_literal()
                self.state = 348
                self.match(ASPCore2Parser.COMMA)
                self.state = 349
                self.naf_literals()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Naf_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def NAF(self):
            return self.getToken(ASPCore2Parser.NAF, 0)

        def builtin_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Builtin_atomContext,0)


        def extAtom(self):
            return self.getTypedRuleContext(ASPCore2Parser.ExtAtomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_naf_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaf_literal" ):
                listener.enterNaf_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaf_literal" ):
                listener.exitNaf_literal(self)




    def naf_literal(self):

        localctx = ASPCore2Parser.Naf_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_naf_literal)
        try:
            self.state = 360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 353
                self.classic_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 354
                self.match(ASPCore2Parser.NAF)
                self.state = 355
                self.classic_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 356
                self.builtin_atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 357
                self.extAtom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 358
                self.match(ASPCore2Parser.NAF)
                self.state = 359
                self.extAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Naf_literal_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def naf_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Naf_literalContext,0)


        def aggregate_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_atomContext,0)


        def NAF(self):
            return self.getToken(ASPCore2Parser.NAF, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_naf_literal_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaf_literal_aggregate" ):
                listener.enterNaf_literal_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaf_literal_aggregate" ):
                listener.exitNaf_literal_aggregate(self)




    def naf_literal_aggregate(self):

        localctx = ASPCore2Parser.Naf_literal_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_naf_literal_aggregate)
        try:
            self.state = 366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 362
                self.naf_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 363
                self.aggregate_atom()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 364
                self.match(ASPCore2Parser.NAF)
                self.state = 365
                self.aggregate_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Existential_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(ASPCore2Parser.EXISTS, 0)

        def vars_(self):
            return self.getTypedRuleContext(ASPCore2Parser.VarsContext,0)


        def atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.AtomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_existential_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistential_atom" ):
                listener.enterExistential_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistential_atom" ):
                listener.exitExistential_atom(self)




    def existential_atom(self):

        localctx = ASPCore2Parser.Existential_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_existential_atom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(ASPCore2Parser.EXISTS)
            self.state = 369
            self.vars_()
            self.state = 370
            self.atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Classic_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.AtomContext,0)


        def DASH(self):
            return self.getToken(ASPCore2Parser.DASH, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_classic_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassic_literal" ):
                listener.enterClassic_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassic_literal" ):
                listener.exitClassic_literal(self)




    def classic_literal(self):

        localctx = ASPCore2Parser.Classic_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_classic_literal)
        try:
            self.state = 375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 372
                self.atom()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 373
                self.match(ASPCore2Parser.DASH)
                self.state = 374
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ASPCore2Parser.IdentifierContext,0)


        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def terms(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermsContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = ASPCore2Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_atom)
        try:
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 377
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 378
                self.identifier()
                self.state = 379
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 380
                self.terms()
                self.state = 381
                self.match(ASPCore2Parser.PARAM_CLOSE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 383
                self.identifier()
                self.state = 384
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 385
                self.match(ASPCore2Parser.PARAM_CLOSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(ASPCore2Parser.AMPERSAND, 0)

        def identifier(self):
            return self.getTypedRuleContext(ASPCore2Parser.IdentifierContext,0)


        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def terms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ASPCore2Parser.TermsContext)
            else:
                return self.getTypedRuleContext(ASPCore2Parser.TermsContext,i)


        def extSemicol(self):
            return self.getTypedRuleContext(ASPCore2Parser.ExtSemicolContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_extAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtAtom" ):
                listener.enterExtAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtAtom" ):
                listener.exitExtAtom(self)




    def extAtom(self):

        localctx = ASPCore2Parser.ExtAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_extAtom)
        try:
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 389
                self.match(ASPCore2Parser.AMPERSAND)
                self.state = 390
                self.identifier()
                self.state = 391
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 392
                self.terms()
                self.state = 393
                self.extSemicol()
                self.state = 394
                self.terms()
                self.state = 395
                self.match(ASPCore2Parser.PARAM_CLOSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 397
                self.match(ASPCore2Parser.AMPERSAND)
                self.state = 398
                self.identifier()
                self.state = 399
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 400
                self.extSemicol()
                self.state = 401
                self.terms()
                self.state = 402
                self.match(ASPCore2Parser.PARAM_CLOSE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 404
                self.match(ASPCore2Parser.AMPERSAND)
                self.state = 405
                self.identifier()
                self.state = 406
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 407
                self.terms()
                self.state = 408
                self.extSemicol()
                self.state = 409
                self.match(ASPCore2Parser.PARAM_CLOSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 411
                self.match(ASPCore2Parser.AMPERSAND)
                self.state = 412
                self.identifier()
                self.state = 413
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 414
                self.match(ASPCore2Parser.PARAM_CLOSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtSemicolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(ASPCore2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_extSemicol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtSemicol" ):
                listener.enterExtSemicol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtSemicol" ):
                listener.exitExtSemicol(self)




    def extSemicol(self):

        localctx = ASPCore2Parser.ExtSemicolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_extSemicol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(ASPCore2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def terms(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_terms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerms" ):
                listener.enterTerms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerms" ):
                listener.exitTerms(self)




    def terms(self):

        localctx = ASPCore2Parser.TermsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_terms)
        try:
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.term()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.term()
                self.state = 422
                self.match(ASPCore2Parser.COMMA)
                self.state = 423
                self.terms()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Basic_termsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basic_term(self):
            return self.getTypedRuleContext(ASPCore2Parser.Basic_termContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def basic_terms(self):
            return self.getTypedRuleContext(ASPCore2Parser.Basic_termsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_basic_terms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasic_terms" ):
                listener.enterBasic_terms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasic_terms" ):
                listener.exitBasic_terms(self)




    def basic_terms(self):

        localctx = ASPCore2Parser.Basic_termsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_basic_terms)
        try:
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.basic_term()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.basic_term()
                self.state = 429
                self.match(ASPCore2Parser.COMMA)
                self.state = 430
                self.basic_terms()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Builtin_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ASPCore2Parser.TermContext)
            else:
                return self.getTypedRuleContext(ASPCore2Parser.TermContext,i)


        def binop(self):
            return self.getTypedRuleContext(ASPCore2Parser.BinopContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_builtin_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltin_atom" ):
                listener.enterBuiltin_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltin_atom" ):
                listener.exitBuiltin_atom(self)




    def builtin_atom(self):

        localctx = ASPCore2Parser.Builtin_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_builtin_atom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.term()
            self.state = 435
            self.binop()
            self.state = 436
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(ASPCore2Parser.EQUAL, 0)

        def UNEQUAL(self):
            return self.getToken(ASPCore2Parser.UNEQUAL, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_compareop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareop" ):
                listener.enterCompareop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareop" ):
                listener.exitCompareop(self)




    def compareop(self):

        localctx = ASPCore2Parser.CompareopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_compareop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            _la = self._input.LA(1)
            if not(_la==29 or _la==30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compareop(self):
            return self.getTypedRuleContext(ASPCore2Parser.CompareopContext,0)


        def leftwardop(self):
            return self.getTypedRuleContext(ASPCore2Parser.LeftwardopContext,0)


        def rightwardop(self):
            return self.getTypedRuleContext(ASPCore2Parser.RightwardopContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_binop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinop" ):
                listener.enterBinop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinop" ):
                listener.exitBinop(self)




    def binop(self):

        localctx = ASPCore2Parser.BinopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_binop)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.compareop()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.compareop()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.leftwardop()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.rightwardop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithop1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ASPCore2Parser.PLUS, 0)

        def DASH(self):
            return self.getToken(ASPCore2Parser.DASH, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_arithop1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithop1" ):
                listener.enterArithop1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithop1" ):
                listener.exitArithop1(self)




    def arithop1(self):

        localctx = ASPCore2Parser.Arithop1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_arithop1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithop2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMES(self):
            return self.getToken(ASPCore2Parser.TIMES, 0)

        def SLASH(self):
            return self.getToken(ASPCore2Parser.SLASH, 0)

        def BACK_SLASH(self):
            return self.getToken(ASPCore2Parser.BACK_SLASH, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_arithop2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithop2" ):
                listener.enterArithop2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithop2" ):
                listener.exitArithop2(self)




    def arithop2(self):

        localctx = ASPCore2Parser.Arithop2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_arithop2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANON_VAR(self):
            return self.getToken(ASPCore2Parser.ANON_VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(ASPCore2Parser.IdentifierContext,0)


        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def terms(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermsContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.NUMBER)
            else:
                return self.getToken(ASPCore2Parser.NUMBER, i)

        def DDOT(self):
            return self.getToken(ASPCore2Parser.DDOT, 0)

        def DASH(self):
            return self.getToken(ASPCore2Parser.DASH, 0)

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_term_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm_" ):
                listener.enterTerm_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm_" ):
                listener.exitTerm_(self)




    def term_(self):

        localctx = ASPCore2Parser.Term_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_term_)
        try:
            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self.match(ASPCore2Parser.ANON_VAR)
                pass
            elif token in [2, 3, 4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.identifier()
                self.state = 452
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 453
                self.terms()
                self.state = 454
                self.match(ASPCore2Parser.PARAM_CLOSE)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 456
                self.match(ASPCore2Parser.NUMBER)
                self.state = 457
                self.match(ASPCore2Parser.DDOT)
                self.state = 458
                self.match(ASPCore2Parser.NUMBER)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 4)
                self.state = 459
                self.match(ASPCore2Parser.DASH)
                self.state = 460
                self.term()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Term__Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ASPCore2Parser.IdentifierContext,0)


        def NUMBER(self):
            return self.getToken(ASPCore2Parser.NUMBER, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_term__

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm__" ):
                listener.enterTerm__(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm__" ):
                listener.exitTerm__(self)




    def term__(self):

        localctx = ASPCore2Parser.Term__Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_term__)
        try:
            self.state = 469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.identifier()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.match(ASPCore2Parser.NUMBER)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 465
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 466
                self.term()
                self.state = 467
                self.match(ASPCore2Parser.PARAM_CLOSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term_(self):
            return self.getTypedRuleContext(ASPCore2Parser.Term_Context,0)


        def identifier(self):
            return self.getTypedRuleContext(ASPCore2Parser.IdentifierContext,0)


        def expr(self):
            return self.getTypedRuleContext(ASPCore2Parser.ExprContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = ASPCore2Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_term)
        try:
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.term_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 472
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 473
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(ASPCore2Parser.FactorContext,0)


        def arithop1(self):
            return self.getTypedRuleContext(ASPCore2Parser.Arithop1Context,0)


        def expr(self):
            return self.getTypedRuleContext(ASPCore2Parser.ExprContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = ASPCore2Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_expr)
        try:
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.factor()
                self.state = 478
                self.arithop1()
                self.state = 479
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term__(self):
            return self.getTypedRuleContext(ASPCore2Parser.Term__Context,0)


        def arithop2(self):
            return self.getTypedRuleContext(ASPCore2Parser.Arithop2Context,0)


        def factor(self):
            return self.getTypedRuleContext(ASPCore2Parser.FactorContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = ASPCore2Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_factor)
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self.term__()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.term__()
                self.state = 485
                self.arithop2()
                self.state = 486
                self.factor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Basic_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ground_term(self):
            return self.getTypedRuleContext(ASPCore2Parser.Ground_termContext,0)


        def variable_term(self):
            return self.getTypedRuleContext(ASPCore2Parser.Variable_termContext,0)


        def functional_term(self):
            return self.getTypedRuleContext(ASPCore2Parser.Functional_termContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_basic_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasic_term" ):
                listener.enterBasic_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasic_term" ):
                listener.exitBasic_term(self)




    def basic_term(self):

        localctx = ASPCore2Parser.Basic_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_basic_term)
        try:
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.ground_term()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.variable_term()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 492
                self.functional_term()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ground_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOLIC_CONSTANT(self):
            return self.getToken(ASPCore2Parser.SYMBOLIC_CONSTANT, 0)

        def STRING(self):
            return self.getToken(ASPCore2Parser.STRING, 0)

        def NUMBER(self):
            return self.getToken(ASPCore2Parser.NUMBER, 0)

        def DASH(self):
            return self.getToken(ASPCore2Parser.DASH, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_ground_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGround_term" ):
                listener.enterGround_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGround_term" ):
                listener.exitGround_term(self)




    def ground_term(self):

        localctx = ASPCore2Parser.Ground_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_ground_term)
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self.match(ASPCore2Parser.SYMBOLIC_CONSTANT)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.match(ASPCore2Parser.STRING)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.match(ASPCore2Parser.NUMBER)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self.match(ASPCore2Parser.DASH)
                self.state = 499
                self.match(ASPCore2Parser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(ASPCore2Parser.VARIABLE, 0)

        def ANON_VAR(self):
            return self.getToken(ASPCore2Parser.ANON_VAR, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_variable_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_term" ):
                listener.enterVariable_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_term" ):
                listener.exitVariable_term(self)




    def variable_term(self):

        localctx = ASPCore2Parser.Variable_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variable_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            _la = self._input.LA(1)
            if not(_la==3 or _la==28):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Functional_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ASPCore2Parser.IdentifierContext,0)


        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def terms(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermsContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_functional_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctional_term" ):
                listener.enterFunctional_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctional_term" ):
                listener.exitFunctional_term(self)




    def functional_term(self):

        localctx = ASPCore2Parser.Functional_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functional_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.identifier()
            self.state = 505
            self.match(ASPCore2Parser.PARAM_OPEN)
            self.state = 506
            self.terms()
            self.state = 507
            self.match(ASPCore2Parser.PARAM_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(ASPCore2Parser.VARIABLE, 0)

        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def vars_(self):
            return self.getTypedRuleContext(ASPCore2Parser.VarsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_vars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVars" ):
                listener.enterVars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVars" ):
                listener.exitVars(self)




    def vars_(self):

        localctx = ASPCore2Parser.VarsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_vars)
        try:
            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 509
                self.match(ASPCore2Parser.VARIABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.match(ASPCore2Parser.VARIABLE)
                self.state = 511
                self.match(ASPCore2Parser.COMMA)
                self.state = 512
                self.vars_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOLIC_CONSTANT(self):
            return self.getToken(ASPCore2Parser.SYMBOLIC_CONSTANT, 0)

        def STRING(self):
            return self.getToken(ASPCore2Parser.STRING, 0)

        def VARIABLE(self):
            return self.getToken(ASPCore2Parser.VARIABLE, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = ASPCore2Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 28) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIRECTIVE_NAME(self):
            return self.getToken(ASPCore2Parser.DIRECTIVE_NAME, 0)

        def DIRECTIVE_VALUE(self):
            return self.getToken(ASPCore2Parser.DIRECTIVE_VALUE, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirective" ):
                listener.enterDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirective" ):
                listener.exitDirective(self)




    def directive(self):

        localctx = ASPCore2Parser.DirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(ASPCore2Parser.DIRECTIVE_NAME)
            self.state = 518
            self.match(ASPCore2Parser.DIRECTIVE_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.AtomContext,0)


        def QUERY_MARK(self):
            return self.getToken(ASPCore2Parser.QUERY_MARK, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = ASPCore2Parser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.atom()
            self.state = 521
            self.match(ASPCore2Parser.QUERY_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lower_guard_compare_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def compareop(self):
            return self.getTypedRuleContext(ASPCore2Parser.CompareopContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_lower_guard_compare_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_guard_compare_aggregate" ):
                listener.enterLower_guard_compare_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_guard_compare_aggregate" ):
                listener.exitLower_guard_compare_aggregate(self)




    def lower_guard_compare_aggregate(self):

        localctx = ASPCore2Parser.Lower_guard_compare_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_lower_guard_compare_aggregate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.term()
            self.state = 524
            self.compareop()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upper_guard_compare_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compareop(self):
            return self.getTypedRuleContext(ASPCore2Parser.CompareopContext,0)


        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_upper_guard_compare_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_guard_compare_aggregate" ):
                listener.enterUpper_guard_compare_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_guard_compare_aggregate" ):
                listener.exitUpper_guard_compare_aggregate(self)




    def upper_guard_compare_aggregate(self):

        localctx = ASPCore2Parser.Upper_guard_compare_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_upper_guard_compare_aggregate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.compareop()
            self.state = 527
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compare_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_guard_compare_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Lower_guard_compare_aggregateContext,0)


        def aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.AggregateContext,0)


        def upper_guard_compare_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Upper_guard_compare_aggregateContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_compare_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompare_aggregate" ):
                listener.enterCompare_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompare_aggregate" ):
                listener.exitCompare_aggregate(self)




    def compare_aggregate(self):

        localctx = ASPCore2Parser.Compare_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_compare_aggregate)
        try:
            self.state = 535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 17, 21, 28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.lower_guard_compare_aggregate()
                self.state = 530
                self.aggregate()
                pass
            elif token in [37, 38, 39, 40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.aggregate()
                self.state = 533
                self.upper_guard_compare_aggregate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lower_guard_leftward_left_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def leftwardop(self):
            return self.getTypedRuleContext(ASPCore2Parser.LeftwardopContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_lower_guard_leftward_left_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_guard_leftward_left_aggregate" ):
                listener.enterLower_guard_leftward_left_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_guard_leftward_left_aggregate" ):
                listener.exitLower_guard_leftward_left_aggregate(self)




    def lower_guard_leftward_left_aggregate(self):

        localctx = ASPCore2Parser.Lower_guard_leftward_left_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_lower_guard_leftward_left_aggregate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.term()
            self.state = 538
            self.leftwardop()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Leftward_left_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_guard_leftward_left_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Lower_guard_leftward_left_aggregateContext,0)


        def aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.AggregateContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_leftward_left_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftward_left_aggregate" ):
                listener.enterLeftward_left_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftward_left_aggregate" ):
                listener.exitLeftward_left_aggregate(self)




    def leftward_left_aggregate(self):

        localctx = ASPCore2Parser.Leftward_left_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_leftward_left_aggregate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.lower_guard_leftward_left_aggregate()
            self.state = 541
            self.aggregate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Left_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftward_left_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Leftward_left_aggregateContext,0)


        def rightward_left_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rightward_left_aggregateContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_left_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeft_aggregate" ):
                listener.enterLeft_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeft_aggregate" ):
                listener.exitLeft_aggregate(self)




    def left_aggregate(self):

        localctx = ASPCore2Parser.Left_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_left_aggregate)
        try:
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self.leftward_left_aggregate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.rightward_left_aggregate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lower_guard_rightward_left_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def rightwardop(self):
            return self.getTypedRuleContext(ASPCore2Parser.RightwardopContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_lower_guard_rightward_left_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_guard_rightward_left_aggregate" ):
                listener.enterLower_guard_rightward_left_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_guard_rightward_left_aggregate" ):
                listener.exitLower_guard_rightward_left_aggregate(self)




    def lower_guard_rightward_left_aggregate(self):

        localctx = ASPCore2Parser.Lower_guard_rightward_left_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lower_guard_rightward_left_aggregate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.term()
            self.state = 548
            self.rightwardop()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rightward_left_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_guard_rightward_left_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Lower_guard_rightward_left_aggregateContext,0)


        def aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.AggregateContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rightward_left_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightward_left_aggregate" ):
                listener.enterRightward_left_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightward_left_aggregate" ):
                listener.exitRightward_left_aggregate(self)




    def rightward_left_aggregate(self):

        localctx = ASPCore2Parser.Rightward_left_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_rightward_left_aggregate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.lower_guard_rightward_left_aggregate()
            self.state = 551
            self.aggregate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upper_guard_leftward_right_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftwardop(self):
            return self.getTypedRuleContext(ASPCore2Parser.LeftwardopContext,0)


        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_upper_guard_leftward_right_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_guard_leftward_right_aggregate" ):
                listener.enterUpper_guard_leftward_right_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_guard_leftward_right_aggregate" ):
                listener.exitUpper_guard_leftward_right_aggregate(self)




    def upper_guard_leftward_right_aggregate(self):

        localctx = ASPCore2Parser.Upper_guard_leftward_right_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_upper_guard_leftward_right_aggregate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.leftwardop()
            self.state = 554
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upper_guard_rightward_right_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightwardop(self):
            return self.getTypedRuleContext(ASPCore2Parser.RightwardopContext,0)


        def term(self):
            return self.getTypedRuleContext(ASPCore2Parser.TermContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_upper_guard_rightward_right_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_guard_rightward_right_aggregate" ):
                listener.enterUpper_guard_rightward_right_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_guard_rightward_right_aggregate" ):
                listener.exitUpper_guard_rightward_right_aggregate(self)




    def upper_guard_rightward_right_aggregate(self):

        localctx = ASPCore2Parser.Upper_guard_rightward_right_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_upper_guard_rightward_right_aggregate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.rightwardop()
            self.state = 557
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.AggregateContext,0)


        def upper_guard_leftward_right_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Upper_guard_leftward_right_aggregateContext,0)


        def upper_guard_rightward_right_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Upper_guard_rightward_right_aggregateContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_right_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_aggregate" ):
                listener.enterRight_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_aggregate" ):
                listener.exitRight_aggregate(self)




    def right_aggregate(self):

        localctx = ASPCore2Parser.Right_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_right_aggregate)
        try:
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 559
                self.aggregate()
                self.state = 560
                self.upper_guard_leftward_right_aggregate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.aggregate()
                self.state = 563
                self.upper_guard_rightward_right_aggregate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def left_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Left_aggregateContext,0)


        def right_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Right_aggregateContext,0)


        def compare_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Compare_aggregateContext,0)


        def leftward_left_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Leftward_left_aggregateContext,0)


        def upper_guard_leftward_right_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Upper_guard_leftward_right_aggregateContext,0)


        def rightward_left_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rightward_left_aggregateContext,0)


        def upper_guard_rightward_right_aggregate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Upper_guard_rightward_right_aggregateContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_aggregate_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_atom" ):
                listener.enterAggregate_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_atom" ):
                listener.exitAggregate_atom(self)




    def aggregate_atom(self):

        localctx = ASPCore2Parser.Aggregate_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_aggregate_atom)
        try:
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.left_aggregate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.right_aggregate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                self.compare_aggregate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 570
                self.leftward_left_aggregate()
                self.state = 571
                self.upper_guard_leftward_right_aggregate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 573
                self.rightward_left_aggregate()
                self.state = 574
                self.upper_guard_rightward_right_aggregate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftwardopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(ASPCore2Parser.LESS, 0)

        def LESS_OR_EQ(self):
            return self.getToken(ASPCore2Parser.LESS_OR_EQ, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_leftwardop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftwardop" ):
                listener.enterLeftwardop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftwardop" ):
                listener.exitLeftwardop(self)




    def leftwardop(self):

        localctx = ASPCore2Parser.LeftwardopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_leftwardop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            _la = self._input.LA(1)
            if not(_la==31 or _la==33):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightwardopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(ASPCore2Parser.GREATER, 0)

        def GREATER_OR_EQ(self):
            return self.getToken(ASPCore2Parser.GREATER_OR_EQ, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rightwardop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightwardop" ):
                listener.enterRightwardop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightwardop" ):
                listener.exitRightwardop(self)




    def rightwardop(self):

        localctx = ASPCore2Parser.RightwardopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_rightwardop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            _la = self._input.LA(1)
            if not(_la==32 or _la==34):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_functionContext,0)


        def CURLY_OPEN(self):
            return self.getToken(ASPCore2Parser.CURLY_OPEN, 0)

        def aggregate_elements(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_elementsContext,0)


        def CURLY_CLOSE(self):
            return self.getToken(ASPCore2Parser.CURLY_CLOSE, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate" ):
                listener.enterAggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate" ):
                listener.exitAggregate(self)




    def aggregate(self):

        localctx = ASPCore2Parser.AggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_aggregate)
        try:
            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.aggregate_function()
                self.state = 583
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 584
                self.aggregate_elements()
                self.state = 585
                self.match(ASPCore2Parser.CURLY_CLOSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 587
                self.aggregate_function()
                self.state = 588
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 589
                self.match(ASPCore2Parser.CURLY_CLOSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_element(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_elementContext,0)


        def SEMICOLON(self):
            return self.getToken(ASPCore2Parser.SEMICOLON, 0)

        def aggregate_elements(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_elementsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_aggregate_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_elements" ):
                listener.enterAggregate_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_elements" ):
                listener.exitAggregate_elements(self)




    def aggregate_elements(self):

        localctx = ASPCore2Parser.Aggregate_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_aggregate_elements)
        try:
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 593
                self.aggregate_element()
                self.state = 594
                self.match(ASPCore2Parser.SEMICOLON)
                self.state = 595
                self.aggregate_elements()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self.aggregate_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basic_terms(self):
            return self.getTypedRuleContext(ASPCore2Parser.Basic_termsContext,0)


        def COLON(self):
            return self.getToken(ASPCore2Parser.COLON, 0)

        def naf_literals(self):
            return self.getTypedRuleContext(ASPCore2Parser.Naf_literalsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_aggregate_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_element" ):
                listener.enterAggregate_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_element" ):
                listener.exitAggregate_element(self)




    def aggregate_element(self):

        localctx = ASPCore2Parser.Aggregate_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_aggregate_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.basic_terms()
            self.state = 601
            self.match(ASPCore2Parser.COLON)
            self.state = 602
            self.naf_literals()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGGR_COUNT(self):
            return self.getToken(ASPCore2Parser.AGGR_COUNT, 0)

        def AGGR_MAX(self):
            return self.getToken(ASPCore2Parser.AGGR_MAX, 0)

        def AGGR_MIN(self):
            return self.getToken(ASPCore2Parser.AGGR_MIN, 0)

        def AGGR_SUM(self):
            return self.getToken(ASPCore2Parser.AGGR_SUM, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_aggregate_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function" ):
                listener.enterAggregate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function" ):
                listener.exitAggregate_function(self)




    def aggregate_function(self):

        localctx = ASPCore2Parser.Aggregate_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_aggregate_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 2061584302080) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_globalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_global_ordering(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_orderingContext,0)


        def annotation_global_atom_indexed(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_atom_indexedContext,0)


        def annotation_global_partial_order(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_partial_orderContext,0)


        def annotation_global_extatom_conversion(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_extatom_conversionContext,0)


        def annotation_global_wasp_heuristic(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_wasp_heuristicContext,0)


        def annotation_global_wasp_propagator(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_wasp_propagatorContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global" ):
                listener.enterAnnotation_global(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global" ):
                listener.exitAnnotation_global(self)




    def annotation_global(self):

        localctx = ASPCore2Parser.Annotation_globalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_annotation_global)
        try:
            self.state = 612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.annotation_global_ordering()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.annotation_global_atom_indexed()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self.annotation_global_partial_order()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 609
                self.annotation_global_extatom_conversion()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 610
                self.annotation_global_wasp_heuristic()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 6)
                self.state = 611
                self.annotation_global_wasp_propagator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotations_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_rule(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_ruleContext,0)


        def annotations_rule(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotations_ruleContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotations_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotations_rule" ):
                listener.enterAnnotations_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotations_rule" ):
                listener.exitAnnotations_rule(self)




    def annotations_rule(self):

        localctx = ASPCore2Parser.Annotations_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotations_rule)
        try:
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                self.annotation_rule()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 615
                self.annotation_rule()
                self.state = 616
                self.annotations_rule()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_rule_ordering(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_orderingContext,0)


        def annotation_rule_atom_indexed(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_atom_indexedContext,0)


        def annotation_rule_partial_order(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_partial_orderContext,0)


        def annotation_rule_projection(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_projectionContext,0)


        def annotation_rule_rewriting_arith(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_rewriting_arithContext,0)


        def annotation_rule_align_substitutions(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_align_substitutionsContext,0)


        def annotation_rule_look_ahead(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_look_aheadContext,0)


        def annotation_rule_to_decompose(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_to_decomposeContext,0)


        def annotation_rule_to_not_decompose(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_to_not_decomposeContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule" ):
                listener.enterAnnotation_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule" ):
                listener.exitAnnotation_rule(self)




    def annotation_rule(self):

        localctx = ASPCore2Parser.Annotation_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotation_rule)
        try:
            self.state = 629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 620
                self.annotation_rule_ordering()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.annotation_rule_atom_indexed()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 622
                self.annotation_rule_partial_order()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 623
                self.annotation_rule_projection()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 5)
                self.state = 624
                self.annotation_rule_rewriting_arith()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 6)
                self.state = 625
                self.annotation_rule_align_substitutions()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 7)
                self.state = 626
                self.annotation_rule_look_ahead()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 8)
                self.state = 627
                self.annotation_rule_to_decompose()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 9)
                self.state = 628
                self.annotation_rule_to_not_decompose()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_to_decomposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_TO_DECOMPOSE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_TO_DECOMPOSE, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_to_decompose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_to_decompose" ):
                listener.enterAnnotation_rule_to_decompose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_to_decompose" ):
                listener.exitAnnotation_rule_to_decompose(self)




    def annotation_rule_to_decompose(self):

        localctx = ASPCore2Parser.Annotation_rule_to_decomposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotation_rule_to_decompose)
        try:
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.match(ASPCore2Parser.ANNOTATION_RULE_TO_DECOMPOSE)
                self.state = 632
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 633
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 634
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.match(ASPCore2Parser.ANNOTATION_RULE_TO_DECOMPOSE)
                self.state = 636
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_to_not_decomposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_TO_NOT_DECOMPOSE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_TO_NOT_DECOMPOSE, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_to_not_decompose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_to_not_decompose" ):
                listener.enterAnnotation_rule_to_not_decompose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_to_not_decompose" ):
                listener.exitAnnotation_rule_to_not_decompose(self)




    def annotation_rule_to_not_decompose(self):

        localctx = ASPCore2Parser.Annotation_rule_to_not_decomposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotation_rule_to_not_decompose)
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 639
                self.match(ASPCore2Parser.ANNOTATION_RULE_TO_NOT_DECOMPOSE)
                self.state = 640
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 641
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 642
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 643
                self.match(ASPCore2Parser.ANNOTATION_RULE_TO_NOT_DECOMPOSE)
                self.state = 644
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_orderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_ORDERING(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_ORDERING, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_ORDERING_VALUE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_ORDERING_VALUE, 0)

        def EQUAL(self):
            return self.getToken(ASPCore2Parser.EQUAL, 0)

        def rule_ordering_type(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_ordering_typeContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_ordering" ):
                listener.enterAnnotation_rule_ordering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_ordering" ):
                listener.exitAnnotation_rule_ordering(self)




    def annotation_rule_ordering(self):

        localctx = ASPCore2Parser.Annotation_rule_orderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_annotation_rule_ordering)
        try:
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(ASPCore2Parser.ANNOTATION_RULE_ORDERING)
                self.state = 648
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 649
                self.match(ASPCore2Parser.ANNOTATION_ORDERING_VALUE)
                self.state = 650
                self.match(ASPCore2Parser.EQUAL)
                self.state = 651
                self.rule_ordering_type()
                self.state = 652
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 653
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.match(ASPCore2Parser.ANNOTATION_RULE_ORDERING)
                self.state = 656
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 657
                self.rule_ordering_type()
                self.state = 658
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 659
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_orderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_GLOBAL_ORDERING(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_ORDERING, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_ORDERING_VALUE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_ORDERING_VALUE, 0)

        def EQUAL(self):
            return self.getToken(ASPCore2Parser.EQUAL, 0)

        def global_ordering_type(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_ordering_typeContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_ordering" ):
                listener.enterAnnotation_global_ordering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_ordering" ):
                listener.exitAnnotation_global_ordering(self)




    def annotation_global_ordering(self):

        localctx = ASPCore2Parser.Annotation_global_orderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_annotation_global_ordering)
        try:
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 663
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_ORDERING)
                self.state = 664
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 665
                self.match(ASPCore2Parser.ANNOTATION_ORDERING_VALUE)
                self.state = 666
                self.match(ASPCore2Parser.EQUAL)
                self.state = 667
                self.global_ordering_type()
                self.state = 668
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 669
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_ORDERING)
                self.state = 672
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 673
                self.global_ordering_type()
                self.state = 674
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 675
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_extatom_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_GLOBAL_EXTATOM_CONVERSION(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_EXTATOM_CONVERSION, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_EXTATOM_PREDICATE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_PREDICATE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.EQUAL)
            else:
                return self.getToken(ASPCore2Parser.EQUAL, i)

        def annotation_extpredicate(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_extpredicateContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def ANNOTATION_EXTATOM_TYPE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE, 0)

        def extatom_conv_types(self):
            return self.getTypedRuleContext(ASPCore2Parser.Extatom_conv_typesContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_extatom_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_extatom_conversion" ):
                listener.enterAnnotation_global_extatom_conversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_extatom_conversion" ):
                listener.exitAnnotation_global_extatom_conversion(self)




    def annotation_global_extatom_conversion(self):

        localctx = ASPCore2Parser.Annotation_global_extatom_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_annotation_global_extatom_conversion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(ASPCore2Parser.ANNOTATION_GLOBAL_EXTATOM_CONVERSION)
            self.state = 680
            self.match(ASPCore2Parser.PARAM_OPEN)
            self.state = 681
            self.match(ASPCore2Parser.ANNOTATION_EXTATOM_PREDICATE)
            self.state = 682
            self.match(ASPCore2Parser.EQUAL)
            self.state = 683
            self.annotation_extpredicate()
            self.state = 684
            self.match(ASPCore2Parser.COMMA)
            self.state = 685
            self.match(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE)
            self.state = 686
            self.match(ASPCore2Parser.EQUAL)
            self.state = 687
            self.extatom_conv_types()
            self.state = 688
            self.match(ASPCore2Parser.PARAM_CLOSE)
            self.state = 689
            self.match(ASPCore2Parser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_extpredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(ASPCore2Parser.AMPERSAND, 0)

        def identifier(self):
            return self.getTypedRuleContext(ASPCore2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_extpredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_extpredicate" ):
                listener.enterAnnotation_extpredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_extpredicate" ):
                listener.exitAnnotation_extpredicate(self)




    def annotation_extpredicate(self):

        localctx = ASPCore2Parser.Annotation_extpredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_annotation_extpredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(ASPCore2Parser.AMPERSAND)
            self.state = 692
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extatom_conv_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extatom_conv_type(self):
            return self.getTypedRuleContext(ASPCore2Parser.Extatom_conv_typeContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def extatom_conv_types(self):
            return self.getTypedRuleContext(ASPCore2Parser.Extatom_conv_typesContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_extatom_conv_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtatom_conv_types" ):
                listener.enterExtatom_conv_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtatom_conv_types" ):
                listener.exitExtatom_conv_types(self)




    def extatom_conv_types(self):

        localctx = ASPCore2Parser.Extatom_conv_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_extatom_conv_types)
        try:
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.extatom_conv_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.extatom_conv_type()
                self.state = 696
                self.match(ASPCore2Parser.COMMA)
                self.state = 697
                self.extatom_conv_types()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extatom_conv_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_EXTATOM_TYPE_QCONST(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE_QCONST, 0)

        def ANNOTATION_EXTATOM_TYPE_CONST(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE_CONST, 0)

        def ANNOTATION_EXTATOM_TYPE_U_INT(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE_U_INT, 0)

        def ANNOTATION_EXTATOM_TYPE_UT_INT(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE_UT_INT, 0)

        def ANNOTATION_EXTATOM_TYPE_UR_INT(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE_UR_INT, 0)

        def ANNOTATION_EXTATOM_TYPE_T_INT(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE_T_INT, 0)

        def ANNOTATION_EXTATOM_TYPE_R_INT(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_EXTATOM_TYPE_R_INT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_extatom_conv_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtatom_conv_type" ):
                listener.enterExtatom_conv_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtatom_conv_type" ):
                listener.exitExtatom_conv_type(self)




    def extatom_conv_type(self):

        localctx = ASPCore2Parser.Extatom_conv_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_extatom_conv_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            _la = self._input.LA(1)
            if not((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 127) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_ordering_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ASPCore2Parser.NUMBER, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rule_ordering_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_ordering_type" ):
                listener.enterRule_ordering_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_ordering_type" ):
                listener.exitRule_ordering_type(self)




    def rule_ordering_type(self):

        localctx = ASPCore2Parser.Rule_ordering_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_rule_ordering_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(ASPCore2Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_ordering_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ASPCore2Parser.NUMBER, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_global_ordering_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_ordering_type" ):
                listener.enterGlobal_ordering_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_ordering_type" ):
                listener.exitGlobal_ordering_type(self)




    def global_ordering_type(self):

        localctx = ASPCore2Parser.Global_ordering_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_global_ordering_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(ASPCore2Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_atom_indexedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_ATOM_INDEXED(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_ATOM_INDEXED, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_ATOM_INDEXED_ATOM(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_ATOM_INDEXED_ATOM, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.EQUAL)
            else:
                return self.getToken(ASPCore2Parser.EQUAL, i)

        def rule_naf_literal_annotation(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_naf_literal_annotationContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def ANNOTATION_ATOM_INDEXED_ARGUMENTS(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_ATOM_INDEXED_ARGUMENTS, 0)

        def CURLY_OPEN(self):
            return self.getToken(ASPCore2Parser.CURLY_OPEN, 0)

        def rule_indexing_arguments(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_indexing_argumentsContext,0)


        def CURLY_CLOSE(self):
            return self.getToken(ASPCore2Parser.CURLY_CLOSE, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_atom_indexed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_atom_indexed" ):
                listener.enterAnnotation_rule_atom_indexed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_atom_indexed" ):
                listener.exitAnnotation_rule_atom_indexed(self)




    def annotation_rule_atom_indexed(self):

        localctx = ASPCore2Parser.Annotation_rule_atom_indexedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_annotation_rule_atom_indexed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(ASPCore2Parser.ANNOTATION_RULE_ATOM_INDEXED)
            self.state = 708
            self.match(ASPCore2Parser.PARAM_OPEN)
            self.state = 709
            self.match(ASPCore2Parser.ANNOTATION_ATOM_INDEXED_ATOM)
            self.state = 710
            self.match(ASPCore2Parser.EQUAL)
            self.state = 711
            self.rule_naf_literal_annotation()
            self.state = 712
            self.match(ASPCore2Parser.COMMA)
            self.state = 713
            self.match(ASPCore2Parser.ANNOTATION_ATOM_INDEXED_ARGUMENTS)
            self.state = 714
            self.match(ASPCore2Parser.EQUAL)
            self.state = 715
            self.match(ASPCore2Parser.CURLY_OPEN)
            self.state = 716
            self.rule_indexing_arguments()
            self.state = 717
            self.match(ASPCore2Parser.CURLY_CLOSE)
            self.state = 718
            self.match(ASPCore2Parser.PARAM_CLOSE)
            self.state = 719
            self.match(ASPCore2Parser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_atom_indexedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_GLOBAL_ATOM_INDEXED(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_ATOM_INDEXED, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_ATOM_INDEXED_ATOM(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_ATOM_INDEXED_ATOM, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.EQUAL)
            else:
                return self.getToken(ASPCore2Parser.EQUAL, i)

        def global_naf_literal_annotation(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_naf_literal_annotationContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def ANNOTATION_ATOM_INDEXED_ARGUMENTS(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_ATOM_INDEXED_ARGUMENTS, 0)

        def CURLY_OPEN(self):
            return self.getToken(ASPCore2Parser.CURLY_OPEN, 0)

        def global_indexing_arguments(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_indexing_argumentsContext,0)


        def CURLY_CLOSE(self):
            return self.getToken(ASPCore2Parser.CURLY_CLOSE, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_atom_indexed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_atom_indexed" ):
                listener.enterAnnotation_global_atom_indexed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_atom_indexed" ):
                listener.exitAnnotation_global_atom_indexed(self)




    def annotation_global_atom_indexed(self):

        localctx = ASPCore2Parser.Annotation_global_atom_indexedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotation_global_atom_indexed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(ASPCore2Parser.ANNOTATION_GLOBAL_ATOM_INDEXED)
            self.state = 722
            self.match(ASPCore2Parser.PARAM_OPEN)
            self.state = 723
            self.match(ASPCore2Parser.ANNOTATION_ATOM_INDEXED_ATOM)
            self.state = 724
            self.match(ASPCore2Parser.EQUAL)
            self.state = 725
            self.global_naf_literal_annotation()
            self.state = 726
            self.match(ASPCore2Parser.COMMA)
            self.state = 727
            self.match(ASPCore2Parser.ANNOTATION_ATOM_INDEXED_ARGUMENTS)
            self.state = 728
            self.match(ASPCore2Parser.EQUAL)
            self.state = 729
            self.match(ASPCore2Parser.CURLY_OPEN)
            self.state = 730
            self.global_indexing_arguments()
            self.state = 731
            self.match(ASPCore2Parser.CURLY_CLOSE)
            self.state = 732
            self.match(ASPCore2Parser.PARAM_CLOSE)
            self.state = 733
            self.match(ASPCore2Parser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_indexing_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ASPCore2Parser.NUMBER, 0)

        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def rule_indexing_arguments(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_indexing_argumentsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rule_indexing_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_indexing_arguments" ):
                listener.enterRule_indexing_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_indexing_arguments" ):
                listener.exitRule_indexing_arguments(self)




    def rule_indexing_arguments(self):

        localctx = ASPCore2Parser.Rule_indexing_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_rule_indexing_arguments)
        try:
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.match(ASPCore2Parser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.match(ASPCore2Parser.NUMBER)
                self.state = 737
                self.match(ASPCore2Parser.COMMA)
                self.state = 738
                self.rule_indexing_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_naf_literal_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def NAF(self):
            return self.getToken(ASPCore2Parser.NAF, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rule_naf_literal_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_naf_literal_annotation" ):
                listener.enterRule_naf_literal_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_naf_literal_annotation" ):
                listener.exitRule_naf_literal_annotation(self)




    def rule_naf_literal_annotation(self):

        localctx = ASPCore2Parser.Rule_naf_literal_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_rule_naf_literal_annotation)
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self.classic_literal()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.match(ASPCore2Parser.NAF)
                self.state = 743
                self.classic_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_indexing_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ASPCore2Parser.NUMBER, 0)

        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def global_indexing_arguments(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_indexing_argumentsContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_global_indexing_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_indexing_arguments" ):
                listener.enterGlobal_indexing_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_indexing_arguments" ):
                listener.exitGlobal_indexing_arguments(self)




    def global_indexing_arguments(self):

        localctx = ASPCore2Parser.Global_indexing_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_global_indexing_arguments)
        try:
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.match(ASPCore2Parser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.match(ASPCore2Parser.NUMBER)
                self.state = 748
                self.match(ASPCore2Parser.COMMA)
                self.state = 749
                self.global_indexing_arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_naf_literal_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def NAF(self):
            return self.getToken(ASPCore2Parser.NAF, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_global_naf_literal_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_naf_literal_annotation" ):
                listener.enterGlobal_naf_literal_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_naf_literal_annotation" ):
                listener.exitGlobal_naf_literal_annotation(self)




    def global_naf_literal_annotation(self):

        localctx = ASPCore2Parser.Global_naf_literal_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_global_naf_literal_annotation)
        try:
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.classic_literal()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.match(ASPCore2Parser.NAF)
                self.state = 754
                self.classic_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_atom_annotation_beforeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def NAF(self):
            return self.getToken(ASPCore2Parser.NAF, 0)

        def builtin_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Builtin_atomContext,0)


        def aggregate_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_atomContext,0)


        def extAtom(self):
            return self.getTypedRuleContext(ASPCore2Parser.ExtAtomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rule_atom_annotation_before

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_atom_annotation_before" ):
                listener.enterRule_atom_annotation_before(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_atom_annotation_before" ):
                listener.exitRule_atom_annotation_before(self)




    def rule_atom_annotation_before(self):

        localctx = ASPCore2Parser.Rule_atom_annotation_beforeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_rule_atom_annotation_before)
        try:
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.classic_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.match(ASPCore2Parser.NAF)
                self.state = 759
                self.classic_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 760
                self.builtin_atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 761
                self.aggregate_atom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 762
                self.match(ASPCore2Parser.NAF)
                self.state = 763
                self.aggregate_atom()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 764
                self.extAtom()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 765
                self.match(ASPCore2Parser.NAF)
                self.state = 766
                self.extAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_atom_annotation_beforeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def NAF(self):
            return self.getToken(ASPCore2Parser.NAF, 0)

        def builtin_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Builtin_atomContext,0)


        def aggregate_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_atomContext,0)


        def extAtom(self):
            return self.getTypedRuleContext(ASPCore2Parser.ExtAtomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_global_atom_annotation_before

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_atom_annotation_before" ):
                listener.enterGlobal_atom_annotation_before(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_atom_annotation_before" ):
                listener.exitGlobal_atom_annotation_before(self)




    def global_atom_annotation_before(self):

        localctx = ASPCore2Parser.Global_atom_annotation_beforeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_global_atom_annotation_before)
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.classic_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.match(ASPCore2Parser.NAF)
                self.state = 771
                self.classic_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 772
                self.builtin_atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 773
                self.aggregate_atom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 774
                self.match(ASPCore2Parser.NAF)
                self.state = 775
                self.aggregate_atom()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 776
                self.extAtom()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 777
                self.match(ASPCore2Parser.NAF)
                self.state = 778
                self.extAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_atom_annotation_afterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def NAF(self):
            return self.getToken(ASPCore2Parser.NAF, 0)

        def builtin_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Builtin_atomContext,0)


        def aggregate_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_atomContext,0)


        def extAtom(self):
            return self.getTypedRuleContext(ASPCore2Parser.ExtAtomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rule_atom_annotation_after

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_atom_annotation_after" ):
                listener.enterRule_atom_annotation_after(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_atom_annotation_after" ):
                listener.exitRule_atom_annotation_after(self)




    def rule_atom_annotation_after(self):

        localctx = ASPCore2Parser.Rule_atom_annotation_afterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_rule_atom_annotation_after)
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.classic_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(ASPCore2Parser.NAF)
                self.state = 783
                self.classic_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 784
                self.builtin_atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 785
                self.aggregate_atom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 786
                self.match(ASPCore2Parser.NAF)
                self.state = 787
                self.aggregate_atom()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 788
                self.extAtom()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 789
                self.match(ASPCore2Parser.NAF)
                self.state = 790
                self.extAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_atom_annotation_afterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def NAF(self):
            return self.getToken(ASPCore2Parser.NAF, 0)

        def builtin_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Builtin_atomContext,0)


        def aggregate_atom(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_atomContext,0)


        def extAtom(self):
            return self.getTypedRuleContext(ASPCore2Parser.ExtAtomContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_global_atom_annotation_after

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_atom_annotation_after" ):
                listener.enterGlobal_atom_annotation_after(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_atom_annotation_after" ):
                listener.exitGlobal_atom_annotation_after(self)




    def global_atom_annotation_after(self):

        localctx = ASPCore2Parser.Global_atom_annotation_afterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_global_atom_annotation_after)
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.classic_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 794
                self.match(ASPCore2Parser.NAF)
                self.state = 795
                self.classic_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 796
                self.builtin_atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 797
                self.aggregate_atom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 798
                self.match(ASPCore2Parser.NAF)
                self.state = 799
                self.aggregate_atom()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 800
                self.extAtom()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 801
                self.match(ASPCore2Parser.NAF)
                self.state = 802
                self.extAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_atoms_annotation_beforeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rule_atom_annotation_before(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_atom_annotation_beforeContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def rule_atoms_annotation_before(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_atoms_annotation_beforeContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rule_atoms_annotation_before

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_atoms_annotation_before" ):
                listener.enterRule_atoms_annotation_before(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_atoms_annotation_before" ):
                listener.exitRule_atoms_annotation_before(self)




    def rule_atoms_annotation_before(self):

        localctx = ASPCore2Parser.Rule_atoms_annotation_beforeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_rule_atoms_annotation_before)
        try:
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.rule_atom_annotation_before()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.rule_atom_annotation_before()
                self.state = 807
                self.match(ASPCore2Parser.COMMA)
                self.state = 808
                self.rule_atoms_annotation_before()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_atoms_annotation_beforeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_atom_annotation_before(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_atom_annotation_beforeContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def global_atoms_annotation_before(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_atoms_annotation_beforeContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_global_atoms_annotation_before

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_atoms_annotation_before" ):
                listener.enterGlobal_atoms_annotation_before(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_atoms_annotation_before" ):
                listener.exitGlobal_atoms_annotation_before(self)




    def global_atoms_annotation_before(self):

        localctx = ASPCore2Parser.Global_atoms_annotation_beforeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_global_atoms_annotation_before)
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.global_atom_annotation_before()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.global_atom_annotation_before()
                self.state = 814
                self.match(ASPCore2Parser.COMMA)
                self.state = 815
                self.global_atoms_annotation_before()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_atoms_annotation_afterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rule_atom_annotation_after(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_atom_annotation_afterContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def rule_atoms_annotation_after(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_atoms_annotation_afterContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_rule_atoms_annotation_after

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_atoms_annotation_after" ):
                listener.enterRule_atoms_annotation_after(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_atoms_annotation_after" ):
                listener.exitRule_atoms_annotation_after(self)




    def rule_atoms_annotation_after(self):

        localctx = ASPCore2Parser.Rule_atoms_annotation_afterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_rule_atoms_annotation_after)
        try:
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.rule_atom_annotation_after()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.rule_atom_annotation_after()
                self.state = 821
                self.match(ASPCore2Parser.COMMA)
                self.state = 822
                self.rule_atoms_annotation_after()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_atoms_annotation_afterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_atom_annotation_after(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_atom_annotation_afterContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def global_atoms_annotation_after(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ASPCore2Parser.Global_atoms_annotation_afterContext)
            else:
                return self.getTypedRuleContext(ASPCore2Parser.Global_atoms_annotation_afterContext,i)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_global_atoms_annotation_after

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_atoms_annotation_after" ):
                listener.enterGlobal_atoms_annotation_after(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_atoms_annotation_after" ):
                listener.exitGlobal_atoms_annotation_after(self)




    def global_atoms_annotation_after(self):

        localctx = ASPCore2Parser.Global_atoms_annotation_afterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_global_atoms_annotation_after)
        try:
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.global_atom_annotation_after()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.global_atom_annotation_after()
                self.state = 828
                self.match(ASPCore2Parser.COMMA)
                self.state = 829
                self.global_atoms_annotation_after()
                self.state = 830
                self.global_atoms_annotation_after()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_partial_order_beginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_PARTIAL_ORDER(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_PARTIAL_ORDER, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_partial_order_begin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_partial_order_begin" ):
                listener.enterAnnotation_rule_partial_order_begin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_partial_order_begin" ):
                listener.exitAnnotation_rule_partial_order_begin(self)




    def annotation_rule_partial_order_begin(self):

        localctx = ASPCore2Parser.Annotation_rule_partial_order_beginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_annotation_rule_partial_order_begin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(ASPCore2Parser.ANNOTATION_RULE_PARTIAL_ORDER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_partial_order_beginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_GLOBAL_PARTIAL_ORDER(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_PARTIAL_ORDER, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_partial_order_begin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_partial_order_begin" ):
                listener.enterAnnotation_global_partial_order_begin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_partial_order_begin" ):
                listener.exitAnnotation_global_partial_order_begin(self)




    def annotation_global_partial_order_begin(self):

        localctx = ASPCore2Parser.Annotation_global_partial_order_beginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_annotation_global_partial_order_begin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(ASPCore2Parser.ANNOTATION_GLOBAL_PARTIAL_ORDER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_partial_orderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_rule_partial_order_begin(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_partial_order_beginContext,0)


        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_PARTIAL_ORDER_BEFORE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_BEFORE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.EQUAL)
            else:
                return self.getToken(ASPCore2Parser.EQUAL, i)

        def CURLY_OPEN(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.CURLY_OPEN)
            else:
                return self.getToken(ASPCore2Parser.CURLY_OPEN, i)

        def rule_atoms_annotation_before(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_atoms_annotation_beforeContext,0)


        def CURLY_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.CURLY_CLOSE)
            else:
                return self.getToken(ASPCore2Parser.CURLY_CLOSE, i)

        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def ANNOTATION_PARTIAL_ORDER_AFTER(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_AFTER, 0)

        def rule_atoms_annotation_after(self):
            return self.getTypedRuleContext(ASPCore2Parser.Rule_atoms_annotation_afterContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_partial_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_partial_order" ):
                listener.enterAnnotation_rule_partial_order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_partial_order" ):
                listener.exitAnnotation_rule_partial_order(self)




    def annotation_rule_partial_order(self):

        localctx = ASPCore2Parser.Annotation_rule_partial_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_annotation_rule_partial_order)
        try:
            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.annotation_rule_partial_order_begin()
                self.state = 839
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 840
                self.match(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_BEFORE)
                self.state = 841
                self.match(ASPCore2Parser.EQUAL)
                self.state = 842
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 843
                self.rule_atoms_annotation_before()
                self.state = 844
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 845
                self.match(ASPCore2Parser.COMMA)
                self.state = 846
                self.match(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_AFTER)
                self.state = 847
                self.match(ASPCore2Parser.EQUAL)
                self.state = 848
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 849
                self.rule_atoms_annotation_after()
                self.state = 850
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 851
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 852
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.annotation_rule_partial_order_begin()
                self.state = 855
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 856
                self.match(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_AFTER)
                self.state = 857
                self.match(ASPCore2Parser.EQUAL)
                self.state = 858
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 859
                self.rule_atoms_annotation_after()
                self.state = 860
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 861
                self.match(ASPCore2Parser.COMMA)
                self.state = 862
                self.match(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_BEFORE)
                self.state = 863
                self.match(ASPCore2Parser.EQUAL)
                self.state = 864
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 865
                self.rule_atoms_annotation_before()
                self.state = 866
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 867
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 868
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_partial_orderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_global_partial_order_begin(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_partial_order_beginContext,0)


        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_PARTIAL_ORDER_BEFORE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_BEFORE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.EQUAL)
            else:
                return self.getToken(ASPCore2Parser.EQUAL, i)

        def CURLY_OPEN(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.CURLY_OPEN)
            else:
                return self.getToken(ASPCore2Parser.CURLY_OPEN, i)

        def global_atoms_annotation_before(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_atoms_annotation_beforeContext,0)


        def CURLY_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.CURLY_CLOSE)
            else:
                return self.getToken(ASPCore2Parser.CURLY_CLOSE, i)

        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def ANNOTATION_PARTIAL_ORDER_AFTER(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_AFTER, 0)

        def global_atoms_annotation_after(self):
            return self.getTypedRuleContext(ASPCore2Parser.Global_atoms_annotation_afterContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_partial_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_partial_order" ):
                listener.enterAnnotation_global_partial_order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_partial_order" ):
                listener.exitAnnotation_global_partial_order(self)




    def annotation_global_partial_order(self):

        localctx = ASPCore2Parser.Annotation_global_partial_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_annotation_global_partial_order)
        try:
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.annotation_global_partial_order_begin()
                self.state = 873
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 874
                self.match(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_BEFORE)
                self.state = 875
                self.match(ASPCore2Parser.EQUAL)
                self.state = 876
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 877
                self.global_atoms_annotation_before()
                self.state = 878
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 879
                self.match(ASPCore2Parser.COMMA)
                self.state = 880
                self.match(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_AFTER)
                self.state = 881
                self.match(ASPCore2Parser.EQUAL)
                self.state = 882
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 883
                self.global_atoms_annotation_after()
                self.state = 884
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 885
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 886
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 888
                self.annotation_global_partial_order_begin()
                self.state = 889
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 890
                self.match(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_AFTER)
                self.state = 891
                self.match(ASPCore2Parser.EQUAL)
                self.state = 892
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 893
                self.global_atoms_annotation_after()
                self.state = 894
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 895
                self.match(ASPCore2Parser.COMMA)
                self.state = 896
                self.match(ASPCore2Parser.ANNOTATION_PARTIAL_ORDER_BEFORE)
                self.state = 897
                self.match(ASPCore2Parser.EQUAL)
                self.state = 898
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 899
                self.global_atoms_annotation_before()
                self.state = 900
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 901
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 902
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_projectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_PROJECTION(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_PROJECTION, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_ORDERING_VALUE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_ORDERING_VALUE, 0)

        def EQUAL(self):
            return self.getToken(ASPCore2Parser.EQUAL, 0)

        def annotation_rule_projection_value(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_rule_projection_valueContext,0)


        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_projection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_projection" ):
                listener.enterAnnotation_rule_projection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_projection" ):
                listener.exitAnnotation_rule_projection(self)




    def annotation_rule_projection(self):

        localctx = ASPCore2Parser.Annotation_rule_projectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_annotation_rule_projection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(ASPCore2Parser.ANNOTATION_RULE_PROJECTION)
            self.state = 907
            self.match(ASPCore2Parser.PARAM_OPEN)
            self.state = 908
            self.match(ASPCore2Parser.ANNOTATION_ORDERING_VALUE)
            self.state = 909
            self.match(ASPCore2Parser.EQUAL)
            self.state = 910
            self.annotation_rule_projection_value()
            self.state = 911
            self.match(ASPCore2Parser.PARAM_CLOSE)
            self.state = 912
            self.match(ASPCore2Parser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_projection_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ASPCore2Parser.NUMBER, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_projection_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_projection_value" ):
                listener.enterAnnotation_rule_projection_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_projection_value" ):
                listener.exitAnnotation_rule_projection_value(self)




    def annotation_rule_projection_value(self):

        localctx = ASPCore2Parser.Annotation_rule_projection_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_annotation_rule_projection_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(ASPCore2Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_rewriting_arithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_REWRITING_ARITH(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_REWRITING_ARITH, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_rewriting_arith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_rewriting_arith" ):
                listener.enterAnnotation_rule_rewriting_arith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_rewriting_arith" ):
                listener.exitAnnotation_rule_rewriting_arith(self)




    def annotation_rule_rewriting_arith(self):

        localctx = ASPCore2Parser.Annotation_rule_rewriting_arithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_annotation_rule_rewriting_arith)
        try:
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.match(ASPCore2Parser.ANNOTATION_RULE_REWRITING_ARITH)
                self.state = 917
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 918
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 919
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.match(ASPCore2Parser.ANNOTATION_RULE_REWRITING_ARITH)
                self.state = 921
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_align_substitutionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_ALIGN_SUBSTITUTIONS(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_ALIGN_SUBSTITUTIONS, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_align_substitutions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_align_substitutions" ):
                listener.enterAnnotation_rule_align_substitutions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_align_substitutions" ):
                listener.exitAnnotation_rule_align_substitutions(self)




    def annotation_rule_align_substitutions(self):

        localctx = ASPCore2Parser.Annotation_rule_align_substitutionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_annotation_rule_align_substitutions)
        try:
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.match(ASPCore2Parser.ANNOTATION_RULE_ALIGN_SUBSTITUTIONS)
                self.state = 925
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 926
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 927
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(ASPCore2Parser.ANNOTATION_RULE_ALIGN_SUBSTITUTIONS)
                self.state = 929
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_rule_look_aheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_RULE_LOOK_AHEAD(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_RULE_LOOK_AHEAD, 0)

        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_rule_look_ahead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_rule_look_ahead" ):
                listener.enterAnnotation_rule_look_ahead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_rule_look_ahead" ):
                listener.exitAnnotation_rule_look_ahead(self)




    def annotation_rule_look_ahead(self):

        localctx = ASPCore2Parser.Annotation_rule_look_aheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_annotation_rule_look_ahead)
        try:
            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 932
                self.match(ASPCore2Parser.ANNOTATION_RULE_LOOK_AHEAD)
                self.state = 933
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 934
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 935
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.match(ASPCore2Parser.ANNOTATION_RULE_LOOK_AHEAD)
                self.state = 937
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_wasp_propagatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_global_wasp_propagator_begin(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_wasp_propagator_beginContext,0)


        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.EQUAL)
            else:
                return self.getToken(ASPCore2Parser.EQUAL, i)

        def heuristic_python_file(self):
            return self.getTypedRuleContext(ASPCore2Parser.Heuristic_python_fileContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS, 0)

        def CURLY_OPEN(self):
            return self.getToken(ASPCore2Parser.CURLY_OPEN, 0)

        def aggregate_elements_heuristic(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_elements_heuristicContext,0)


        def CURLY_CLOSE(self):
            return self.getToken(ASPCore2Parser.CURLY_CLOSE, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_wasp_propagator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_wasp_propagator" ):
                listener.enterAnnotation_global_wasp_propagator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_wasp_propagator" ):
                listener.exitAnnotation_global_wasp_propagator(self)




    def annotation_global_wasp_propagator(self):

        localctx = ASPCore2Parser.Annotation_global_wasp_propagatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_annotation_global_wasp_propagator)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.annotation_global_wasp_propagator_begin()
                self.state = 941
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 942
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE)
                self.state = 943
                self.match(ASPCore2Parser.EQUAL)
                self.state = 944
                self.heuristic_python_file()
                self.state = 945
                self.match(ASPCore2Parser.COMMA)
                self.state = 946
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS)
                self.state = 947
                self.match(ASPCore2Parser.EQUAL)
                self.state = 948
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 949
                self.aggregate_elements_heuristic()
                self.state = 950
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 951
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 952
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.annotation_global_wasp_propagator_begin()
                self.state = 955
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 956
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS)
                self.state = 957
                self.match(ASPCore2Parser.EQUAL)
                self.state = 958
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 959
                self.aggregate_elements_heuristic()
                self.state = 960
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 961
                self.match(ASPCore2Parser.COMMA)
                self.state = 962
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE)
                self.state = 963
                self.match(ASPCore2Parser.EQUAL)
                self.state = 964
                self.heuristic_python_file()
                self.state = 965
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 966
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_wasp_propagator_beginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_GLOBAL_WASP_PROPAGATOR(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_PROPAGATOR, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_wasp_propagator_begin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_wasp_propagator_begin" ):
                listener.enterAnnotation_global_wasp_propagator_begin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_wasp_propagator_begin" ):
                listener.exitAnnotation_global_wasp_propagator_begin(self)




    def annotation_global_wasp_propagator_begin(self):

        localctx = ASPCore2Parser.Annotation_global_wasp_propagator_beginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_annotation_global_wasp_propagator_begin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_PROPAGATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_wasp_heuristicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation_global_wasp_heuristic_begin(self):
            return self.getTypedRuleContext(ASPCore2Parser.Annotation_global_wasp_heuristic_beginContext,0)


        def PARAM_OPEN(self):
            return self.getToken(ASPCore2Parser.PARAM_OPEN, 0)

        def ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(ASPCore2Parser.EQUAL)
            else:
                return self.getToken(ASPCore2Parser.EQUAL, i)

        def heuristic_python_file(self):
            return self.getTypedRuleContext(ASPCore2Parser.Heuristic_python_fileContext,0)


        def COMMA(self):
            return self.getToken(ASPCore2Parser.COMMA, 0)

        def ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS, 0)

        def CURLY_OPEN(self):
            return self.getToken(ASPCore2Parser.CURLY_OPEN, 0)

        def aggregate_elements_heuristic(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_elements_heuristicContext,0)


        def CURLY_CLOSE(self):
            return self.getToken(ASPCore2Parser.CURLY_CLOSE, 0)

        def PARAM_CLOSE(self):
            return self.getToken(ASPCore2Parser.PARAM_CLOSE, 0)

        def DOT(self):
            return self.getToken(ASPCore2Parser.DOT, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_wasp_heuristic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_wasp_heuristic" ):
                listener.enterAnnotation_global_wasp_heuristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_wasp_heuristic" ):
                listener.exitAnnotation_global_wasp_heuristic(self)




    def annotation_global_wasp_heuristic(self):

        localctx = ASPCore2Parser.Annotation_global_wasp_heuristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_annotation_global_wasp_heuristic)
        try:
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.annotation_global_wasp_heuristic_begin()
                self.state = 973
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 974
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE)
                self.state = 975
                self.match(ASPCore2Parser.EQUAL)
                self.state = 976
                self.heuristic_python_file()
                self.state = 977
                self.match(ASPCore2Parser.COMMA)
                self.state = 978
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS)
                self.state = 979
                self.match(ASPCore2Parser.EQUAL)
                self.state = 980
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 981
                self.aggregate_elements_heuristic()
                self.state = 982
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 983
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 984
                self.match(ASPCore2Parser.DOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.annotation_global_wasp_heuristic_begin()
                self.state = 987
                self.match(ASPCore2Parser.PARAM_OPEN)
                self.state = 988
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS)
                self.state = 989
                self.match(ASPCore2Parser.EQUAL)
                self.state = 990
                self.match(ASPCore2Parser.CURLY_OPEN)
                self.state = 991
                self.aggregate_elements_heuristic()
                self.state = 992
                self.match(ASPCore2Parser.CURLY_CLOSE)
                self.state = 993
                self.match(ASPCore2Parser.COMMA)
                self.state = 994
                self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE)
                self.state = 995
                self.match(ASPCore2Parser.EQUAL)
                self.state = 996
                self.heuristic_python_file()
                self.state = 997
                self.match(ASPCore2Parser.PARAM_CLOSE)
                self.state = 998
                self.match(ASPCore2Parser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotation_global_wasp_heuristic_beginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_GLOBAL_WASP_HEURISTIC(self):
            return self.getToken(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_annotation_global_wasp_heuristic_begin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_global_wasp_heuristic_begin" ):
                listener.enterAnnotation_global_wasp_heuristic_begin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_global_wasp_heuristic_begin" ):
                listener.exitAnnotation_global_wasp_heuristic_begin(self)




    def annotation_global_wasp_heuristic_begin(self):

        localctx = ASPCore2Parser.Annotation_global_wasp_heuristic_beginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_annotation_global_wasp_heuristic_begin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(ASPCore2Parser.ANNOTATION_GLOBAL_WASP_HEURISTIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Heuristic_python_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ASPCore2Parser.STRING, 0)

        def getRuleIndex(self):
            return ASPCore2Parser.RULE_heuristic_python_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeuristic_python_file" ):
                listener.enterHeuristic_python_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeuristic_python_file" ):
                listener.exitHeuristic_python_file(self)




    def heuristic_python_file(self):

        localctx = ASPCore2Parser.Heuristic_python_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_heuristic_python_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(ASPCore2Parser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_element_heuristicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_element(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_elementContext,0)


        def classic_literal(self):
            return self.getTypedRuleContext(ASPCore2Parser.Classic_literalContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_aggregate_element_heuristic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_element_heuristic" ):
                listener.enterAggregate_element_heuristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_element_heuristic" ):
                listener.exitAggregate_element_heuristic(self)




    def aggregate_element_heuristic(self):

        localctx = ASPCore2Parser.Aggregate_element_heuristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_aggregate_element_heuristic)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.aggregate_element()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.classic_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_elements_heuristicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_element_heuristic(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_element_heuristicContext,0)


        def SEMICOLON(self):
            return self.getToken(ASPCore2Parser.SEMICOLON, 0)

        def aggregate_elements_heuristic(self):
            return self.getTypedRuleContext(ASPCore2Parser.Aggregate_elements_heuristicContext,0)


        def getRuleIndex(self):
            return ASPCore2Parser.RULE_aggregate_elements_heuristic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_elements_heuristic" ):
                listener.enterAggregate_elements_heuristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_elements_heuristic" ):
                listener.exitAggregate_elements_heuristic(self)




    def aggregate_elements_heuristic(self):

        localctx = ASPCore2Parser.Aggregate_elements_heuristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_aggregate_elements_heuristic)
        try:
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.aggregate_element_heuristic()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.aggregate_element_heuristic()
                self.state = 1012
                self.match(ASPCore2Parser.SEMICOLON)
                self.state = 1013
                self.aggregate_elements_heuristic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





