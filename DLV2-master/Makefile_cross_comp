#### BUILD modalities
# use 
#   $ make BUILD=release 
# to compile different binaries
# use
#   $ make WITH-PYTHON=1 or make WITH-SPARQL=1 or make WITH-SQL=1
# to compile with python,sparql or sql features

WITH-PYTHON=0
WITH-PYTHON_THREE=0
WITH-SPARQL=0
WITH-SQL=0
WITH-HTD=0
FOR-32bit=0
FOR-64bit=1
FOR-WINDOWS=0
FOR-LINUX=1

ifeq ($(FOR-WINDOWS),1)
	FOR-LINUX=0
endif

ifeq ($(FOR-LINUX),1)
	FOR-WINDOWS=0
endif

DEXT=
DHTD=
ifeq ($(WITH-PYTHON_THREE),1)
        DEXT+= -DPYTHON -DENABLE_PYTHON -DPYTHON_THREE 
else ifeq ($(WITH-PYTHON),1)
        DEXT+= -DPYTHON -DENABLE_PYTHON
endif
ifeq ($(WITH-SPARQL),1)
        DEXT+= -DSPARQL
endif
ifeq ($(WITH-SQL),1)
        DEXT+= -DSQL
	ifeq ($(FOR-WINDOWS),1)
        DEXT+= -DMINGW
		FOR-32bit=1
		FOR-64bit=0
	endif
endif
ifeq ($(WITH-HTD),1)
        DHTD+= -DHTD
endif

BUILD = release

cxxflags.debug = \
 -Wall -std=c++11 -g3 $(DEXT) $(DHTD) $(DWINDOWS)
linkflags.debug = \
 -lm -lz

cxxflags.trace = \
 -Wall -std=c++11 -DTRACE_ON $(DEXT) $(DHTD) $(DWINDOWS)
linkflags.trace = \
 -lm -lz

cxxflags.release = \
 -Wall -std=c++11 -DNDEBUG -O3 -DSTATIC $(DEXT) $(DHTD) $(DWINDOWS)
linkflags.release = \
 -lm -lz

cxxflags.gprof = \
 -Wall -std=c++11 -DNDEBUG -O3 -g -pg $(DEXT) $(DHTD) $(DWINDOWS)
linkflags.gprof = \
 -lm -lz -g -pg




SOURCE_DIR = src
BUILD_DIR = build/$(BUILD)
BINARY = $(BUILD_DIR)/dlv2


REDLAND_LIB =
PYTHON_VER = 
PYTHON_LIB = 
PYTHON_INCLUDE = 
PYTHON_DEV_LIB =
SQL_LIB =
HTD_LIB =
ifeq ($(WITH-SPARQL),1)
	REDLAND_LIB := $(shell rasqal-config --cflags) $(shell rasqal-config --libs) -lrdf
endif
ifeq ($(WITH-PYTHON_THREE),1)
#	PYTHON_VER = $(shell python3 -V | grep -oP "\d\\.\d")
#	PYTHON_LIB := -I/usr/lib/python$(PYTHON_VER)
#	PYTHON_INCLUDE := -I/usr/include/python$(PYTHON_VER)
#	PYTHON_DEV_LIB := -lpython$(PYTHON_VER)m
	PYTHON_INCLUDE = $(shell python3-config --cflags | sed "s/-Wshorten-64-to-32//g" | sed "s/-Wstrict-prototypes//g" | sed "s/-arch i386//g" | sed "s/-DNDEBUG//g" | sed "s/-Os//g" )
    PYTHON_LIB = $(shell python3-config --ldflags | sed "s/-Wshorten-64-to-32//g" | sed "s/-Wstrict-prototypes//g")
else ifeq ($(WITH-PYTHON),1)
#	PYTHON_VER = $(shell python3 -V | grep -oP "\d\\.\d")
#	PYTHON_LIB := -I/usr/lib/python$(PYTHON_VER)
#	PYTHON_INCLUDE := -I/usr/include/python$(PYTHON_VER)
#	PYTHON_DEV_LIB := -lpython$(PYTHON_VER)m
	PYTHON_INCLUDE = $(shell python2-config --cflags | sed "s/-Wshorten-64-to-32//g" | sed "s/-Wstrict-prototypes//g" | sed "s/-arch i386//g" | sed "s/-DNDEBUG//g" | sed "s/-Os//g" )
    PYTHON_LIB = $(shell python2-config --ldflags | sed "s/-Wshorten-64-to-32//g" | sed "s/-Wstrict-prototypes//g")
# PER LINUX 32
#	PYTHON_INCLUDE = -I/usr/include/python2.7 -I/usr/include/i386-linux-gnu/python2.7  -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security   -g -fwrapv -O2 -Wall
#   PYTHON_LIB = -L/usr/lib/python2.7/config-i386-linux-gnu -L/usr/lib -lpython2.7 -lpthread -ldl  -lutil -lm  -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions
# PER LINUX 64
#	PYTHON_INCLUDE = -I/usr/include/python2.7 -I/usr/include/x86_64-linux-gnu/python2.7  -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security   -g -fwrapv -O2 -Wall
#   PYTHON_LIB = -L/usr/lib/python2.7/config-x86_64-linux-gnu -L/usr/lib -lpython2.7 -lpthread -ldl  -lutil -lm  -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions
endif
ifeq ($(WITH-SQL),1)
	ifeq ($(FOR-WINDOWS),1)
		SQL_LIB := -lodbc32 -I /usr/i686-w64-mingw32/include -L /usr/i686-w64-mingw32/lib
	endif
	ifeq ($(FOR-LINUX),1)
		SQL_LIB := -lodbc
	endif
endif
ifeq ($(WITH-HTD),1)
	ifeq ($(FOR-WINDOWS),1)
		ifeq ($(FOR-32bit),1)
			HTD_LIB := -lhtd -I /usr/i686-w64-mingw32/usr/local/include -L /usr/i686-w64-mingw32/usr/local/lib
		endif
		ifeq ($(FOR-64bit),1)
			HTD_LIB := -lhtd -I /usr/x86_64-w64-mingw32/usr/local/include -L /usr/x86_64-w64-mingw32/usr/local/lib
		endif
	endif
	ifeq ($(FOR-LINUX),1)
		HTD_LIB := -lhtd
	endif
endif
#cmake -DCMAKE_TOOLCHAIN_FILE=Toolchain-Ubuntu-mingw32.cmake -Dgtest_disable_pthreads=ON  htd-1.2/

GCC = g++
ifeq ($(FOR-LINUX),1)
	ifeq ($(FOR-64bit),1)
		GCC = g++
	endif
	ifeq ($(FOR-32bit),1)
		GCC = g++ -m32
	endif
endif
ifeq ($(FOR-WINDOWS),1)
	ifeq ($(FOR-32bit),1)
		GCC = i686-w64-mingw32-g++
	endif
	ifeq ($(FOR-64bit),1)
		GCC = x86_64-w64-mingw32-g++
	endif
endif
CXX = $(GCC) 
CXXFLAGS = $(cxxflags.$(BUILD))
LINK = $(GCC)
LINKFLAGS = $(linkflags.$(BUILD))
LIBS_STATIC := $(HTD_LIB) -lz
LIBS_SHARED := $(PYTHON_LIB) $(PYTHON_INCLUDE) $(SQL_LIB) $(REDLAND_LIB) 
LIBS := $(LIBS_STATIC) $(LIBS_SHARED) 
#LIBS = -lodbc -lncurses -ltinfo


SRCS = $(shell find $(SOURCE_DIR) -name '*.cpp')

OBJS = $(patsubst $(SOURCE_DIR)%.cpp,$(BUILD_DIR)%.o, $(SRCS))
DEPS = $(patsubst $(SOURCE_DIR)%.cpp,$(BUILD_DIR)%.d, $(SRCS))

all: $(BINARY)

$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(LIBS) $(CXXFLAGS) -c $< -o $@

$(BUILD_DIR)/%.d: $(SOURCE_DIR)/%.cpp
	mkdir -p $(dir $@)
	$(CXX) $(LIBS) $(CXXFLAGS) -MM -MT '$(@:.d=.o)' $< -MF $@

$(BINARY): $(OBJS) $(DEPS)
	$(LINK) $(LINKFLAGS) $(OBJS) $(LIBS) -o $(BINARY) 
	
#$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.cpp
#	$(CXX) -static $(LIBS_STATIC) -shared $(LIBS_SHARED) $(CXXFLAGS) -c $< -o $@

#$(BUILD_DIR)/%.d: $(SOURCE_DIR)/%.cpp
#	mkdir -p $(dir $@)
#	$(CXX) -static $(LIBS_STATIC) -shared $(LIBS_SHARED) $(CXXFLAGS) -MM -MT '$(@:.d=.o)' $< -MF $@

#$(BINARY): $(OBJS) $(DEPS)
#	$(LINK) $(LINKFLAGS) $(OBJS) -static $(LIBS_STATIC) -shared $(LIBS_SHARED) -o $(BINARY) 
	

static: $(OBJS) $(DEPS)
	$(LINK) $(LINKFLAGS) $(OBJS) -static $(LIBS) -o $(BINARY) 

run: $(BINARY)
	./$(BINARY)

parser: $(SOURCE_DIR)/input/aspcore2.l $(SOURCE_DIR)/input/aspcore2.y
	flex -o$(SOURCE_DIR)/input/aspcore2_lexer.hpp $(SOURCE_DIR)/input/aspcore2.l
	bison -y -d -o$(SOURCE_DIR)/input/aspcore2_parser.c $(SOURCE_DIR)/input/aspcore2.y
	bison -y -o$(SOURCE_DIR)/input/aspcore2_parser.hpp $(SOURCE_DIR)/input/aspcore2.y
	rm -f $(SOURCE_DIR)/input/aspcore2_parser.c

opt-parser: $(SOURCE_DIR)/input/aspcore2.l $(SOURCE_DIR)/input/aspcore2.y
	flex -o$(SOURCE_DIR)/input/aspcore2_lexer.hpp $(SOURCE_DIR)/input/aspcore2.l
	bison -y -d -o$(SOURCE_DIR)/input/aspcore2_parser.c $(SOURCE_DIR)/input/aspcore2.y
	bison -y -o$(SOURCE_DIR)/input/aspcore2_parser.hpp $(SOURCE_DIR)/input/aspcore2.y
	rm -f $(SOURCE_DIR)/input/aspcore2_parser.c

########## Clean

clean-dep:
	rm -f $(DEPS)
clean: clean-dep
	rm -f $(OBJS)

distclean: clean
	rm -fr $(BUILD_DIR)

-include $(DEPS)
