
// Generated from ASPCore2.g4 by ANTLR 4.10.1


#include "ASPCore2Listener.h"

#include "ASPCore2Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ASPCore2ParserStaticData final {
  ASPCore2ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ASPCore2ParserStaticData(const ASPCore2ParserStaticData&) = delete;
  ASPCore2ParserStaticData(ASPCore2ParserStaticData&&) = delete;
  ASPCore2ParserStaticData& operator=(const ASPCore2ParserStaticData&) = delete;
  ASPCore2ParserStaticData& operator=(ASPCore2ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag aspcore2ParserOnceFlag;
ASPCore2ParserStaticData *aspcore2ParserStaticData = nullptr;

void aspcore2ParserInitialize() {
  assert(aspcore2ParserStaticData == nullptr);
  auto staticData = std::make_unique<ASPCore2ParserStaticData>(
    std::vector<std::string>{
      "program", "rule", "simple_rule", "head", "body", "weight_at_levels", 
      "levels_and_terms", "disjunction", "conjunction", "choice_atom", "lower_guard", 
      "upper_guard", "choice_elements", "choice_element", "choice_element_atom", 
      "choice_elements_literals", "naf_literals", "naf_literal", "naf_literal_aggregate", 
      "existential_atom", "classic_literal", "atom", "extAtom", "extSemicol", 
      "terms", "basic_terms", "builtin_atom", "compareop", "binop", "arithop1", 
      "arithop2", "term_", "term__", "term", "expr", "factor", "basic_term", 
      "ground_term", "variable_term", "functional_term", "vars", "identifier", 
      "directive", "query", "lower_guard_compare_aggregate", "upper_guard_compare_aggregate", 
      "compare_aggregate", "lower_guard_leftward_left_aggregate", "leftward_left_aggregate", 
      "left_aggregate", "lower_guard_rightward_left_aggregate", "rightward_left_aggregate", 
      "upper_guard_leftward_right_aggregate", "upper_guard_rightward_right_aggregate", 
      "right_aggregate", "aggregate_atom", "leftwardop", "rightwardop", 
      "aggregate", "aggregate_elements", "aggregate_element", "aggregate_function", 
      "annotation_global", "annotations_rule", "annotation_rule", "annotation_rule_to_decompose", 
      "annotation_rule_to_not_decompose", "annotation_rule_ordering", "annotation_global_ordering", 
      "annotation_global_extatom_conversion", "annotation_extpredicate", 
      "extatom_conv_types", "extatom_conv_type", "rule_ordering_type", "global_ordering_type", 
      "annotation_rule_atom_indexed", "annotation_global_atom_indexed", 
      "rule_indexing_arguments", "rule_naf_literal_annotation", "global_indexing_arguments", 
      "global_naf_literal_annotation", "rule_atom_annotation_before", "global_atom_annotation_before", 
      "rule_atom_annotation_after", "global_atom_annotation_after", "rule_atoms_annotation_before", 
      "global_atoms_annotation_before", "rule_atoms_annotation_after", "global_atoms_annotation_after", 
      "annotation_rule_partial_order_begin", "annotation_global_partial_order_begin", 
      "annotation_rule_partial_order", "annotation_global_partial_order", 
      "annotation_rule_projection", "annotation_rule_projection_value", 
      "annotation_rule_rewriting_arith", "annotation_rule_align_substitutions", 
      "annotation_rule_look_ahead", "annotation_global_wasp_propagator", 
      "annotation_global_wasp_propagator_begin", "annotation_global_wasp_heuristic", 
      "annotation_global_wasp_heuristic_begin", "heuristic_python_file", 
      "aggregate_element_heuristic", "aggregate_elements_heuristic"
    },
    std::vector<std::string>{
      "", "'not'", "", "", "", "", "", "'.'", "'..'", "','", "'|'", "';'", 
      "':'", "'@'", "':-'", "':~'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
      "'('", "')'", "'['", "']'", "'{'", "'}'", "'\\u003F'", "'_'", "", 
      "", "'<'", "'>'", "'<='", "'>='", "'&'", "'\\E'", "'#count'", "'#max'", 
      "'#min'", "'#sum'", "'#propagator'", "'#([A-Za-z_]*)'", "'.*'", "'%@rule_align_substitutions'", 
      "'%@rule_look_ahead'", "'%@rule_projection'", "'%@rule_rewriting_arith'", 
      "'%@rule_ordering'", "'@value'", "'%@rule_atom_indexed'", "'@atom'", 
      "'@arguments'", "'%@rule_partial_order'", "'@before'", "'@after'", 
      "'@predicate'", "'@type'", "'@Q_CONST'", "'@CONST'", "'@U_INT'", "'@UR_INT'", 
      "'@UT_INT'", "'@R_INT'", "'@T_INT'", "'%@global_ordering'", "'%@global_atom_indexed'", 
      "'%@global_partial_order'", "'%@global_external_predicate_conversion'", 
      "'%@rule_to_decompose'", "'%@rule_to_not_decompose'", "'%@global_heuristic'", 
      "'@file'", "'@elements'"
    },
    std::vector<std::string>{
      "", "NAF", "SYMBOLIC_CONSTANT", "VARIABLE", "STRING", "NUMBER", "WS", 
      "DOT", "DDOT", "COMMA", "HEAD_SEPARATOR", "SEMICOLON", "COLON", "AT", 
      "CONS", "WCONS", "PLUS", "DASH", "TIMES", "SLASH", "BACK_SLASH", "PARAM_OPEN", 
      "PARAM_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSED", "CURLY_OPEN", "CURLY_CLOSE", 
      "QUERY_MARK", "ANON_VAR", "EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
      "GREATER_OR_EQ", "AMPERSAND", "EXISTS", "AGGR_COUNT", "AGGR_MAX", 
      "AGGR_MIN", "AGGR_SUM", "ANNOTATION_GLOBAL_WASP_PROPAGATOR", "DIRECTIVE_NAME", 
      "DIRECTIVE_VALUE", "ANNOTATION_RULE_ALIGN_SUBSTITUTIONS", "ANNOTATION_RULE_LOOK_AHEAD", 
      "ANNOTATION_RULE_PROJECTION", "ANNOTATION_RULE_REWRITING_ARITH", "ANNOTATION_RULE_ORDERING", 
      "ANNOTATION_ORDERING_VALUE", "ANNOTATION_RULE_ATOM_INDEXED", "ANNOTATION_ATOM_INDEXED_ATOM", 
      "ANNOTATION_ATOM_INDEXED_ARGUMENTS", "ANNOTATION_RULE_PARTIAL_ORDER", 
      "ANNOTATION_PARTIAL_ORDER_BEFORE", "ANNOTATION_PARTIAL_ORDER_AFTER", 
      "ANNOTATION_EXTATOM_PREDICATE", "ANNOTATION_EXTATOM_TYPE", "ANNOTATION_EXTATOM_TYPE_QCONST", 
      "ANNOTATION_EXTATOM_TYPE_CONST", "ANNOTATION_EXTATOM_TYPE_U_INT", 
      "ANNOTATION_EXTATOM_TYPE_UR_INT", "ANNOTATION_EXTATOM_TYPE_UT_INT", 
      "ANNOTATION_EXTATOM_TYPE_R_INT", "ANNOTATION_EXTATOM_TYPE_T_INT", 
      "ANNOTATION_GLOBAL_ORDERING", "ANNOTATION_GLOBAL_ATOM_INDEXED", "ANNOTATION_GLOBAL_PARTIAL_ORDER", 
      "ANNOTATION_GLOBAL_EXTATOM_CONVERSION", "ANNOTATION_RULE_TO_DECOMPOSE", 
      "ANNOTATION_RULE_TO_NOT_DECOMPOSE", "ANNOTATION_GLOBAL_WASP_HEURISTIC", 
      "ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE", "ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS", 
      "EMPTY_COMMENT", "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,75,1018,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
  	84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
  	91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
  	98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,
  	104,1,0,5,0,212,8,0,10,0,12,0,215,9,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,223,
  	8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,3,2,247,8,2,1,3,1,3,3,3,251,8,3,1,4,1,4,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,264,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,6,3,6,275,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,287,8,7,
  	1,8,1,8,1,8,1,8,1,8,3,8,294,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
  	9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,316,8,9,1,10,1,10,1,10,
  	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,329,8,12,1,13,1,13,1,13,
  	1,13,1,13,3,13,336,8,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,3,15,345,8,
  	15,1,16,1,16,1,16,1,16,1,16,3,16,352,8,16,1,17,1,17,1,17,1,17,1,17,1,
  	17,1,17,3,17,361,8,17,1,18,1,18,1,18,1,18,3,18,367,8,18,1,19,1,19,1,19,
  	1,19,1,20,1,20,1,20,3,20,376,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,3,21,388,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,22,3,22,417,8,22,1,23,1,23,1,24,1,24,1,24,1,24,
  	1,24,3,24,426,8,24,1,25,1,25,1,25,1,25,1,25,3,25,433,8,25,1,26,1,26,1,
  	26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,3,28,445,8,28,1,29,1,29,1,30,1,
  	30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,462,8,
  	31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,470,8,32,1,33,1,33,1,33,3,33,475,
  	8,33,1,34,1,34,1,34,1,34,1,34,3,34,482,8,34,1,35,1,35,1,35,1,35,1,35,
  	3,35,489,8,35,1,36,1,36,1,36,3,36,494,8,36,1,37,1,37,1,37,1,37,1,37,3,
  	37,501,8,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,
  	40,514,8,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,
  	45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,536,8,46,1,47,1,47,1,
  	47,1,48,1,48,1,48,1,49,1,49,3,49,546,8,49,1,50,1,50,1,50,1,51,1,51,1,
  	51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,566,
  	8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,577,8,55,1,56,
  	1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,592,
  	8,58,1,59,1,59,1,59,1,59,1,59,3,59,599,8,59,1,60,1,60,1,60,1,60,1,61,
  	1,61,1,62,1,62,1,62,1,62,1,62,1,62,3,62,613,8,62,1,63,1,63,1,63,1,63,
  	3,63,619,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,630,8,
  	64,1,65,1,65,1,65,1,65,1,65,1,65,3,65,638,8,65,1,66,1,66,1,66,1,66,1,
  	66,1,66,3,66,646,8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
  	67,1,67,1,67,1,67,1,67,3,67,662,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,
  	68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,678,8,68,1,69,1,69,1,69,1,
  	69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,
  	71,1,71,1,71,3,71,700,8,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,
  	75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,
  	76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,
  	77,1,77,3,77,740,8,77,1,78,1,78,1,78,3,78,745,8,78,1,79,1,79,1,79,1,79,
  	3,79,751,8,79,1,80,1,80,1,80,3,80,756,8,80,1,81,1,81,1,81,1,81,1,81,1,
  	81,1,81,1,81,1,81,1,81,3,81,768,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,
  	82,1,82,1,82,1,82,3,82,780,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
  	83,1,83,1,83,3,83,792,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
  	84,1,84,3,84,804,8,84,1,85,1,85,1,85,1,85,1,85,3,85,811,8,85,1,86,1,86,
  	1,86,1,86,1,86,3,86,818,8,86,1,87,1,87,1,87,1,87,1,87,3,87,825,8,87,1,
  	88,1,88,1,88,1,88,1,88,1,88,3,88,833,8,88,1,89,1,89,1,90,1,90,1,91,1,
  	91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,
  	91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,
  	91,1,91,1,91,3,91,871,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
  	92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
  	92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,905,8,92,1,93,1,
  	93,1,93,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,
  	95,3,95,923,8,95,1,96,1,96,1,96,1,96,1,96,1,96,3,96,931,8,96,1,97,1,97,
  	1,97,1,97,1,97,1,97,3,97,939,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
  	1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
  	1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,969,8,98,1,99,1,99,1,100,1,100,
  	1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,1,100,3,100,1001,8,100,1,101,1,101,1,102,1,102,1,103,1,103,3,103,
  	1009,8,103,1,104,1,104,1,104,1,104,1,104,3,104,1016,8,104,1,104,0,0,105,
  	0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
  	50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
  	96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
  	132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
  	168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
  	204,206,208,0,9,1,0,29,30,1,0,16,17,1,0,18,20,2,0,3,3,28,28,1,0,2,4,2,
  	0,31,31,33,33,2,0,32,32,34,34,1,0,37,40,1,0,58,64,1037,0,213,1,0,0,0,
  	2,222,1,0,0,0,4,246,1,0,0,0,6,250,1,0,0,0,8,252,1,0,0,0,10,263,1,0,0,
  	0,12,274,1,0,0,0,14,286,1,0,0,0,16,293,1,0,0,0,18,315,1,0,0,0,20,317,
  	1,0,0,0,22,320,1,0,0,0,24,328,1,0,0,0,26,335,1,0,0,0,28,337,1,0,0,0,30,
  	344,1,0,0,0,32,351,1,0,0,0,34,360,1,0,0,0,36,366,1,0,0,0,38,368,1,0,0,
  	0,40,375,1,0,0,0,42,387,1,0,0,0,44,416,1,0,0,0,46,418,1,0,0,0,48,425,
  	1,0,0,0,50,432,1,0,0,0,52,434,1,0,0,0,54,438,1,0,0,0,56,444,1,0,0,0,58,
  	446,1,0,0,0,60,448,1,0,0,0,62,461,1,0,0,0,64,469,1,0,0,0,66,474,1,0,0,
  	0,68,481,1,0,0,0,70,488,1,0,0,0,72,493,1,0,0,0,74,500,1,0,0,0,76,502,
  	1,0,0,0,78,504,1,0,0,0,80,513,1,0,0,0,82,515,1,0,0,0,84,517,1,0,0,0,86,
  	520,1,0,0,0,88,523,1,0,0,0,90,526,1,0,0,0,92,535,1,0,0,0,94,537,1,0,0,
  	0,96,540,1,0,0,0,98,545,1,0,0,0,100,547,1,0,0,0,102,550,1,0,0,0,104,553,
  	1,0,0,0,106,556,1,0,0,0,108,565,1,0,0,0,110,576,1,0,0,0,112,578,1,0,0,
  	0,114,580,1,0,0,0,116,591,1,0,0,0,118,598,1,0,0,0,120,600,1,0,0,0,122,
  	604,1,0,0,0,124,612,1,0,0,0,126,618,1,0,0,0,128,629,1,0,0,0,130,637,1,
  	0,0,0,132,645,1,0,0,0,134,661,1,0,0,0,136,677,1,0,0,0,138,679,1,0,0,0,
  	140,691,1,0,0,0,142,699,1,0,0,0,144,701,1,0,0,0,146,703,1,0,0,0,148,705,
  	1,0,0,0,150,707,1,0,0,0,152,721,1,0,0,0,154,739,1,0,0,0,156,744,1,0,0,
  	0,158,750,1,0,0,0,160,755,1,0,0,0,162,767,1,0,0,0,164,779,1,0,0,0,166,
  	791,1,0,0,0,168,803,1,0,0,0,170,810,1,0,0,0,172,817,1,0,0,0,174,824,1,
  	0,0,0,176,832,1,0,0,0,178,834,1,0,0,0,180,836,1,0,0,0,182,870,1,0,0,0,
  	184,904,1,0,0,0,186,906,1,0,0,0,188,914,1,0,0,0,190,922,1,0,0,0,192,930,
  	1,0,0,0,194,938,1,0,0,0,196,968,1,0,0,0,198,970,1,0,0,0,200,1000,1,0,
  	0,0,202,1002,1,0,0,0,204,1004,1,0,0,0,206,1008,1,0,0,0,208,1015,1,0,0,
  	0,210,212,3,2,1,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,
  	214,1,0,0,0,214,1,1,0,0,0,215,213,1,0,0,0,216,223,3,4,2,0,217,218,3,126,
  	63,0,218,219,3,4,2,0,219,223,1,0,0,0,220,223,3,124,62,0,221,223,3,84,
  	42,0,222,216,1,0,0,0,222,217,1,0,0,0,222,220,1,0,0,0,222,221,1,0,0,0,
  	223,3,1,0,0,0,224,225,3,6,3,0,225,226,5,7,0,0,226,247,1,0,0,0,227,228,
  	3,6,3,0,228,229,5,14,0,0,229,230,5,7,0,0,230,247,1,0,0,0,231,232,3,6,
  	3,0,232,233,5,14,0,0,233,234,3,8,4,0,234,235,5,7,0,0,235,247,1,0,0,0,
  	236,237,5,14,0,0,237,238,3,8,4,0,238,239,5,7,0,0,239,247,1,0,0,0,240,
  	241,5,15,0,0,241,242,3,8,4,0,242,243,5,7,0,0,243,244,3,10,5,0,244,247,
  	1,0,0,0,245,247,3,86,43,0,246,224,1,0,0,0,246,227,1,0,0,0,246,231,1,0,
  	0,0,246,236,1,0,0,0,246,240,1,0,0,0,246,245,1,0,0,0,247,5,1,0,0,0,248,
  	251,3,14,7,0,249,251,3,18,9,0,250,248,1,0,0,0,250,249,1,0,0,0,251,7,1,
  	0,0,0,252,253,3,16,8,0,253,9,1,0,0,0,254,255,5,23,0,0,255,256,3,66,33,
  	0,256,257,5,24,0,0,257,264,1,0,0,0,258,259,5,23,0,0,259,260,3,66,33,0,
  	260,261,3,12,6,0,261,262,5,24,0,0,262,264,1,0,0,0,263,254,1,0,0,0,263,
  	258,1,0,0,0,264,11,1,0,0,0,265,266,5,13,0,0,266,275,3,66,33,0,267,268,
  	5,13,0,0,268,269,3,66,33,0,269,270,5,9,0,0,270,271,3,48,24,0,271,275,
  	1,0,0,0,272,273,5,9,0,0,273,275,3,48,24,0,274,265,1,0,0,0,274,267,1,0,
  	0,0,274,272,1,0,0,0,275,13,1,0,0,0,276,287,3,40,20,0,277,278,3,40,20,
  	0,278,279,5,10,0,0,279,280,3,14,7,0,280,287,1,0,0,0,281,287,3,38,19,0,
  	282,283,3,38,19,0,283,284,5,10,0,0,284,285,3,14,7,0,285,287,1,0,0,0,286,
  	276,1,0,0,0,286,277,1,0,0,0,286,281,1,0,0,0,286,282,1,0,0,0,287,15,1,
  	0,0,0,288,294,3,36,18,0,289,290,3,36,18,0,290,291,5,9,0,0,291,292,3,16,
  	8,0,292,294,1,0,0,0,293,288,1,0,0,0,293,289,1,0,0,0,294,17,1,0,0,0,295,
  	296,3,20,10,0,296,297,5,25,0,0,297,298,3,24,12,0,298,299,5,26,0,0,299,
  	300,3,22,11,0,300,316,1,0,0,0,301,302,3,20,10,0,302,303,5,25,0,0,303,
  	304,3,24,12,0,304,305,5,26,0,0,305,316,1,0,0,0,306,307,5,25,0,0,307,308,
  	3,24,12,0,308,309,5,26,0,0,309,316,1,0,0,0,310,311,5,25,0,0,311,312,3,
  	24,12,0,312,313,5,26,0,0,313,314,3,22,11,0,314,316,1,0,0,0,315,295,1,
  	0,0,0,315,301,1,0,0,0,315,306,1,0,0,0,315,310,1,0,0,0,316,19,1,0,0,0,
  	317,318,3,66,33,0,318,319,3,56,28,0,319,21,1,0,0,0,320,321,3,56,28,0,
  	321,322,3,66,33,0,322,23,1,0,0,0,323,324,3,26,13,0,324,325,5,11,0,0,325,
  	326,3,24,12,0,326,329,1,0,0,0,327,329,3,26,13,0,328,323,1,0,0,0,328,327,
  	1,0,0,0,329,25,1,0,0,0,330,336,3,28,14,0,331,332,3,28,14,0,332,333,5,
  	12,0,0,333,334,3,30,15,0,334,336,1,0,0,0,335,330,1,0,0,0,335,331,1,0,
  	0,0,336,27,1,0,0,0,337,338,3,42,21,0,338,29,1,0,0,0,339,345,3,34,17,0,
  	340,341,3,32,16,0,341,342,5,9,0,0,342,343,3,34,17,0,343,345,1,0,0,0,344,
  	339,1,0,0,0,344,340,1,0,0,0,345,31,1,0,0,0,346,352,3,34,17,0,347,348,
  	3,34,17,0,348,349,5,9,0,0,349,350,3,32,16,0,350,352,1,0,0,0,351,346,1,
  	0,0,0,351,347,1,0,0,0,352,33,1,0,0,0,353,361,3,40,20,0,354,355,5,1,0,
  	0,355,361,3,40,20,0,356,361,3,52,26,0,357,361,3,44,22,0,358,359,5,1,0,
  	0,359,361,3,44,22,0,360,353,1,0,0,0,360,354,1,0,0,0,360,356,1,0,0,0,360,
  	357,1,0,0,0,360,358,1,0,0,0,361,35,1,0,0,0,362,367,3,34,17,0,363,367,
  	3,110,55,0,364,365,5,1,0,0,365,367,3,110,55,0,366,362,1,0,0,0,366,363,
  	1,0,0,0,366,364,1,0,0,0,367,37,1,0,0,0,368,369,5,36,0,0,369,370,3,80,
  	40,0,370,371,3,42,21,0,371,39,1,0,0,0,372,376,3,42,21,0,373,374,5,17,
  	0,0,374,376,3,42,21,0,375,372,1,0,0,0,375,373,1,0,0,0,376,41,1,0,0,0,
  	377,388,3,82,41,0,378,379,3,82,41,0,379,380,5,21,0,0,380,381,3,48,24,
  	0,381,382,5,22,0,0,382,388,1,0,0,0,383,384,3,82,41,0,384,385,5,21,0,0,
  	385,386,5,22,0,0,386,388,1,0,0,0,387,377,1,0,0,0,387,378,1,0,0,0,387,
  	383,1,0,0,0,388,43,1,0,0,0,389,390,5,35,0,0,390,391,3,82,41,0,391,392,
  	5,21,0,0,392,393,3,48,24,0,393,394,3,46,23,0,394,395,3,48,24,0,395,396,
  	5,22,0,0,396,417,1,0,0,0,397,398,5,35,0,0,398,399,3,82,41,0,399,400,5,
  	21,0,0,400,401,3,46,23,0,401,402,3,48,24,0,402,403,5,22,0,0,403,417,1,
  	0,0,0,404,405,5,35,0,0,405,406,3,82,41,0,406,407,5,21,0,0,407,408,3,48,
  	24,0,408,409,3,46,23,0,409,410,5,22,0,0,410,417,1,0,0,0,411,412,5,35,
  	0,0,412,413,3,82,41,0,413,414,5,21,0,0,414,415,5,22,0,0,415,417,1,0,0,
  	0,416,389,1,0,0,0,416,397,1,0,0,0,416,404,1,0,0,0,416,411,1,0,0,0,417,
  	45,1,0,0,0,418,419,5,11,0,0,419,47,1,0,0,0,420,426,3,66,33,0,421,422,
  	3,66,33,0,422,423,5,9,0,0,423,424,3,48,24,0,424,426,1,0,0,0,425,420,1,
  	0,0,0,425,421,1,0,0,0,426,49,1,0,0,0,427,433,3,72,36,0,428,429,3,72,36,
  	0,429,430,5,9,0,0,430,431,3,50,25,0,431,433,1,0,0,0,432,427,1,0,0,0,432,
  	428,1,0,0,0,433,51,1,0,0,0,434,435,3,66,33,0,435,436,3,56,28,0,436,437,
  	3,66,33,0,437,53,1,0,0,0,438,439,7,0,0,0,439,55,1,0,0,0,440,445,3,54,
  	27,0,441,445,3,54,27,0,442,445,3,112,56,0,443,445,3,114,57,0,444,440,
  	1,0,0,0,444,441,1,0,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,57,1,0,0,
  	0,446,447,7,1,0,0,447,59,1,0,0,0,448,449,7,2,0,0,449,61,1,0,0,0,450,462,
  	5,28,0,0,451,452,3,82,41,0,452,453,5,21,0,0,453,454,3,48,24,0,454,455,
  	5,22,0,0,455,462,1,0,0,0,456,457,5,5,0,0,457,458,5,8,0,0,458,462,5,5,
  	0,0,459,460,5,17,0,0,460,462,3,66,33,0,461,450,1,0,0,0,461,451,1,0,0,
  	0,461,456,1,0,0,0,461,459,1,0,0,0,462,63,1,0,0,0,463,470,3,82,41,0,464,
  	470,5,5,0,0,465,466,5,21,0,0,466,467,3,66,33,0,467,468,5,22,0,0,468,470,
  	1,0,0,0,469,463,1,0,0,0,469,464,1,0,0,0,469,465,1,0,0,0,470,65,1,0,0,
  	0,471,475,3,62,31,0,472,475,3,82,41,0,473,475,3,68,34,0,474,471,1,0,0,
  	0,474,472,1,0,0,0,474,473,1,0,0,0,475,67,1,0,0,0,476,482,3,70,35,0,477,
  	478,3,70,35,0,478,479,3,58,29,0,479,480,3,68,34,0,480,482,1,0,0,0,481,
  	476,1,0,0,0,481,477,1,0,0,0,482,69,1,0,0,0,483,489,3,64,32,0,484,485,
  	3,64,32,0,485,486,3,60,30,0,486,487,3,70,35,0,487,489,1,0,0,0,488,483,
  	1,0,0,0,488,484,1,0,0,0,489,71,1,0,0,0,490,494,3,74,37,0,491,494,3,76,
  	38,0,492,494,3,78,39,0,493,490,1,0,0,0,493,491,1,0,0,0,493,492,1,0,0,
  	0,494,73,1,0,0,0,495,501,5,2,0,0,496,501,5,4,0,0,497,501,5,5,0,0,498,
  	499,5,17,0,0,499,501,5,5,0,0,500,495,1,0,0,0,500,496,1,0,0,0,500,497,
  	1,0,0,0,500,498,1,0,0,0,501,75,1,0,0,0,502,503,7,3,0,0,503,77,1,0,0,0,
  	504,505,3,82,41,0,505,506,5,21,0,0,506,507,3,48,24,0,507,508,5,22,0,0,
  	508,79,1,0,0,0,509,514,5,3,0,0,510,511,5,3,0,0,511,512,5,9,0,0,512,514,
  	3,80,40,0,513,509,1,0,0,0,513,510,1,0,0,0,514,81,1,0,0,0,515,516,7,4,
  	0,0,516,83,1,0,0,0,517,518,5,42,0,0,518,519,5,43,0,0,519,85,1,0,0,0,520,
  	521,3,42,21,0,521,522,5,27,0,0,522,87,1,0,0,0,523,524,3,66,33,0,524,525,
  	3,54,27,0,525,89,1,0,0,0,526,527,3,54,27,0,527,528,3,66,33,0,528,91,1,
  	0,0,0,529,530,3,88,44,0,530,531,3,116,58,0,531,536,1,0,0,0,532,533,3,
  	116,58,0,533,534,3,90,45,0,534,536,1,0,0,0,535,529,1,0,0,0,535,532,1,
  	0,0,0,536,93,1,0,0,0,537,538,3,66,33,0,538,539,3,112,56,0,539,95,1,0,
  	0,0,540,541,3,94,47,0,541,542,3,116,58,0,542,97,1,0,0,0,543,546,3,96,
  	48,0,544,546,3,102,51,0,545,543,1,0,0,0,545,544,1,0,0,0,546,99,1,0,0,
  	0,547,548,3,66,33,0,548,549,3,114,57,0,549,101,1,0,0,0,550,551,3,100,
  	50,0,551,552,3,116,58,0,552,103,1,0,0,0,553,554,3,112,56,0,554,555,3,
  	66,33,0,555,105,1,0,0,0,556,557,3,114,57,0,557,558,3,66,33,0,558,107,
  	1,0,0,0,559,560,3,116,58,0,560,561,3,104,52,0,561,566,1,0,0,0,562,563,
  	3,116,58,0,563,564,3,106,53,0,564,566,1,0,0,0,565,559,1,0,0,0,565,562,
  	1,0,0,0,566,109,1,0,0,0,567,577,3,98,49,0,568,577,3,108,54,0,569,577,
  	3,92,46,0,570,571,3,96,48,0,571,572,3,104,52,0,572,577,1,0,0,0,573,574,
  	3,102,51,0,574,575,3,106,53,0,575,577,1,0,0,0,576,567,1,0,0,0,576,568,
  	1,0,0,0,576,569,1,0,0,0,576,570,1,0,0,0,576,573,1,0,0,0,577,111,1,0,0,
  	0,578,579,7,5,0,0,579,113,1,0,0,0,580,581,7,6,0,0,581,115,1,0,0,0,582,
  	583,3,122,61,0,583,584,5,25,0,0,584,585,3,118,59,0,585,586,5,26,0,0,586,
  	592,1,0,0,0,587,588,3,122,61,0,588,589,5,25,0,0,589,590,5,26,0,0,590,
  	592,1,0,0,0,591,582,1,0,0,0,591,587,1,0,0,0,592,117,1,0,0,0,593,594,3,
  	120,60,0,594,595,5,11,0,0,595,596,3,118,59,0,596,599,1,0,0,0,597,599,
  	3,120,60,0,598,593,1,0,0,0,598,597,1,0,0,0,599,119,1,0,0,0,600,601,3,
  	50,25,0,601,602,5,12,0,0,602,603,3,32,16,0,603,121,1,0,0,0,604,605,7,
  	7,0,0,605,123,1,0,0,0,606,613,3,136,68,0,607,613,3,152,76,0,608,613,3,
  	184,92,0,609,613,3,138,69,0,610,613,3,200,100,0,611,613,3,196,98,0,612,
  	606,1,0,0,0,612,607,1,0,0,0,612,608,1,0,0,0,612,609,1,0,0,0,612,610,1,
  	0,0,0,612,611,1,0,0,0,613,125,1,0,0,0,614,619,3,128,64,0,615,616,3,128,
  	64,0,616,617,3,126,63,0,617,619,1,0,0,0,618,614,1,0,0,0,618,615,1,0,0,
  	0,619,127,1,0,0,0,620,630,3,134,67,0,621,630,3,150,75,0,622,630,3,182,
  	91,0,623,630,3,186,93,0,624,630,3,190,95,0,625,630,3,192,96,0,626,630,
  	3,194,97,0,627,630,3,130,65,0,628,630,3,132,66,0,629,620,1,0,0,0,629,
  	621,1,0,0,0,629,622,1,0,0,0,629,623,1,0,0,0,629,624,1,0,0,0,629,625,1,
  	0,0,0,629,626,1,0,0,0,629,627,1,0,0,0,629,628,1,0,0,0,630,129,1,0,0,0,
  	631,632,5,69,0,0,632,633,5,21,0,0,633,634,5,22,0,0,634,638,5,7,0,0,635,
  	636,5,69,0,0,636,638,5,7,0,0,637,631,1,0,0,0,637,635,1,0,0,0,638,131,
  	1,0,0,0,639,640,5,70,0,0,640,641,5,21,0,0,641,642,5,22,0,0,642,646,5,
  	7,0,0,643,644,5,70,0,0,644,646,5,7,0,0,645,639,1,0,0,0,645,643,1,0,0,
  	0,646,133,1,0,0,0,647,648,5,48,0,0,648,649,5,21,0,0,649,650,5,49,0,0,
  	650,651,5,29,0,0,651,652,3,146,73,0,652,653,5,22,0,0,653,654,5,7,0,0,
  	654,662,1,0,0,0,655,656,5,48,0,0,656,657,5,21,0,0,657,658,3,146,73,0,
  	658,659,5,22,0,0,659,660,5,7,0,0,660,662,1,0,0,0,661,647,1,0,0,0,661,
  	655,1,0,0,0,662,135,1,0,0,0,663,664,5,65,0,0,664,665,5,21,0,0,665,666,
  	5,49,0,0,666,667,5,29,0,0,667,668,3,148,74,0,668,669,5,22,0,0,669,670,
  	5,7,0,0,670,678,1,0,0,0,671,672,5,65,0,0,672,673,5,21,0,0,673,674,3,148,
  	74,0,674,675,5,22,0,0,675,676,5,7,0,0,676,678,1,0,0,0,677,663,1,0,0,0,
  	677,671,1,0,0,0,678,137,1,0,0,0,679,680,5,68,0,0,680,681,5,21,0,0,681,
  	682,5,56,0,0,682,683,5,29,0,0,683,684,3,140,70,0,684,685,5,9,0,0,685,
  	686,5,57,0,0,686,687,5,29,0,0,687,688,3,142,71,0,688,689,5,22,0,0,689,
  	690,5,7,0,0,690,139,1,0,0,0,691,692,5,35,0,0,692,693,3,82,41,0,693,141,
  	1,0,0,0,694,700,3,144,72,0,695,696,3,144,72,0,696,697,5,9,0,0,697,698,
  	3,142,71,0,698,700,1,0,0,0,699,694,1,0,0,0,699,695,1,0,0,0,700,143,1,
  	0,0,0,701,702,7,8,0,0,702,145,1,0,0,0,703,704,5,5,0,0,704,147,1,0,0,0,
  	705,706,5,5,0,0,706,149,1,0,0,0,707,708,5,50,0,0,708,709,5,21,0,0,709,
  	710,5,51,0,0,710,711,5,29,0,0,711,712,3,156,78,0,712,713,5,9,0,0,713,
  	714,5,52,0,0,714,715,5,29,0,0,715,716,5,25,0,0,716,717,3,154,77,0,717,
  	718,5,26,0,0,718,719,5,22,0,0,719,720,5,7,0,0,720,151,1,0,0,0,721,722,
  	5,66,0,0,722,723,5,21,0,0,723,724,5,51,0,0,724,725,5,29,0,0,725,726,3,
  	160,80,0,726,727,5,9,0,0,727,728,5,52,0,0,728,729,5,29,0,0,729,730,5,
  	25,0,0,730,731,3,158,79,0,731,732,5,26,0,0,732,733,5,22,0,0,733,734,5,
  	7,0,0,734,153,1,0,0,0,735,740,5,5,0,0,736,737,5,5,0,0,737,738,5,9,0,0,
  	738,740,3,154,77,0,739,735,1,0,0,0,739,736,1,0,0,0,740,155,1,0,0,0,741,
  	745,3,40,20,0,742,743,5,1,0,0,743,745,3,40,20,0,744,741,1,0,0,0,744,742,
  	1,0,0,0,745,157,1,0,0,0,746,751,5,5,0,0,747,748,5,5,0,0,748,749,5,9,0,
  	0,749,751,3,158,79,0,750,746,1,0,0,0,750,747,1,0,0,0,751,159,1,0,0,0,
  	752,756,3,40,20,0,753,754,5,1,0,0,754,756,3,40,20,0,755,752,1,0,0,0,755,
  	753,1,0,0,0,756,161,1,0,0,0,757,768,3,40,20,0,758,759,5,1,0,0,759,768,
  	3,40,20,0,760,768,3,52,26,0,761,768,3,110,55,0,762,763,5,1,0,0,763,768,
  	3,110,55,0,764,768,3,44,22,0,765,766,5,1,0,0,766,768,3,44,22,0,767,757,
  	1,0,0,0,767,758,1,0,0,0,767,760,1,0,0,0,767,761,1,0,0,0,767,762,1,0,0,
  	0,767,764,1,0,0,0,767,765,1,0,0,0,768,163,1,0,0,0,769,780,3,40,20,0,770,
  	771,5,1,0,0,771,780,3,40,20,0,772,780,3,52,26,0,773,780,3,110,55,0,774,
  	775,5,1,0,0,775,780,3,110,55,0,776,780,3,44,22,0,777,778,5,1,0,0,778,
  	780,3,44,22,0,779,769,1,0,0,0,779,770,1,0,0,0,779,772,1,0,0,0,779,773,
  	1,0,0,0,779,774,1,0,0,0,779,776,1,0,0,0,779,777,1,0,0,0,780,165,1,0,0,
  	0,781,792,3,40,20,0,782,783,5,1,0,0,783,792,3,40,20,0,784,792,3,52,26,
  	0,785,792,3,110,55,0,786,787,5,1,0,0,787,792,3,110,55,0,788,792,3,44,
  	22,0,789,790,5,1,0,0,790,792,3,44,22,0,791,781,1,0,0,0,791,782,1,0,0,
  	0,791,784,1,0,0,0,791,785,1,0,0,0,791,786,1,0,0,0,791,788,1,0,0,0,791,
  	789,1,0,0,0,792,167,1,0,0,0,793,804,3,40,20,0,794,795,5,1,0,0,795,804,
  	3,40,20,0,796,804,3,52,26,0,797,804,3,110,55,0,798,799,5,1,0,0,799,804,
  	3,110,55,0,800,804,3,44,22,0,801,802,5,1,0,0,802,804,3,44,22,0,803,793,
  	1,0,0,0,803,794,1,0,0,0,803,796,1,0,0,0,803,797,1,0,0,0,803,798,1,0,0,
  	0,803,800,1,0,0,0,803,801,1,0,0,0,804,169,1,0,0,0,805,811,3,162,81,0,
  	806,807,3,162,81,0,807,808,5,9,0,0,808,809,3,170,85,0,809,811,1,0,0,0,
  	810,805,1,0,0,0,810,806,1,0,0,0,811,171,1,0,0,0,812,818,3,164,82,0,813,
  	814,3,164,82,0,814,815,5,9,0,0,815,816,3,172,86,0,816,818,1,0,0,0,817,
  	812,1,0,0,0,817,813,1,0,0,0,818,173,1,0,0,0,819,825,3,166,83,0,820,821,
  	3,166,83,0,821,822,5,9,0,0,822,823,3,174,87,0,823,825,1,0,0,0,824,819,
  	1,0,0,0,824,820,1,0,0,0,825,175,1,0,0,0,826,833,3,168,84,0,827,828,3,
  	168,84,0,828,829,5,9,0,0,829,830,3,176,88,0,830,831,3,176,88,0,831,833,
  	1,0,0,0,832,826,1,0,0,0,832,827,1,0,0,0,833,177,1,0,0,0,834,835,5,53,
  	0,0,835,179,1,0,0,0,836,837,5,67,0,0,837,181,1,0,0,0,838,839,3,178,89,
  	0,839,840,5,21,0,0,840,841,5,54,0,0,841,842,5,29,0,0,842,843,5,25,0,0,
  	843,844,3,170,85,0,844,845,5,26,0,0,845,846,5,9,0,0,846,847,5,55,0,0,
  	847,848,5,29,0,0,848,849,5,25,0,0,849,850,3,174,87,0,850,851,5,26,0,0,
  	851,852,5,22,0,0,852,853,5,7,0,0,853,871,1,0,0,0,854,855,3,178,89,0,855,
  	856,5,21,0,0,856,857,5,55,0,0,857,858,5,29,0,0,858,859,5,25,0,0,859,860,
  	3,174,87,0,860,861,5,26,0,0,861,862,5,9,0,0,862,863,5,54,0,0,863,864,
  	5,29,0,0,864,865,5,25,0,0,865,866,3,170,85,0,866,867,5,26,0,0,867,868,
  	5,22,0,0,868,869,5,7,0,0,869,871,1,0,0,0,870,838,1,0,0,0,870,854,1,0,
  	0,0,871,183,1,0,0,0,872,873,3,180,90,0,873,874,5,21,0,0,874,875,5,54,
  	0,0,875,876,5,29,0,0,876,877,5,25,0,0,877,878,3,172,86,0,878,879,5,26,
  	0,0,879,880,5,9,0,0,880,881,5,55,0,0,881,882,5,29,0,0,882,883,5,25,0,
  	0,883,884,3,176,88,0,884,885,5,26,0,0,885,886,5,22,0,0,886,887,5,7,0,
  	0,887,905,1,0,0,0,888,889,3,180,90,0,889,890,5,21,0,0,890,891,5,55,0,
  	0,891,892,5,29,0,0,892,893,5,25,0,0,893,894,3,176,88,0,894,895,5,26,0,
  	0,895,896,5,9,0,0,896,897,5,54,0,0,897,898,5,29,0,0,898,899,5,25,0,0,
  	899,900,3,172,86,0,900,901,5,26,0,0,901,902,5,22,0,0,902,903,5,7,0,0,
  	903,905,1,0,0,0,904,872,1,0,0,0,904,888,1,0,0,0,905,185,1,0,0,0,906,907,
  	5,46,0,0,907,908,5,21,0,0,908,909,5,49,0,0,909,910,5,29,0,0,910,911,3,
  	188,94,0,911,912,5,22,0,0,912,913,5,7,0,0,913,187,1,0,0,0,914,915,5,5,
  	0,0,915,189,1,0,0,0,916,917,5,47,0,0,917,918,5,21,0,0,918,919,5,22,0,
  	0,919,923,5,7,0,0,920,921,5,47,0,0,921,923,5,7,0,0,922,916,1,0,0,0,922,
  	920,1,0,0,0,923,191,1,0,0,0,924,925,5,44,0,0,925,926,5,21,0,0,926,927,
  	5,22,0,0,927,931,5,7,0,0,928,929,5,44,0,0,929,931,5,7,0,0,930,924,1,0,
  	0,0,930,928,1,0,0,0,931,193,1,0,0,0,932,933,5,45,0,0,933,934,5,21,0,0,
  	934,935,5,22,0,0,935,939,5,7,0,0,936,937,5,45,0,0,937,939,5,7,0,0,938,
  	932,1,0,0,0,938,936,1,0,0,0,939,195,1,0,0,0,940,941,3,198,99,0,941,942,
  	5,21,0,0,942,943,5,72,0,0,943,944,5,29,0,0,944,945,3,204,102,0,945,946,
  	5,9,0,0,946,947,5,73,0,0,947,948,5,29,0,0,948,949,5,25,0,0,949,950,3,
  	208,104,0,950,951,5,26,0,0,951,952,5,22,0,0,952,953,5,7,0,0,953,969,1,
  	0,0,0,954,955,3,198,99,0,955,956,5,21,0,0,956,957,5,73,0,0,957,958,5,
  	29,0,0,958,959,5,25,0,0,959,960,3,208,104,0,960,961,5,26,0,0,961,962,
  	5,9,0,0,962,963,5,72,0,0,963,964,5,29,0,0,964,965,3,204,102,0,965,966,
  	5,22,0,0,966,967,5,7,0,0,967,969,1,0,0,0,968,940,1,0,0,0,968,954,1,0,
  	0,0,969,197,1,0,0,0,970,971,5,41,0,0,971,199,1,0,0,0,972,973,3,202,101,
  	0,973,974,5,21,0,0,974,975,5,72,0,0,975,976,5,29,0,0,976,977,3,204,102,
  	0,977,978,5,9,0,0,978,979,5,73,0,0,979,980,5,29,0,0,980,981,5,25,0,0,
  	981,982,3,208,104,0,982,983,5,26,0,0,983,984,5,22,0,0,984,985,5,7,0,0,
  	985,1001,1,0,0,0,986,987,3,202,101,0,987,988,5,21,0,0,988,989,5,73,0,
  	0,989,990,5,29,0,0,990,991,5,25,0,0,991,992,3,208,104,0,992,993,5,26,
  	0,0,993,994,5,9,0,0,994,995,5,72,0,0,995,996,5,29,0,0,996,997,3,204,102,
  	0,997,998,5,22,0,0,998,999,5,7,0,0,999,1001,1,0,0,0,1000,972,1,0,0,0,
  	1000,986,1,0,0,0,1001,201,1,0,0,0,1002,1003,5,71,0,0,1003,203,1,0,0,0,
  	1004,1005,5,4,0,0,1005,205,1,0,0,0,1006,1009,3,120,60,0,1007,1009,3,40,
  	20,0,1008,1006,1,0,0,0,1008,1007,1,0,0,0,1009,207,1,0,0,0,1010,1016,3,
  	206,103,0,1011,1012,3,206,103,0,1012,1013,5,11,0,0,1013,1014,3,208,104,
  	0,1014,1016,1,0,0,0,1015,1010,1,0,0,0,1015,1011,1,0,0,0,1016,209,1,0,
  	0,0,64,213,222,246,250,263,274,286,293,315,328,335,344,351,360,366,375,
  	387,416,425,432,444,461,469,474,481,488,493,500,513,535,545,565,576,591,
  	598,612,618,629,637,645,661,677,699,739,744,750,755,767,779,791,803,810,
  	817,824,832,870,904,922,930,938,968,1000,1008,1015
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  aspcore2ParserStaticData = staticData.release();
}

}

ASPCore2Parser::ASPCore2Parser(TokenStream *input) : ASPCore2Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

ASPCore2Parser::ASPCore2Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  ASPCore2Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *aspcore2ParserStaticData->atn, aspcore2ParserStaticData->decisionToDFA, aspcore2ParserStaticData->sharedContextCache, options);
}

ASPCore2Parser::~ASPCore2Parser() {
  delete _interpreter;
}

const atn::ATN& ASPCore2Parser::getATN() const {
  return *aspcore2ParserStaticData->atn;
}

std::string ASPCore2Parser::getGrammarFileName() const {
  return "ASPCore2.g4";
}

const std::vector<std::string>& ASPCore2Parser::getRuleNames() const {
  return aspcore2ParserStaticData->ruleNames;
}

const dfa::Vocabulary& ASPCore2Parser::getVocabulary() const {
  return aspcore2ParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ASPCore2Parser::getSerializedATN() const {
  return aspcore2ParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

ASPCore2Parser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ASPCore2Parser::RuleContext *> ASPCore2Parser::ProgramContext::rule_() {
  return getRuleContexts<ASPCore2Parser::RuleContext>();
}

ASPCore2Parser::RuleContext* ASPCore2Parser::ProgramContext::rule_(size_t i) {
  return getRuleContext<ASPCore2Parser::RuleContext>(i);
}


size_t ASPCore2Parser::ProgramContext::getRuleIndex() const {
  return ASPCore2Parser::RuleProgram;
}

void ASPCore2Parser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void ASPCore2Parser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

ASPCore2Parser::ProgramContext* ASPCore2Parser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, ASPCore2Parser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(213);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ASPCore2Parser::SYMBOLIC_CONSTANT)
      | (1ULL << ASPCore2Parser::VARIABLE)
      | (1ULL << ASPCore2Parser::STRING)
      | (1ULL << ASPCore2Parser::NUMBER)
      | (1ULL << ASPCore2Parser::CONS)
      | (1ULL << ASPCore2Parser::WCONS)
      | (1ULL << ASPCore2Parser::DASH)
      | (1ULL << ASPCore2Parser::PARAM_OPEN)
      | (1ULL << ASPCore2Parser::CURLY_OPEN)
      | (1ULL << ASPCore2Parser::ANON_VAR)
      | (1ULL << ASPCore2Parser::EXISTS)
      | (1ULL << ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR)
      | (1ULL << ASPCore2Parser::DIRECTIVE_NAME)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_PROJECTION)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_ORDERING)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING - 65))
      | (1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED - 65))
      | (1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER - 65))
      | (1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION - 65))
      | (1ULL << (ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE - 65))
      | (1ULL << (ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE - 65))
      | (1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC - 65)))) != 0)) {
      setState(210);
      rule_();
      setState(215);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RuleContext ------------------------------------------------------------------

ASPCore2Parser::RuleContext::RuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Simple_ruleContext* ASPCore2Parser::RuleContext::simple_rule() {
  return getRuleContext<ASPCore2Parser::Simple_ruleContext>(0);
}

ASPCore2Parser::Annotations_ruleContext* ASPCore2Parser::RuleContext::annotations_rule() {
  return getRuleContext<ASPCore2Parser::Annotations_ruleContext>(0);
}

ASPCore2Parser::Annotation_globalContext* ASPCore2Parser::RuleContext::annotation_global() {
  return getRuleContext<ASPCore2Parser::Annotation_globalContext>(0);
}

ASPCore2Parser::DirectiveContext* ASPCore2Parser::RuleContext::directive() {
  return getRuleContext<ASPCore2Parser::DirectiveContext>(0);
}


size_t ASPCore2Parser::RuleContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule;
}

void ASPCore2Parser::RuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule(this);
}

void ASPCore2Parser::RuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule(this);
}

ASPCore2Parser::RuleContext* ASPCore2Parser::rule_() {
  RuleContext *_localctx = _tracker.createInstance<RuleContext>(_ctx, getState());
  enterRule(_localctx, 2, ASPCore2Parser::RuleRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(222);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING:
      case ASPCore2Parser::NUMBER:
      case ASPCore2Parser::CONS:
      case ASPCore2Parser::WCONS:
      case ASPCore2Parser::DASH:
      case ASPCore2Parser::PARAM_OPEN:
      case ASPCore2Parser::CURLY_OPEN:
      case ASPCore2Parser::ANON_VAR:
      case ASPCore2Parser::EXISTS: {
        enterOuterAlt(_localctx, 1);
        setState(216);
        simple_rule();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS:
      case ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD:
      case ASPCore2Parser::ANNOTATION_RULE_PROJECTION:
      case ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH:
      case ASPCore2Parser::ANNOTATION_RULE_ORDERING:
      case ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED:
      case ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER:
      case ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE:
      case ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE: {
        enterOuterAlt(_localctx, 2);
        setState(217);
        annotations_rule();
        setState(218);
        simple_rule();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR:
      case ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING:
      case ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED:
      case ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER:
      case ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION:
      case ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC: {
        enterOuterAlt(_localctx, 3);
        setState(220);
        annotation_global();
        break;
      }

      case ASPCore2Parser::DIRECTIVE_NAME: {
        enterOuterAlt(_localctx, 4);
        setState(221);
        directive();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_ruleContext ------------------------------------------------------------------

ASPCore2Parser::Simple_ruleContext::Simple_ruleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::HeadContext* ASPCore2Parser::Simple_ruleContext::head() {
  return getRuleContext<ASPCore2Parser::HeadContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Simple_ruleContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}

tree::TerminalNode* ASPCore2Parser::Simple_ruleContext::CONS() {
  return getToken(ASPCore2Parser::CONS, 0);
}

ASPCore2Parser::BodyContext* ASPCore2Parser::Simple_ruleContext::body() {
  return getRuleContext<ASPCore2Parser::BodyContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Simple_ruleContext::WCONS() {
  return getToken(ASPCore2Parser::WCONS, 0);
}

ASPCore2Parser::Weight_at_levelsContext* ASPCore2Parser::Simple_ruleContext::weight_at_levels() {
  return getRuleContext<ASPCore2Parser::Weight_at_levelsContext>(0);
}

ASPCore2Parser::QueryContext* ASPCore2Parser::Simple_ruleContext::query() {
  return getRuleContext<ASPCore2Parser::QueryContext>(0);
}


size_t ASPCore2Parser::Simple_ruleContext::getRuleIndex() const {
  return ASPCore2Parser::RuleSimple_rule;
}

void ASPCore2Parser::Simple_ruleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_rule(this);
}

void ASPCore2Parser::Simple_ruleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_rule(this);
}

ASPCore2Parser::Simple_ruleContext* ASPCore2Parser::simple_rule() {
  Simple_ruleContext *_localctx = _tracker.createInstance<Simple_ruleContext>(_ctx, getState());
  enterRule(_localctx, 4, ASPCore2Parser::RuleSimple_rule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(246);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(224);
      head();
      setState(225);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(227);
      head();
      setState(228);
      match(ASPCore2Parser::CONS);
      setState(229);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(231);
      head();
      setState(232);
      match(ASPCore2Parser::CONS);
      setState(233);
      body();
      setState(234);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(236);
      match(ASPCore2Parser::CONS);
      setState(237);
      body();
      setState(238);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(240);
      match(ASPCore2Parser::WCONS);
      setState(241);
      body();
      setState(242);
      match(ASPCore2Parser::DOT);
      setState(243);
      weight_at_levels();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(245);
      query();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeadContext ------------------------------------------------------------------

ASPCore2Parser::HeadContext::HeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::DisjunctionContext* ASPCore2Parser::HeadContext::disjunction() {
  return getRuleContext<ASPCore2Parser::DisjunctionContext>(0);
}

ASPCore2Parser::Choice_atomContext* ASPCore2Parser::HeadContext::choice_atom() {
  return getRuleContext<ASPCore2Parser::Choice_atomContext>(0);
}


size_t ASPCore2Parser::HeadContext::getRuleIndex() const {
  return ASPCore2Parser::RuleHead;
}

void ASPCore2Parser::HeadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHead(this);
}

void ASPCore2Parser::HeadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHead(this);
}

ASPCore2Parser::HeadContext* ASPCore2Parser::head() {
  HeadContext *_localctx = _tracker.createInstance<HeadContext>(_ctx, getState());
  enterRule(_localctx, 6, ASPCore2Parser::RuleHead);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(250);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(248);
      disjunction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(249);
      choice_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

ASPCore2Parser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::ConjunctionContext* ASPCore2Parser::BodyContext::conjunction() {
  return getRuleContext<ASPCore2Parser::ConjunctionContext>(0);
}


size_t ASPCore2Parser::BodyContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBody;
}

void ASPCore2Parser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void ASPCore2Parser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}

ASPCore2Parser::BodyContext* ASPCore2Parser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 8, ASPCore2Parser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(252);
    conjunction();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Weight_at_levelsContext ------------------------------------------------------------------

ASPCore2Parser::Weight_at_levelsContext::Weight_at_levelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Weight_at_levelsContext::SQUARE_OPEN() {
  return getToken(ASPCore2Parser::SQUARE_OPEN, 0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Weight_at_levelsContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Weight_at_levelsContext::SQUARE_CLOSED() {
  return getToken(ASPCore2Parser::SQUARE_CLOSED, 0);
}

ASPCore2Parser::Levels_and_termsContext* ASPCore2Parser::Weight_at_levelsContext::levels_and_terms() {
  return getRuleContext<ASPCore2Parser::Levels_and_termsContext>(0);
}


size_t ASPCore2Parser::Weight_at_levelsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleWeight_at_levels;
}

void ASPCore2Parser::Weight_at_levelsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWeight_at_levels(this);
}

void ASPCore2Parser::Weight_at_levelsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWeight_at_levels(this);
}

ASPCore2Parser::Weight_at_levelsContext* ASPCore2Parser::weight_at_levels() {
  Weight_at_levelsContext *_localctx = _tracker.createInstance<Weight_at_levelsContext>(_ctx, getState());
  enterRule(_localctx, 10, ASPCore2Parser::RuleWeight_at_levels);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(263);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(254);
      match(ASPCore2Parser::SQUARE_OPEN);
      setState(255);
      term();
      setState(256);
      match(ASPCore2Parser::SQUARE_CLOSED);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(258);
      match(ASPCore2Parser::SQUARE_OPEN);
      setState(259);
      term();
      setState(260);
      levels_and_terms();
      setState(261);
      match(ASPCore2Parser::SQUARE_CLOSED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Levels_and_termsContext ------------------------------------------------------------------

ASPCore2Parser::Levels_and_termsContext::Levels_and_termsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Levels_and_termsContext::AT() {
  return getToken(ASPCore2Parser::AT, 0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Levels_and_termsContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Levels_and_termsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::Levels_and_termsContext::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}


size_t ASPCore2Parser::Levels_and_termsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLevels_and_terms;
}

void ASPCore2Parser::Levels_and_termsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevels_and_terms(this);
}

void ASPCore2Parser::Levels_and_termsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevels_and_terms(this);
}

ASPCore2Parser::Levels_and_termsContext* ASPCore2Parser::levels_and_terms() {
  Levels_and_termsContext *_localctx = _tracker.createInstance<Levels_and_termsContext>(_ctx, getState());
  enterRule(_localctx, 12, ASPCore2Parser::RuleLevels_and_terms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(274);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(265);
      match(ASPCore2Parser::AT);
      setState(266);
      term();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(267);
      match(ASPCore2Parser::AT);
      setState(268);
      term();
      setState(269);
      match(ASPCore2Parser::COMMA);
      setState(270);
      terms();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(272);
      match(ASPCore2Parser::COMMA);
      setState(273);
      terms();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjunctionContext ------------------------------------------------------------------

ASPCore2Parser::DisjunctionContext::DisjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::DisjunctionContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::DisjunctionContext::HEAD_SEPARATOR() {
  return getToken(ASPCore2Parser::HEAD_SEPARATOR, 0);
}

ASPCore2Parser::DisjunctionContext* ASPCore2Parser::DisjunctionContext::disjunction() {
  return getRuleContext<ASPCore2Parser::DisjunctionContext>(0);
}

ASPCore2Parser::Existential_atomContext* ASPCore2Parser::DisjunctionContext::existential_atom() {
  return getRuleContext<ASPCore2Parser::Existential_atomContext>(0);
}


size_t ASPCore2Parser::DisjunctionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleDisjunction;
}

void ASPCore2Parser::DisjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisjunction(this);
}

void ASPCore2Parser::DisjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisjunction(this);
}

ASPCore2Parser::DisjunctionContext* ASPCore2Parser::disjunction() {
  DisjunctionContext *_localctx = _tracker.createInstance<DisjunctionContext>(_ctx, getState());
  enterRule(_localctx, 14, ASPCore2Parser::RuleDisjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(286);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(276);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(277);
      classic_literal();
      setState(278);
      match(ASPCore2Parser::HEAD_SEPARATOR);
      setState(279);
      disjunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(281);
      existential_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(282);
      existential_atom();
      setState(283);
      match(ASPCore2Parser::HEAD_SEPARATOR);
      setState(284);
      disjunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

ASPCore2Parser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Naf_literal_aggregateContext* ASPCore2Parser::ConjunctionContext::naf_literal_aggregate() {
  return getRuleContext<ASPCore2Parser::Naf_literal_aggregateContext>(0);
}

tree::TerminalNode* ASPCore2Parser::ConjunctionContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::ConjunctionContext* ASPCore2Parser::ConjunctionContext::conjunction() {
  return getRuleContext<ASPCore2Parser::ConjunctionContext>(0);
}


size_t ASPCore2Parser::ConjunctionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleConjunction;
}

void ASPCore2Parser::ConjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjunction(this);
}

void ASPCore2Parser::ConjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjunction(this);
}

ASPCore2Parser::ConjunctionContext* ASPCore2Parser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 16, ASPCore2Parser::RuleConjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(293);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(288);
      naf_literal_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(289);
      naf_literal_aggregate();
      setState(290);
      match(ASPCore2Parser::COMMA);
      setState(291);
      conjunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_atomContext ------------------------------------------------------------------

ASPCore2Parser::Choice_atomContext::Choice_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Lower_guardContext* ASPCore2Parser::Choice_atomContext::lower_guard() {
  return getRuleContext<ASPCore2Parser::Lower_guardContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_atomContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Choice_elementsContext* ASPCore2Parser::Choice_atomContext::choice_elements() {
  return getRuleContext<ASPCore2Parser::Choice_elementsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_atomContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

ASPCore2Parser::Upper_guardContext* ASPCore2Parser::Choice_atomContext::upper_guard() {
  return getRuleContext<ASPCore2Parser::Upper_guardContext>(0);
}


size_t ASPCore2Parser::Choice_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_atom;
}

void ASPCore2Parser::Choice_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_atom(this);
}

void ASPCore2Parser::Choice_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_atom(this);
}

ASPCore2Parser::Choice_atomContext* ASPCore2Parser::choice_atom() {
  Choice_atomContext *_localctx = _tracker.createInstance<Choice_atomContext>(_ctx, getState());
  enterRule(_localctx, 18, ASPCore2Parser::RuleChoice_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(315);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(295);
      lower_guard();
      setState(296);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(297);
      choice_elements();
      setState(298);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(299);
      upper_guard();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(301);
      lower_guard();
      setState(302);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(303);
      choice_elements();
      setState(304);
      match(ASPCore2Parser::CURLY_CLOSE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(306);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(307);
      choice_elements();
      setState(308);
      match(ASPCore2Parser::CURLY_CLOSE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(310);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(311);
      choice_elements();
      setState(312);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(313);
      upper_guard();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lower_guardContext ------------------------------------------------------------------

ASPCore2Parser::Lower_guardContext::Lower_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::Lower_guardContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

ASPCore2Parser::BinopContext* ASPCore2Parser::Lower_guardContext::binop() {
  return getRuleContext<ASPCore2Parser::BinopContext>(0);
}


size_t ASPCore2Parser::Lower_guardContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLower_guard;
}

void ASPCore2Parser::Lower_guardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLower_guard(this);
}

void ASPCore2Parser::Lower_guardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLower_guard(this);
}

ASPCore2Parser::Lower_guardContext* ASPCore2Parser::lower_guard() {
  Lower_guardContext *_localctx = _tracker.createInstance<Lower_guardContext>(_ctx, getState());
  enterRule(_localctx, 20, ASPCore2Parser::RuleLower_guard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(317);
    term();
    setState(318);
    binop();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Upper_guardContext ------------------------------------------------------------------

ASPCore2Parser::Upper_guardContext::Upper_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::BinopContext* ASPCore2Parser::Upper_guardContext::binop() {
  return getRuleContext<ASPCore2Parser::BinopContext>(0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Upper_guardContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Upper_guardContext::getRuleIndex() const {
  return ASPCore2Parser::RuleUpper_guard;
}

void ASPCore2Parser::Upper_guardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpper_guard(this);
}

void ASPCore2Parser::Upper_guardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpper_guard(this);
}

ASPCore2Parser::Upper_guardContext* ASPCore2Parser::upper_guard() {
  Upper_guardContext *_localctx = _tracker.createInstance<Upper_guardContext>(_ctx, getState());
  enterRule(_localctx, 22, ASPCore2Parser::RuleUpper_guard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(320);
    binop();
    setState(321);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_elementsContext ------------------------------------------------------------------

ASPCore2Parser::Choice_elementsContext::Choice_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Choice_elementContext* ASPCore2Parser::Choice_elementsContext::choice_element() {
  return getRuleContext<ASPCore2Parser::Choice_elementContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_elementsContext::SEMICOLON() {
  return getToken(ASPCore2Parser::SEMICOLON, 0);
}

ASPCore2Parser::Choice_elementsContext* ASPCore2Parser::Choice_elementsContext::choice_elements() {
  return getRuleContext<ASPCore2Parser::Choice_elementsContext>(0);
}


size_t ASPCore2Parser::Choice_elementsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_elements;
}

void ASPCore2Parser::Choice_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_elements(this);
}

void ASPCore2Parser::Choice_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_elements(this);
}

ASPCore2Parser::Choice_elementsContext* ASPCore2Parser::choice_elements() {
  Choice_elementsContext *_localctx = _tracker.createInstance<Choice_elementsContext>(_ctx, getState());
  enterRule(_localctx, 24, ASPCore2Parser::RuleChoice_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(328);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(323);
      choice_element();
      setState(324);
      match(ASPCore2Parser::SEMICOLON);
      setState(325);
      choice_elements();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(327);
      choice_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_elementContext ------------------------------------------------------------------

ASPCore2Parser::Choice_elementContext::Choice_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Choice_element_atomContext* ASPCore2Parser::Choice_elementContext::choice_element_atom() {
  return getRuleContext<ASPCore2Parser::Choice_element_atomContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_elementContext::COLON() {
  return getToken(ASPCore2Parser::COLON, 0);
}

ASPCore2Parser::Choice_elements_literalsContext* ASPCore2Parser::Choice_elementContext::choice_elements_literals() {
  return getRuleContext<ASPCore2Parser::Choice_elements_literalsContext>(0);
}


size_t ASPCore2Parser::Choice_elementContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_element;
}

void ASPCore2Parser::Choice_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_element(this);
}

void ASPCore2Parser::Choice_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_element(this);
}

ASPCore2Parser::Choice_elementContext* ASPCore2Parser::choice_element() {
  Choice_elementContext *_localctx = _tracker.createInstance<Choice_elementContext>(_ctx, getState());
  enterRule(_localctx, 26, ASPCore2Parser::RuleChoice_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(335);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(330);
      choice_element_atom();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(331);
      choice_element_atom();
      setState(332);
      match(ASPCore2Parser::COLON);
      setState(333);
      choice_elements_literals();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_element_atomContext ------------------------------------------------------------------

ASPCore2Parser::Choice_element_atomContext::Choice_element_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::AtomContext* ASPCore2Parser::Choice_element_atomContext::atom() {
  return getRuleContext<ASPCore2Parser::AtomContext>(0);
}


size_t ASPCore2Parser::Choice_element_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_element_atom;
}

void ASPCore2Parser::Choice_element_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_element_atom(this);
}

void ASPCore2Parser::Choice_element_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_element_atom(this);
}

ASPCore2Parser::Choice_element_atomContext* ASPCore2Parser::choice_element_atom() {
  Choice_element_atomContext *_localctx = _tracker.createInstance<Choice_element_atomContext>(_ctx, getState());
  enterRule(_localctx, 28, ASPCore2Parser::RuleChoice_element_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(337);
    atom();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_elements_literalsContext ------------------------------------------------------------------

ASPCore2Parser::Choice_elements_literalsContext::Choice_elements_literalsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Naf_literalContext* ASPCore2Parser::Choice_elements_literalsContext::naf_literal() {
  return getRuleContext<ASPCore2Parser::Naf_literalContext>(0);
}

ASPCore2Parser::Naf_literalsContext* ASPCore2Parser::Choice_elements_literalsContext::naf_literals() {
  return getRuleContext<ASPCore2Parser::Naf_literalsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_elements_literalsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}


size_t ASPCore2Parser::Choice_elements_literalsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_elements_literals;
}

void ASPCore2Parser::Choice_elements_literalsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_elements_literals(this);
}

void ASPCore2Parser::Choice_elements_literalsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_elements_literals(this);
}

ASPCore2Parser::Choice_elements_literalsContext* ASPCore2Parser::choice_elements_literals() {
  Choice_elements_literalsContext *_localctx = _tracker.createInstance<Choice_elements_literalsContext>(_ctx, getState());
  enterRule(_localctx, 30, ASPCore2Parser::RuleChoice_elements_literals);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(344);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(339);
      naf_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(340);
      naf_literals();
      setState(341);
      match(ASPCore2Parser::COMMA);
      setState(342);
      naf_literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Naf_literalsContext ------------------------------------------------------------------

ASPCore2Parser::Naf_literalsContext::Naf_literalsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Naf_literalContext* ASPCore2Parser::Naf_literalsContext::naf_literal() {
  return getRuleContext<ASPCore2Parser::Naf_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Naf_literalsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Naf_literalsContext* ASPCore2Parser::Naf_literalsContext::naf_literals() {
  return getRuleContext<ASPCore2Parser::Naf_literalsContext>(0);
}


size_t ASPCore2Parser::Naf_literalsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleNaf_literals;
}

void ASPCore2Parser::Naf_literalsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNaf_literals(this);
}

void ASPCore2Parser::Naf_literalsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNaf_literals(this);
}

ASPCore2Parser::Naf_literalsContext* ASPCore2Parser::naf_literals() {
  Naf_literalsContext *_localctx = _tracker.createInstance<Naf_literalsContext>(_ctx, getState());
  enterRule(_localctx, 32, ASPCore2Parser::RuleNaf_literals);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(351);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(346);
      naf_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(347);
      naf_literal();
      setState(348);
      match(ASPCore2Parser::COMMA);
      setState(349);
      naf_literals();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Naf_literalContext ------------------------------------------------------------------

ASPCore2Parser::Naf_literalContext::Naf_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Naf_literalContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Naf_literalContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Naf_literalContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Naf_literalContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Naf_literalContext::getRuleIndex() const {
  return ASPCore2Parser::RuleNaf_literal;
}

void ASPCore2Parser::Naf_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNaf_literal(this);
}

void ASPCore2Parser::Naf_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNaf_literal(this);
}

ASPCore2Parser::Naf_literalContext* ASPCore2Parser::naf_literal() {
  Naf_literalContext *_localctx = _tracker.createInstance<Naf_literalContext>(_ctx, getState());
  enterRule(_localctx, 34, ASPCore2Parser::RuleNaf_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(360);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(353);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(354);
      match(ASPCore2Parser::NAF);
      setState(355);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(356);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(357);
      extAtom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(358);
      match(ASPCore2Parser::NAF);
      setState(359);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Naf_literal_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Naf_literal_aggregateContext::Naf_literal_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Naf_literalContext* ASPCore2Parser::Naf_literal_aggregateContext::naf_literal() {
  return getRuleContext<ASPCore2Parser::Naf_literalContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Naf_literal_aggregateContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Naf_literal_aggregateContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}


size_t ASPCore2Parser::Naf_literal_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleNaf_literal_aggregate;
}

void ASPCore2Parser::Naf_literal_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNaf_literal_aggregate(this);
}

void ASPCore2Parser::Naf_literal_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNaf_literal_aggregate(this);
}

ASPCore2Parser::Naf_literal_aggregateContext* ASPCore2Parser::naf_literal_aggregate() {
  Naf_literal_aggregateContext *_localctx = _tracker.createInstance<Naf_literal_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 36, ASPCore2Parser::RuleNaf_literal_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(366);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(362);
      naf_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(363);
      aggregate_atom();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(364);
      match(ASPCore2Parser::NAF);
      setState(365);
      aggregate_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Existential_atomContext ------------------------------------------------------------------

ASPCore2Parser::Existential_atomContext::Existential_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Existential_atomContext::EXISTS() {
  return getToken(ASPCore2Parser::EXISTS, 0);
}

ASPCore2Parser::VarsContext* ASPCore2Parser::Existential_atomContext::vars() {
  return getRuleContext<ASPCore2Parser::VarsContext>(0);
}

ASPCore2Parser::AtomContext* ASPCore2Parser::Existential_atomContext::atom() {
  return getRuleContext<ASPCore2Parser::AtomContext>(0);
}


size_t ASPCore2Parser::Existential_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExistential_atom;
}

void ASPCore2Parser::Existential_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExistential_atom(this);
}

void ASPCore2Parser::Existential_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExistential_atom(this);
}

ASPCore2Parser::Existential_atomContext* ASPCore2Parser::existential_atom() {
  Existential_atomContext *_localctx = _tracker.createInstance<Existential_atomContext>(_ctx, getState());
  enterRule(_localctx, 38, ASPCore2Parser::RuleExistential_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(368);
    match(ASPCore2Parser::EXISTS);
    setState(369);
    vars();
    setState(370);
    atom();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classic_literalContext ------------------------------------------------------------------

ASPCore2Parser::Classic_literalContext::Classic_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::AtomContext* ASPCore2Parser::Classic_literalContext::atom() {
  return getRuleContext<ASPCore2Parser::AtomContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Classic_literalContext::DASH() {
  return getToken(ASPCore2Parser::DASH, 0);
}


size_t ASPCore2Parser::Classic_literalContext::getRuleIndex() const {
  return ASPCore2Parser::RuleClassic_literal;
}

void ASPCore2Parser::Classic_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassic_literal(this);
}

void ASPCore2Parser::Classic_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassic_literal(this);
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::classic_literal() {
  Classic_literalContext *_localctx = _tracker.createInstance<Classic_literalContext>(_ctx, getState());
  enterRule(_localctx, 40, ASPCore2Parser::RuleClassic_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(375);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(372);
        atom();
        break;
      }

      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 2);
        setState(373);
        match(ASPCore2Parser::DASH);
        setState(374);
        atom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

ASPCore2Parser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::AtomContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::AtomContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::AtomContext::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::AtomContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}


size_t ASPCore2Parser::AtomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAtom;
}

void ASPCore2Parser::AtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtom(this);
}

void ASPCore2Parser::AtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtom(this);
}

ASPCore2Parser::AtomContext* ASPCore2Parser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 42, ASPCore2Parser::RuleAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(387);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(377);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(378);
      identifier();
      setState(379);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(380);
      terms();
      setState(381);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(383);
      identifier();
      setState(384);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(385);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtAtomContext ------------------------------------------------------------------

ASPCore2Parser::ExtAtomContext::ExtAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::ExtAtomContext::AMPERSAND() {
  return getToken(ASPCore2Parser::AMPERSAND, 0);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::ExtAtomContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::ExtAtomContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

std::vector<ASPCore2Parser::TermsContext *> ASPCore2Parser::ExtAtomContext::terms() {
  return getRuleContexts<ASPCore2Parser::TermsContext>();
}

ASPCore2Parser::TermsContext* ASPCore2Parser::ExtAtomContext::terms(size_t i) {
  return getRuleContext<ASPCore2Parser::TermsContext>(i);
}

ASPCore2Parser::ExtSemicolContext* ASPCore2Parser::ExtAtomContext::extSemicol() {
  return getRuleContext<ASPCore2Parser::ExtSemicolContext>(0);
}

tree::TerminalNode* ASPCore2Parser::ExtAtomContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}


size_t ASPCore2Parser::ExtAtomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExtAtom;
}

void ASPCore2Parser::ExtAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtAtom(this);
}

void ASPCore2Parser::ExtAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtAtom(this);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::extAtom() {
  ExtAtomContext *_localctx = _tracker.createInstance<ExtAtomContext>(_ctx, getState());
  enterRule(_localctx, 44, ASPCore2Parser::RuleExtAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(416);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(389);
      match(ASPCore2Parser::AMPERSAND);
      setState(390);
      identifier();
      setState(391);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(392);
      terms();
      setState(393);
      extSemicol();
      setState(394);
      terms();
      setState(395);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(397);
      match(ASPCore2Parser::AMPERSAND);
      setState(398);
      identifier();
      setState(399);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(400);
      extSemicol();
      setState(401);
      terms();
      setState(402);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(404);
      match(ASPCore2Parser::AMPERSAND);
      setState(405);
      identifier();
      setState(406);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(407);
      terms();
      setState(408);
      extSemicol();
      setState(409);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(411);
      match(ASPCore2Parser::AMPERSAND);
      setState(412);
      identifier();
      setState(413);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(414);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtSemicolContext ------------------------------------------------------------------

ASPCore2Parser::ExtSemicolContext::ExtSemicolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::ExtSemicolContext::SEMICOLON() {
  return getToken(ASPCore2Parser::SEMICOLON, 0);
}


size_t ASPCore2Parser::ExtSemicolContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExtSemicol;
}

void ASPCore2Parser::ExtSemicolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtSemicol(this);
}

void ASPCore2Parser::ExtSemicolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtSemicol(this);
}

ASPCore2Parser::ExtSemicolContext* ASPCore2Parser::extSemicol() {
  ExtSemicolContext *_localctx = _tracker.createInstance<ExtSemicolContext>(_ctx, getState());
  enterRule(_localctx, 46, ASPCore2Parser::RuleExtSemicol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(418);
    match(ASPCore2Parser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermsContext ------------------------------------------------------------------

ASPCore2Parser::TermsContext::TermsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::TermsContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

tree::TerminalNode* ASPCore2Parser::TermsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::TermsContext::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}


size_t ASPCore2Parser::TermsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleTerms;
}

void ASPCore2Parser::TermsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerms(this);
}

void ASPCore2Parser::TermsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerms(this);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::terms() {
  TermsContext *_localctx = _tracker.createInstance<TermsContext>(_ctx, getState());
  enterRule(_localctx, 48, ASPCore2Parser::RuleTerms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(425);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(420);
      term();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(421);
      term();
      setState(422);
      match(ASPCore2Parser::COMMA);
      setState(423);
      terms();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Basic_termsContext ------------------------------------------------------------------

ASPCore2Parser::Basic_termsContext::Basic_termsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Basic_termContext* ASPCore2Parser::Basic_termsContext::basic_term() {
  return getRuleContext<ASPCore2Parser::Basic_termContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Basic_termsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Basic_termsContext* ASPCore2Parser::Basic_termsContext::basic_terms() {
  return getRuleContext<ASPCore2Parser::Basic_termsContext>(0);
}


size_t ASPCore2Parser::Basic_termsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBasic_terms;
}

void ASPCore2Parser::Basic_termsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_terms(this);
}

void ASPCore2Parser::Basic_termsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_terms(this);
}

ASPCore2Parser::Basic_termsContext* ASPCore2Parser::basic_terms() {
  Basic_termsContext *_localctx = _tracker.createInstance<Basic_termsContext>(_ctx, getState());
  enterRule(_localctx, 50, ASPCore2Parser::RuleBasic_terms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(432);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(427);
      basic_term();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(428);
      basic_term();
      setState(429);
      match(ASPCore2Parser::COMMA);
      setState(430);
      basic_terms();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Builtin_atomContext ------------------------------------------------------------------

ASPCore2Parser::Builtin_atomContext::Builtin_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ASPCore2Parser::TermContext *> ASPCore2Parser::Builtin_atomContext::term() {
  return getRuleContexts<ASPCore2Parser::TermContext>();
}

ASPCore2Parser::TermContext* ASPCore2Parser::Builtin_atomContext::term(size_t i) {
  return getRuleContext<ASPCore2Parser::TermContext>(i);
}

ASPCore2Parser::BinopContext* ASPCore2Parser::Builtin_atomContext::binop() {
  return getRuleContext<ASPCore2Parser::BinopContext>(0);
}


size_t ASPCore2Parser::Builtin_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBuiltin_atom;
}

void ASPCore2Parser::Builtin_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBuiltin_atom(this);
}

void ASPCore2Parser::Builtin_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBuiltin_atom(this);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::builtin_atom() {
  Builtin_atomContext *_localctx = _tracker.createInstance<Builtin_atomContext>(_ctx, getState());
  enterRule(_localctx, 52, ASPCore2Parser::RuleBuiltin_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(434);
    term();
    setState(435);
    binop();
    setState(436);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompareopContext ------------------------------------------------------------------

ASPCore2Parser::CompareopContext::CompareopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::CompareopContext::EQUAL() {
  return getToken(ASPCore2Parser::EQUAL, 0);
}

tree::TerminalNode* ASPCore2Parser::CompareopContext::UNEQUAL() {
  return getToken(ASPCore2Parser::UNEQUAL, 0);
}


size_t ASPCore2Parser::CompareopContext::getRuleIndex() const {
  return ASPCore2Parser::RuleCompareop;
}

void ASPCore2Parser::CompareopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompareop(this);
}

void ASPCore2Parser::CompareopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompareop(this);
}

ASPCore2Parser::CompareopContext* ASPCore2Parser::compareop() {
  CompareopContext *_localctx = _tracker.createInstance<CompareopContext>(_ctx, getState());
  enterRule(_localctx, 54, ASPCore2Parser::RuleCompareop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(438);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::EQUAL

    || _la == ASPCore2Parser::UNEQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinopContext ------------------------------------------------------------------

ASPCore2Parser::BinopContext::BinopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::CompareopContext* ASPCore2Parser::BinopContext::compareop() {
  return getRuleContext<ASPCore2Parser::CompareopContext>(0);
}

ASPCore2Parser::LeftwardopContext* ASPCore2Parser::BinopContext::leftwardop() {
  return getRuleContext<ASPCore2Parser::LeftwardopContext>(0);
}

ASPCore2Parser::RightwardopContext* ASPCore2Parser::BinopContext::rightwardop() {
  return getRuleContext<ASPCore2Parser::RightwardopContext>(0);
}


size_t ASPCore2Parser::BinopContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBinop;
}

void ASPCore2Parser::BinopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinop(this);
}

void ASPCore2Parser::BinopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinop(this);
}

ASPCore2Parser::BinopContext* ASPCore2Parser::binop() {
  BinopContext *_localctx = _tracker.createInstance<BinopContext>(_ctx, getState());
  enterRule(_localctx, 56, ASPCore2Parser::RuleBinop);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(444);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(440);
      compareop();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(441);
      compareop();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(442);
      leftwardop();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(443);
      rightwardop();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithop1Context ------------------------------------------------------------------

ASPCore2Parser::Arithop1Context::Arithop1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Arithop1Context::PLUS() {
  return getToken(ASPCore2Parser::PLUS, 0);
}

tree::TerminalNode* ASPCore2Parser::Arithop1Context::DASH() {
  return getToken(ASPCore2Parser::DASH, 0);
}


size_t ASPCore2Parser::Arithop1Context::getRuleIndex() const {
  return ASPCore2Parser::RuleArithop1;
}

void ASPCore2Parser::Arithop1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithop1(this);
}

void ASPCore2Parser::Arithop1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithop1(this);
}

ASPCore2Parser::Arithop1Context* ASPCore2Parser::arithop1() {
  Arithop1Context *_localctx = _tracker.createInstance<Arithop1Context>(_ctx, getState());
  enterRule(_localctx, 58, ASPCore2Parser::RuleArithop1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(446);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::PLUS

    || _la == ASPCore2Parser::DASH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithop2Context ------------------------------------------------------------------

ASPCore2Parser::Arithop2Context::Arithop2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Arithop2Context::TIMES() {
  return getToken(ASPCore2Parser::TIMES, 0);
}

tree::TerminalNode* ASPCore2Parser::Arithop2Context::SLASH() {
  return getToken(ASPCore2Parser::SLASH, 0);
}

tree::TerminalNode* ASPCore2Parser::Arithop2Context::BACK_SLASH() {
  return getToken(ASPCore2Parser::BACK_SLASH, 0);
}


size_t ASPCore2Parser::Arithop2Context::getRuleIndex() const {
  return ASPCore2Parser::RuleArithop2;
}

void ASPCore2Parser::Arithop2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithop2(this);
}

void ASPCore2Parser::Arithop2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithop2(this);
}

ASPCore2Parser::Arithop2Context* ASPCore2Parser::arithop2() {
  Arithop2Context *_localctx = _tracker.createInstance<Arithop2Context>(_ctx, getState());
  enterRule(_localctx, 60, ASPCore2Parser::RuleArithop2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(448);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ASPCore2Parser::TIMES)
      | (1ULL << ASPCore2Parser::SLASH)
      | (1ULL << ASPCore2Parser::BACK_SLASH))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Term_Context ------------------------------------------------------------------

ASPCore2Parser::Term_Context::Term_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Term_Context::ANON_VAR() {
  return getToken(ASPCore2Parser::ANON_VAR, 0);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::Term_Context::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::Term_Context::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Term_Context::NUMBER() {
  return getTokens(ASPCore2Parser::NUMBER);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::NUMBER(size_t i) {
  return getToken(ASPCore2Parser::NUMBER, i);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::DDOT() {
  return getToken(ASPCore2Parser::DDOT, 0);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::DASH() {
  return getToken(ASPCore2Parser::DASH, 0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Term_Context::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Term_Context::getRuleIndex() const {
  return ASPCore2Parser::RuleTerm_;
}

void ASPCore2Parser::Term_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm_(this);
}

void ASPCore2Parser::Term_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm_(this);
}

ASPCore2Parser::Term_Context* ASPCore2Parser::term_() {
  Term_Context *_localctx = _tracker.createInstance<Term_Context>(_ctx, getState());
  enterRule(_localctx, 62, ASPCore2Parser::RuleTerm_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(461);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::ANON_VAR: {
        enterOuterAlt(_localctx, 1);
        setState(450);
        match(ASPCore2Parser::ANON_VAR);
        break;
      }

      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(451);
        identifier();
        setState(452);
        match(ASPCore2Parser::PARAM_OPEN);
        setState(453);
        terms();
        setState(454);
        match(ASPCore2Parser::PARAM_CLOSE);
        break;
      }

      case ASPCore2Parser::NUMBER: {
        enterOuterAlt(_localctx, 3);
        setState(456);
        match(ASPCore2Parser::NUMBER);
        setState(457);
        match(ASPCore2Parser::DDOT);
        setState(458);
        match(ASPCore2Parser::NUMBER);
        break;
      }

      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 4);
        setState(459);
        match(ASPCore2Parser::DASH);
        setState(460);
        term();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Term__Context ------------------------------------------------------------------

ASPCore2Parser::Term__Context::Term__Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::Term__Context::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Term__Context::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}

tree::TerminalNode* ASPCore2Parser::Term__Context::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Term__Context::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Term__Context::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}


size_t ASPCore2Parser::Term__Context::getRuleIndex() const {
  return ASPCore2Parser::RuleTerm__;
}

void ASPCore2Parser::Term__Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm__(this);
}

void ASPCore2Parser::Term__Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm__(this);
}

ASPCore2Parser::Term__Context* ASPCore2Parser::term__() {
  Term__Context *_localctx = _tracker.createInstance<Term__Context>(_ctx, getState());
  enterRule(_localctx, 64, ASPCore2Parser::RuleTerm__);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(469);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(463);
        identifier();
        break;
      }

      case ASPCore2Parser::NUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(464);
        match(ASPCore2Parser::NUMBER);
        break;
      }

      case ASPCore2Parser::PARAM_OPEN: {
        enterOuterAlt(_localctx, 3);
        setState(465);
        match(ASPCore2Parser::PARAM_OPEN);
        setState(466);
        term();
        setState(467);
        match(ASPCore2Parser::PARAM_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

ASPCore2Parser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Term_Context* ASPCore2Parser::TermContext::term_() {
  return getRuleContext<ASPCore2Parser::Term_Context>(0);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::TermContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

ASPCore2Parser::ExprContext* ASPCore2Parser::TermContext::expr() {
  return getRuleContext<ASPCore2Parser::ExprContext>(0);
}


size_t ASPCore2Parser::TermContext::getRuleIndex() const {
  return ASPCore2Parser::RuleTerm;
}

void ASPCore2Parser::TermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm(this);
}

void ASPCore2Parser::TermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm(this);
}

ASPCore2Parser::TermContext* ASPCore2Parser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 66, ASPCore2Parser::RuleTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(474);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(471);
      term_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(472);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(473);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

ASPCore2Parser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::FactorContext* ASPCore2Parser::ExprContext::factor() {
  return getRuleContext<ASPCore2Parser::FactorContext>(0);
}

ASPCore2Parser::Arithop1Context* ASPCore2Parser::ExprContext::arithop1() {
  return getRuleContext<ASPCore2Parser::Arithop1Context>(0);
}

ASPCore2Parser::ExprContext* ASPCore2Parser::ExprContext::expr() {
  return getRuleContext<ASPCore2Parser::ExprContext>(0);
}


size_t ASPCore2Parser::ExprContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExpr;
}

void ASPCore2Parser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void ASPCore2Parser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}

ASPCore2Parser::ExprContext* ASPCore2Parser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 68, ASPCore2Parser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(481);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(476);
      factor();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(477);
      factor();
      setState(478);
      arithop1();
      setState(479);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

ASPCore2Parser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Term__Context* ASPCore2Parser::FactorContext::term__() {
  return getRuleContext<ASPCore2Parser::Term__Context>(0);
}

ASPCore2Parser::Arithop2Context* ASPCore2Parser::FactorContext::arithop2() {
  return getRuleContext<ASPCore2Parser::Arithop2Context>(0);
}

ASPCore2Parser::FactorContext* ASPCore2Parser::FactorContext::factor() {
  return getRuleContext<ASPCore2Parser::FactorContext>(0);
}


size_t ASPCore2Parser::FactorContext::getRuleIndex() const {
  return ASPCore2Parser::RuleFactor;
}

void ASPCore2Parser::FactorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFactor(this);
}

void ASPCore2Parser::FactorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFactor(this);
}

ASPCore2Parser::FactorContext* ASPCore2Parser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 70, ASPCore2Parser::RuleFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(488);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(483);
      term__();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(484);
      term__();
      setState(485);
      arithop2();
      setState(486);
      factor();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Basic_termContext ------------------------------------------------------------------

ASPCore2Parser::Basic_termContext::Basic_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Ground_termContext* ASPCore2Parser::Basic_termContext::ground_term() {
  return getRuleContext<ASPCore2Parser::Ground_termContext>(0);
}

ASPCore2Parser::Variable_termContext* ASPCore2Parser::Basic_termContext::variable_term() {
  return getRuleContext<ASPCore2Parser::Variable_termContext>(0);
}

ASPCore2Parser::Functional_termContext* ASPCore2Parser::Basic_termContext::functional_term() {
  return getRuleContext<ASPCore2Parser::Functional_termContext>(0);
}


size_t ASPCore2Parser::Basic_termContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBasic_term;
}

void ASPCore2Parser::Basic_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_term(this);
}

void ASPCore2Parser::Basic_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_term(this);
}

ASPCore2Parser::Basic_termContext* ASPCore2Parser::basic_term() {
  Basic_termContext *_localctx = _tracker.createInstance<Basic_termContext>(_ctx, getState());
  enterRule(_localctx, 72, ASPCore2Parser::RuleBasic_term);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(493);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(490);
      ground_term();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(491);
      variable_term();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(492);
      functional_term();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ground_termContext ------------------------------------------------------------------

ASPCore2Parser::Ground_termContext::Ground_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Ground_termContext::SYMBOLIC_CONSTANT() {
  return getToken(ASPCore2Parser::SYMBOLIC_CONSTANT, 0);
}

tree::TerminalNode* ASPCore2Parser::Ground_termContext::STRING() {
  return getToken(ASPCore2Parser::STRING, 0);
}

tree::TerminalNode* ASPCore2Parser::Ground_termContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}

tree::TerminalNode* ASPCore2Parser::Ground_termContext::DASH() {
  return getToken(ASPCore2Parser::DASH, 0);
}


size_t ASPCore2Parser::Ground_termContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGround_term;
}

void ASPCore2Parser::Ground_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGround_term(this);
}

void ASPCore2Parser::Ground_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGround_term(this);
}

ASPCore2Parser::Ground_termContext* ASPCore2Parser::ground_term() {
  Ground_termContext *_localctx = _tracker.createInstance<Ground_termContext>(_ctx, getState());
  enterRule(_localctx, 74, ASPCore2Parser::RuleGround_term);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(500);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT: {
        enterOuterAlt(_localctx, 1);
        setState(495);
        match(ASPCore2Parser::SYMBOLIC_CONSTANT);
        break;
      }

      case ASPCore2Parser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(496);
        match(ASPCore2Parser::STRING);
        break;
      }

      case ASPCore2Parser::NUMBER: {
        enterOuterAlt(_localctx, 3);
        setState(497);
        match(ASPCore2Parser::NUMBER);
        break;
      }

      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 4);
        setState(498);
        match(ASPCore2Parser::DASH);
        setState(499);
        match(ASPCore2Parser::NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_termContext ------------------------------------------------------------------

ASPCore2Parser::Variable_termContext::Variable_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Variable_termContext::VARIABLE() {
  return getToken(ASPCore2Parser::VARIABLE, 0);
}

tree::TerminalNode* ASPCore2Parser::Variable_termContext::ANON_VAR() {
  return getToken(ASPCore2Parser::ANON_VAR, 0);
}


size_t ASPCore2Parser::Variable_termContext::getRuleIndex() const {
  return ASPCore2Parser::RuleVariable_term;
}

void ASPCore2Parser::Variable_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_term(this);
}

void ASPCore2Parser::Variable_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_term(this);
}

ASPCore2Parser::Variable_termContext* ASPCore2Parser::variable_term() {
  Variable_termContext *_localctx = _tracker.createInstance<Variable_termContext>(_ctx, getState());
  enterRule(_localctx, 76, ASPCore2Parser::RuleVariable_term);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(502);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::VARIABLE

    || _la == ASPCore2Parser::ANON_VAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Functional_termContext ------------------------------------------------------------------

ASPCore2Parser::Functional_termContext::Functional_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::Functional_termContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Functional_termContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::Functional_termContext::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Functional_termContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}


size_t ASPCore2Parser::Functional_termContext::getRuleIndex() const {
  return ASPCore2Parser::RuleFunctional_term;
}

void ASPCore2Parser::Functional_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctional_term(this);
}

void ASPCore2Parser::Functional_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctional_term(this);
}

ASPCore2Parser::Functional_termContext* ASPCore2Parser::functional_term() {
  Functional_termContext *_localctx = _tracker.createInstance<Functional_termContext>(_ctx, getState());
  enterRule(_localctx, 78, ASPCore2Parser::RuleFunctional_term);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(504);
    identifier();
    setState(505);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(506);
    terms();
    setState(507);
    match(ASPCore2Parser::PARAM_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarsContext ------------------------------------------------------------------

ASPCore2Parser::VarsContext::VarsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::VarsContext::VARIABLE() {
  return getToken(ASPCore2Parser::VARIABLE, 0);
}

tree::TerminalNode* ASPCore2Parser::VarsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::VarsContext* ASPCore2Parser::VarsContext::vars() {
  return getRuleContext<ASPCore2Parser::VarsContext>(0);
}


size_t ASPCore2Parser::VarsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleVars;
}

void ASPCore2Parser::VarsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVars(this);
}

void ASPCore2Parser::VarsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVars(this);
}

ASPCore2Parser::VarsContext* ASPCore2Parser::vars() {
  VarsContext *_localctx = _tracker.createInstance<VarsContext>(_ctx, getState());
  enterRule(_localctx, 80, ASPCore2Parser::RuleVars);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(513);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(509);
      match(ASPCore2Parser::VARIABLE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(510);
      match(ASPCore2Parser::VARIABLE);
      setState(511);
      match(ASPCore2Parser::COMMA);
      setState(512);
      vars();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

ASPCore2Parser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::IdentifierContext::SYMBOLIC_CONSTANT() {
  return getToken(ASPCore2Parser::SYMBOLIC_CONSTANT, 0);
}

tree::TerminalNode* ASPCore2Parser::IdentifierContext::STRING() {
  return getToken(ASPCore2Parser::STRING, 0);
}

tree::TerminalNode* ASPCore2Parser::IdentifierContext::VARIABLE() {
  return getToken(ASPCore2Parser::VARIABLE, 0);
}


size_t ASPCore2Parser::IdentifierContext::getRuleIndex() const {
  return ASPCore2Parser::RuleIdentifier;
}

void ASPCore2Parser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void ASPCore2Parser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 82, ASPCore2Parser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(515);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ASPCore2Parser::SYMBOLIC_CONSTANT)
      | (1ULL << ASPCore2Parser::VARIABLE)
      | (1ULL << ASPCore2Parser::STRING))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectiveContext ------------------------------------------------------------------

ASPCore2Parser::DirectiveContext::DirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::DirectiveContext::DIRECTIVE_NAME() {
  return getToken(ASPCore2Parser::DIRECTIVE_NAME, 0);
}

tree::TerminalNode* ASPCore2Parser::DirectiveContext::DIRECTIVE_VALUE() {
  return getToken(ASPCore2Parser::DIRECTIVE_VALUE, 0);
}


size_t ASPCore2Parser::DirectiveContext::getRuleIndex() const {
  return ASPCore2Parser::RuleDirective;
}

void ASPCore2Parser::DirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirective(this);
}

void ASPCore2Parser::DirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirective(this);
}

ASPCore2Parser::DirectiveContext* ASPCore2Parser::directive() {
  DirectiveContext *_localctx = _tracker.createInstance<DirectiveContext>(_ctx, getState());
  enterRule(_localctx, 84, ASPCore2Parser::RuleDirective);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    match(ASPCore2Parser::DIRECTIVE_NAME);
    setState(518);
    match(ASPCore2Parser::DIRECTIVE_VALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryContext ------------------------------------------------------------------

ASPCore2Parser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::AtomContext* ASPCore2Parser::QueryContext::atom() {
  return getRuleContext<ASPCore2Parser::AtomContext>(0);
}

tree::TerminalNode* ASPCore2Parser::QueryContext::QUERY_MARK() {
  return getToken(ASPCore2Parser::QUERY_MARK, 0);
}


size_t ASPCore2Parser::QueryContext::getRuleIndex() const {
  return ASPCore2Parser::RuleQuery;
}

void ASPCore2Parser::QueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery(this);
}

void ASPCore2Parser::QueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery(this);
}

ASPCore2Parser::QueryContext* ASPCore2Parser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 86, ASPCore2Parser::RuleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(520);
    atom();
    setState(521);
    match(ASPCore2Parser::QUERY_MARK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lower_guard_compare_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Lower_guard_compare_aggregateContext::Lower_guard_compare_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::Lower_guard_compare_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

ASPCore2Parser::CompareopContext* ASPCore2Parser::Lower_guard_compare_aggregateContext::compareop() {
  return getRuleContext<ASPCore2Parser::CompareopContext>(0);
}


size_t ASPCore2Parser::Lower_guard_compare_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLower_guard_compare_aggregate;
}

void ASPCore2Parser::Lower_guard_compare_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLower_guard_compare_aggregate(this);
}

void ASPCore2Parser::Lower_guard_compare_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLower_guard_compare_aggregate(this);
}

ASPCore2Parser::Lower_guard_compare_aggregateContext* ASPCore2Parser::lower_guard_compare_aggregate() {
  Lower_guard_compare_aggregateContext *_localctx = _tracker.createInstance<Lower_guard_compare_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 88, ASPCore2Parser::RuleLower_guard_compare_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(523);
    term();
    setState(524);
    compareop();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Upper_guard_compare_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Upper_guard_compare_aggregateContext::Upper_guard_compare_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::CompareopContext* ASPCore2Parser::Upper_guard_compare_aggregateContext::compareop() {
  return getRuleContext<ASPCore2Parser::CompareopContext>(0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Upper_guard_compare_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Upper_guard_compare_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleUpper_guard_compare_aggregate;
}

void ASPCore2Parser::Upper_guard_compare_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpper_guard_compare_aggregate(this);
}

void ASPCore2Parser::Upper_guard_compare_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpper_guard_compare_aggregate(this);
}

ASPCore2Parser::Upper_guard_compare_aggregateContext* ASPCore2Parser::upper_guard_compare_aggregate() {
  Upper_guard_compare_aggregateContext *_localctx = _tracker.createInstance<Upper_guard_compare_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 90, ASPCore2Parser::RuleUpper_guard_compare_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(526);
    compareop();
    setState(527);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compare_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Compare_aggregateContext::Compare_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Lower_guard_compare_aggregateContext* ASPCore2Parser::Compare_aggregateContext::lower_guard_compare_aggregate() {
  return getRuleContext<ASPCore2Parser::Lower_guard_compare_aggregateContext>(0);
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::Compare_aggregateContext::aggregate() {
  return getRuleContext<ASPCore2Parser::AggregateContext>(0);
}

ASPCore2Parser::Upper_guard_compare_aggregateContext* ASPCore2Parser::Compare_aggregateContext::upper_guard_compare_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_compare_aggregateContext>(0);
}


size_t ASPCore2Parser::Compare_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleCompare_aggregate;
}

void ASPCore2Parser::Compare_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompare_aggregate(this);
}

void ASPCore2Parser::Compare_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompare_aggregate(this);
}

ASPCore2Parser::Compare_aggregateContext* ASPCore2Parser::compare_aggregate() {
  Compare_aggregateContext *_localctx = _tracker.createInstance<Compare_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 92, ASPCore2Parser::RuleCompare_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(535);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING:
      case ASPCore2Parser::NUMBER:
      case ASPCore2Parser::DASH:
      case ASPCore2Parser::PARAM_OPEN:
      case ASPCore2Parser::ANON_VAR: {
        enterOuterAlt(_localctx, 1);
        setState(529);
        lower_guard_compare_aggregate();
        setState(530);
        aggregate();
        break;
      }

      case ASPCore2Parser::AGGR_COUNT:
      case ASPCore2Parser::AGGR_MAX:
      case ASPCore2Parser::AGGR_MIN:
      case ASPCore2Parser::AGGR_SUM: {
        enterOuterAlt(_localctx, 2);
        setState(532);
        aggregate();
        setState(533);
        upper_guard_compare_aggregate();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lower_guard_leftward_left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::Lower_guard_leftward_left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

ASPCore2Parser::LeftwardopContext* ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::leftwardop() {
  return getRuleContext<ASPCore2Parser::LeftwardopContext>(0);
}


size_t ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLower_guard_leftward_left_aggregate;
}

void ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLower_guard_leftward_left_aggregate(this);
}

void ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLower_guard_leftward_left_aggregate(this);
}

ASPCore2Parser::Lower_guard_leftward_left_aggregateContext* ASPCore2Parser::lower_guard_leftward_left_aggregate() {
  Lower_guard_leftward_left_aggregateContext *_localctx = _tracker.createInstance<Lower_guard_leftward_left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 94, ASPCore2Parser::RuleLower_guard_leftward_left_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(537);
    term();
    setState(538);
    leftwardop();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Leftward_left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Leftward_left_aggregateContext::Leftward_left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Lower_guard_leftward_left_aggregateContext* ASPCore2Parser::Leftward_left_aggregateContext::lower_guard_leftward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Lower_guard_leftward_left_aggregateContext>(0);
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::Leftward_left_aggregateContext::aggregate() {
  return getRuleContext<ASPCore2Parser::AggregateContext>(0);
}


size_t ASPCore2Parser::Leftward_left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLeftward_left_aggregate;
}

void ASPCore2Parser::Leftward_left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftward_left_aggregate(this);
}

void ASPCore2Parser::Leftward_left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftward_left_aggregate(this);
}

ASPCore2Parser::Leftward_left_aggregateContext* ASPCore2Parser::leftward_left_aggregate() {
  Leftward_left_aggregateContext *_localctx = _tracker.createInstance<Leftward_left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 96, ASPCore2Parser::RuleLeftward_left_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(540);
    lower_guard_leftward_left_aggregate();
    setState(541);
    aggregate();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Left_aggregateContext::Left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Leftward_left_aggregateContext* ASPCore2Parser::Left_aggregateContext::leftward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Leftward_left_aggregateContext>(0);
}

ASPCore2Parser::Rightward_left_aggregateContext* ASPCore2Parser::Left_aggregateContext::rightward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Rightward_left_aggregateContext>(0);
}


size_t ASPCore2Parser::Left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLeft_aggregate;
}

void ASPCore2Parser::Left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeft_aggregate(this);
}

void ASPCore2Parser::Left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeft_aggregate(this);
}

ASPCore2Parser::Left_aggregateContext* ASPCore2Parser::left_aggregate() {
  Left_aggregateContext *_localctx = _tracker.createInstance<Left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 98, ASPCore2Parser::RuleLeft_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(545);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(543);
      leftward_left_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(544);
      rightward_left_aggregate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lower_guard_rightward_left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::Lower_guard_rightward_left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

ASPCore2Parser::RightwardopContext* ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::rightwardop() {
  return getRuleContext<ASPCore2Parser::RightwardopContext>(0);
}


size_t ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLower_guard_rightward_left_aggregate;
}

void ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLower_guard_rightward_left_aggregate(this);
}

void ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLower_guard_rightward_left_aggregate(this);
}

ASPCore2Parser::Lower_guard_rightward_left_aggregateContext* ASPCore2Parser::lower_guard_rightward_left_aggregate() {
  Lower_guard_rightward_left_aggregateContext *_localctx = _tracker.createInstance<Lower_guard_rightward_left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 100, ASPCore2Parser::RuleLower_guard_rightward_left_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(547);
    term();
    setState(548);
    rightwardop();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rightward_left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Rightward_left_aggregateContext::Rightward_left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Lower_guard_rightward_left_aggregateContext* ASPCore2Parser::Rightward_left_aggregateContext::lower_guard_rightward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Lower_guard_rightward_left_aggregateContext>(0);
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::Rightward_left_aggregateContext::aggregate() {
  return getRuleContext<ASPCore2Parser::AggregateContext>(0);
}


size_t ASPCore2Parser::Rightward_left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRightward_left_aggregate;
}

void ASPCore2Parser::Rightward_left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRightward_left_aggregate(this);
}

void ASPCore2Parser::Rightward_left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRightward_left_aggregate(this);
}

ASPCore2Parser::Rightward_left_aggregateContext* ASPCore2Parser::rightward_left_aggregate() {
  Rightward_left_aggregateContext *_localctx = _tracker.createInstance<Rightward_left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 102, ASPCore2Parser::RuleRightward_left_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(550);
    lower_guard_rightward_left_aggregate();
    setState(551);
    aggregate();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Upper_guard_leftward_right_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::Upper_guard_leftward_right_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::LeftwardopContext* ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::leftwardop() {
  return getRuleContext<ASPCore2Parser::LeftwardopContext>(0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleUpper_guard_leftward_right_aggregate;
}

void ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpper_guard_leftward_right_aggregate(this);
}

void ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpper_guard_leftward_right_aggregate(this);
}

ASPCore2Parser::Upper_guard_leftward_right_aggregateContext* ASPCore2Parser::upper_guard_leftward_right_aggregate() {
  Upper_guard_leftward_right_aggregateContext *_localctx = _tracker.createInstance<Upper_guard_leftward_right_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 104, ASPCore2Parser::RuleUpper_guard_leftward_right_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(553);
    leftwardop();
    setState(554);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Upper_guard_rightward_right_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::Upper_guard_rightward_right_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::RightwardopContext* ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::rightwardop() {
  return getRuleContext<ASPCore2Parser::RightwardopContext>(0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleUpper_guard_rightward_right_aggregate;
}

void ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpper_guard_rightward_right_aggregate(this);
}

void ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpper_guard_rightward_right_aggregate(this);
}

ASPCore2Parser::Upper_guard_rightward_right_aggregateContext* ASPCore2Parser::upper_guard_rightward_right_aggregate() {
  Upper_guard_rightward_right_aggregateContext *_localctx = _tracker.createInstance<Upper_guard_rightward_right_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 106, ASPCore2Parser::RuleUpper_guard_rightward_right_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(556);
    rightwardop();
    setState(557);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Right_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Right_aggregateContext::Right_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::Right_aggregateContext::aggregate() {
  return getRuleContext<ASPCore2Parser::AggregateContext>(0);
}

ASPCore2Parser::Upper_guard_leftward_right_aggregateContext* ASPCore2Parser::Right_aggregateContext::upper_guard_leftward_right_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_leftward_right_aggregateContext>(0);
}

ASPCore2Parser::Upper_guard_rightward_right_aggregateContext* ASPCore2Parser::Right_aggregateContext::upper_guard_rightward_right_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_rightward_right_aggregateContext>(0);
}


size_t ASPCore2Parser::Right_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRight_aggregate;
}

void ASPCore2Parser::Right_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRight_aggregate(this);
}

void ASPCore2Parser::Right_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRight_aggregate(this);
}

ASPCore2Parser::Right_aggregateContext* ASPCore2Parser::right_aggregate() {
  Right_aggregateContext *_localctx = _tracker.createInstance<Right_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 108, ASPCore2Parser::RuleRight_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(565);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(559);
      aggregate();
      setState(560);
      upper_guard_leftward_right_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(562);
      aggregate();
      setState(563);
      upper_guard_rightward_right_aggregate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_atomContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_atomContext::Aggregate_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Left_aggregateContext* ASPCore2Parser::Aggregate_atomContext::left_aggregate() {
  return getRuleContext<ASPCore2Parser::Left_aggregateContext>(0);
}

ASPCore2Parser::Right_aggregateContext* ASPCore2Parser::Aggregate_atomContext::right_aggregate() {
  return getRuleContext<ASPCore2Parser::Right_aggregateContext>(0);
}

ASPCore2Parser::Compare_aggregateContext* ASPCore2Parser::Aggregate_atomContext::compare_aggregate() {
  return getRuleContext<ASPCore2Parser::Compare_aggregateContext>(0);
}

ASPCore2Parser::Leftward_left_aggregateContext* ASPCore2Parser::Aggregate_atomContext::leftward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Leftward_left_aggregateContext>(0);
}

ASPCore2Parser::Upper_guard_leftward_right_aggregateContext* ASPCore2Parser::Aggregate_atomContext::upper_guard_leftward_right_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_leftward_right_aggregateContext>(0);
}

ASPCore2Parser::Rightward_left_aggregateContext* ASPCore2Parser::Aggregate_atomContext::rightward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Rightward_left_aggregateContext>(0);
}

ASPCore2Parser::Upper_guard_rightward_right_aggregateContext* ASPCore2Parser::Aggregate_atomContext::upper_guard_rightward_right_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_rightward_right_aggregateContext>(0);
}


size_t ASPCore2Parser::Aggregate_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_atom;
}

void ASPCore2Parser::Aggregate_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_atom(this);
}

void ASPCore2Parser::Aggregate_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_atom(this);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::aggregate_atom() {
  Aggregate_atomContext *_localctx = _tracker.createInstance<Aggregate_atomContext>(_ctx, getState());
  enterRule(_localctx, 110, ASPCore2Parser::RuleAggregate_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(576);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(567);
      left_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(568);
      right_aggregate();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(569);
      compare_aggregate();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(570);
      leftward_left_aggregate();
      setState(571);
      upper_guard_leftward_right_aggregate();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(573);
      rightward_left_aggregate();
      setState(574);
      upper_guard_rightward_right_aggregate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeftwardopContext ------------------------------------------------------------------

ASPCore2Parser::LeftwardopContext::LeftwardopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::LeftwardopContext::LESS() {
  return getToken(ASPCore2Parser::LESS, 0);
}

tree::TerminalNode* ASPCore2Parser::LeftwardopContext::LESS_OR_EQ() {
  return getToken(ASPCore2Parser::LESS_OR_EQ, 0);
}


size_t ASPCore2Parser::LeftwardopContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLeftwardop;
}

void ASPCore2Parser::LeftwardopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftwardop(this);
}

void ASPCore2Parser::LeftwardopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftwardop(this);
}

ASPCore2Parser::LeftwardopContext* ASPCore2Parser::leftwardop() {
  LeftwardopContext *_localctx = _tracker.createInstance<LeftwardopContext>(_ctx, getState());
  enterRule(_localctx, 112, ASPCore2Parser::RuleLeftwardop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(578);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::LESS

    || _la == ASPCore2Parser::LESS_OR_EQ)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RightwardopContext ------------------------------------------------------------------

ASPCore2Parser::RightwardopContext::RightwardopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::RightwardopContext::GREATER() {
  return getToken(ASPCore2Parser::GREATER, 0);
}

tree::TerminalNode* ASPCore2Parser::RightwardopContext::GREATER_OR_EQ() {
  return getToken(ASPCore2Parser::GREATER_OR_EQ, 0);
}


size_t ASPCore2Parser::RightwardopContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRightwardop;
}

void ASPCore2Parser::RightwardopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRightwardop(this);
}

void ASPCore2Parser::RightwardopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRightwardop(this);
}

ASPCore2Parser::RightwardopContext* ASPCore2Parser::rightwardop() {
  RightwardopContext *_localctx = _tracker.createInstance<RightwardopContext>(_ctx, getState());
  enterRule(_localctx, 114, ASPCore2Parser::RuleRightwardop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(580);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::GREATER

    || _la == ASPCore2Parser::GREATER_OR_EQ)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateContext ------------------------------------------------------------------

ASPCore2Parser::AggregateContext::AggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Aggregate_functionContext* ASPCore2Parser::AggregateContext::aggregate_function() {
  return getRuleContext<ASPCore2Parser::Aggregate_functionContext>(0);
}

tree::TerminalNode* ASPCore2Parser::AggregateContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Aggregate_elementsContext* ASPCore2Parser::AggregateContext::aggregate_elements() {
  return getRuleContext<ASPCore2Parser::Aggregate_elementsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::AggregateContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}


size_t ASPCore2Parser::AggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate;
}

void ASPCore2Parser::AggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate(this);
}

void ASPCore2Parser::AggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate(this);
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::aggregate() {
  AggregateContext *_localctx = _tracker.createInstance<AggregateContext>(_ctx, getState());
  enterRule(_localctx, 116, ASPCore2Parser::RuleAggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(591);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(582);
      aggregate_function();
      setState(583);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(584);
      aggregate_elements();
      setState(585);
      match(ASPCore2Parser::CURLY_CLOSE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(587);
      aggregate_function();
      setState(588);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(589);
      match(ASPCore2Parser::CURLY_CLOSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_elementsContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_elementsContext::Aggregate_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Aggregate_elementContext* ASPCore2Parser::Aggregate_elementsContext::aggregate_element() {
  return getRuleContext<ASPCore2Parser::Aggregate_elementContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_elementsContext::SEMICOLON() {
  return getToken(ASPCore2Parser::SEMICOLON, 0);
}

ASPCore2Parser::Aggregate_elementsContext* ASPCore2Parser::Aggregate_elementsContext::aggregate_elements() {
  return getRuleContext<ASPCore2Parser::Aggregate_elementsContext>(0);
}


size_t ASPCore2Parser::Aggregate_elementsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_elements;
}

void ASPCore2Parser::Aggregate_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_elements(this);
}

void ASPCore2Parser::Aggregate_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_elements(this);
}

ASPCore2Parser::Aggregate_elementsContext* ASPCore2Parser::aggregate_elements() {
  Aggregate_elementsContext *_localctx = _tracker.createInstance<Aggregate_elementsContext>(_ctx, getState());
  enterRule(_localctx, 118, ASPCore2Parser::RuleAggregate_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(598);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(593);
      aggregate_element();
      setState(594);
      match(ASPCore2Parser::SEMICOLON);
      setState(595);
      aggregate_elements();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(597);
      aggregate_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_elementContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_elementContext::Aggregate_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Basic_termsContext* ASPCore2Parser::Aggregate_elementContext::basic_terms() {
  return getRuleContext<ASPCore2Parser::Basic_termsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_elementContext::COLON() {
  return getToken(ASPCore2Parser::COLON, 0);
}

ASPCore2Parser::Naf_literalsContext* ASPCore2Parser::Aggregate_elementContext::naf_literals() {
  return getRuleContext<ASPCore2Parser::Naf_literalsContext>(0);
}


size_t ASPCore2Parser::Aggregate_elementContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_element;
}

void ASPCore2Parser::Aggregate_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_element(this);
}

void ASPCore2Parser::Aggregate_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_element(this);
}

ASPCore2Parser::Aggregate_elementContext* ASPCore2Parser::aggregate_element() {
  Aggregate_elementContext *_localctx = _tracker.createInstance<Aggregate_elementContext>(_ctx, getState());
  enterRule(_localctx, 120, ASPCore2Parser::RuleAggregate_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(600);
    basic_terms();
    setState(601);
    match(ASPCore2Parser::COLON);
    setState(602);
    naf_literals();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_functionContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_functionContext::Aggregate_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Aggregate_functionContext::AGGR_COUNT() {
  return getToken(ASPCore2Parser::AGGR_COUNT, 0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_functionContext::AGGR_MAX() {
  return getToken(ASPCore2Parser::AGGR_MAX, 0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_functionContext::AGGR_MIN() {
  return getToken(ASPCore2Parser::AGGR_MIN, 0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_functionContext::AGGR_SUM() {
  return getToken(ASPCore2Parser::AGGR_SUM, 0);
}


size_t ASPCore2Parser::Aggregate_functionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_function;
}

void ASPCore2Parser::Aggregate_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_function(this);
}

void ASPCore2Parser::Aggregate_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_function(this);
}

ASPCore2Parser::Aggregate_functionContext* ASPCore2Parser::aggregate_function() {
  Aggregate_functionContext *_localctx = _tracker.createInstance<Aggregate_functionContext>(_ctx, getState());
  enterRule(_localctx, 122, ASPCore2Parser::RuleAggregate_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(604);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ASPCore2Parser::AGGR_COUNT)
      | (1ULL << ASPCore2Parser::AGGR_MAX)
      | (1ULL << ASPCore2Parser::AGGR_MIN)
      | (1ULL << ASPCore2Parser::AGGR_SUM))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_globalContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_globalContext::Annotation_globalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_global_orderingContext* ASPCore2Parser::Annotation_globalContext::annotation_global_ordering() {
  return getRuleContext<ASPCore2Parser::Annotation_global_orderingContext>(0);
}

ASPCore2Parser::Annotation_global_atom_indexedContext* ASPCore2Parser::Annotation_globalContext::annotation_global_atom_indexed() {
  return getRuleContext<ASPCore2Parser::Annotation_global_atom_indexedContext>(0);
}

ASPCore2Parser::Annotation_global_partial_orderContext* ASPCore2Parser::Annotation_globalContext::annotation_global_partial_order() {
  return getRuleContext<ASPCore2Parser::Annotation_global_partial_orderContext>(0);
}

ASPCore2Parser::Annotation_global_extatom_conversionContext* ASPCore2Parser::Annotation_globalContext::annotation_global_extatom_conversion() {
  return getRuleContext<ASPCore2Parser::Annotation_global_extatom_conversionContext>(0);
}

ASPCore2Parser::Annotation_global_wasp_heuristicContext* ASPCore2Parser::Annotation_globalContext::annotation_global_wasp_heuristic() {
  return getRuleContext<ASPCore2Parser::Annotation_global_wasp_heuristicContext>(0);
}

ASPCore2Parser::Annotation_global_wasp_propagatorContext* ASPCore2Parser::Annotation_globalContext::annotation_global_wasp_propagator() {
  return getRuleContext<ASPCore2Parser::Annotation_global_wasp_propagatorContext>(0);
}


size_t ASPCore2Parser::Annotation_globalContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global;
}

void ASPCore2Parser::Annotation_globalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global(this);
}

void ASPCore2Parser::Annotation_globalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global(this);
}

ASPCore2Parser::Annotation_globalContext* ASPCore2Parser::annotation_global() {
  Annotation_globalContext *_localctx = _tracker.createInstance<Annotation_globalContext>(_ctx, getState());
  enterRule(_localctx, 124, ASPCore2Parser::RuleAnnotation_global);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(612);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING: {
        enterOuterAlt(_localctx, 1);
        setState(606);
        annotation_global_ordering();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED: {
        enterOuterAlt(_localctx, 2);
        setState(607);
        annotation_global_atom_indexed();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER: {
        enterOuterAlt(_localctx, 3);
        setState(608);
        annotation_global_partial_order();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION: {
        enterOuterAlt(_localctx, 4);
        setState(609);
        annotation_global_extatom_conversion();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC: {
        enterOuterAlt(_localctx, 5);
        setState(610);
        annotation_global_wasp_heuristic();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR: {
        enterOuterAlt(_localctx, 6);
        setState(611);
        annotation_global_wasp_propagator();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotations_ruleContext ------------------------------------------------------------------

ASPCore2Parser::Annotations_ruleContext::Annotations_ruleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_ruleContext* ASPCore2Parser::Annotations_ruleContext::annotation_rule() {
  return getRuleContext<ASPCore2Parser::Annotation_ruleContext>(0);
}

ASPCore2Parser::Annotations_ruleContext* ASPCore2Parser::Annotations_ruleContext::annotations_rule() {
  return getRuleContext<ASPCore2Parser::Annotations_ruleContext>(0);
}


size_t ASPCore2Parser::Annotations_ruleContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotations_rule;
}

void ASPCore2Parser::Annotations_ruleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotations_rule(this);
}

void ASPCore2Parser::Annotations_ruleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotations_rule(this);
}

ASPCore2Parser::Annotations_ruleContext* ASPCore2Parser::annotations_rule() {
  Annotations_ruleContext *_localctx = _tracker.createInstance<Annotations_ruleContext>(_ctx, getState());
  enterRule(_localctx, 126, ASPCore2Parser::RuleAnnotations_rule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(618);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(614);
      annotation_rule();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(615);
      annotation_rule();
      setState(616);
      annotations_rule();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_ruleContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_ruleContext::Annotation_ruleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_rule_orderingContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_ordering() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_orderingContext>(0);
}

ASPCore2Parser::Annotation_rule_atom_indexedContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_atom_indexed() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_atom_indexedContext>(0);
}

ASPCore2Parser::Annotation_rule_partial_orderContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_partial_order() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_partial_orderContext>(0);
}

ASPCore2Parser::Annotation_rule_projectionContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_projection() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_projectionContext>(0);
}

ASPCore2Parser::Annotation_rule_rewriting_arithContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_rewriting_arith() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_rewriting_arithContext>(0);
}

ASPCore2Parser::Annotation_rule_align_substitutionsContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_align_substitutions() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_align_substitutionsContext>(0);
}

ASPCore2Parser::Annotation_rule_look_aheadContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_look_ahead() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_look_aheadContext>(0);
}

ASPCore2Parser::Annotation_rule_to_decomposeContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_to_decompose() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_to_decomposeContext>(0);
}

ASPCore2Parser::Annotation_rule_to_not_decomposeContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_to_not_decompose() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_to_not_decomposeContext>(0);
}


size_t ASPCore2Parser::Annotation_ruleContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule;
}

void ASPCore2Parser::Annotation_ruleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule(this);
}

void ASPCore2Parser::Annotation_ruleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule(this);
}

ASPCore2Parser::Annotation_ruleContext* ASPCore2Parser::annotation_rule() {
  Annotation_ruleContext *_localctx = _tracker.createInstance<Annotation_ruleContext>(_ctx, getState());
  enterRule(_localctx, 128, ASPCore2Parser::RuleAnnotation_rule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(629);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::ANNOTATION_RULE_ORDERING: {
        enterOuterAlt(_localctx, 1);
        setState(620);
        annotation_rule_ordering();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED: {
        enterOuterAlt(_localctx, 2);
        setState(621);
        annotation_rule_atom_indexed();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER: {
        enterOuterAlt(_localctx, 3);
        setState(622);
        annotation_rule_partial_order();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_PROJECTION: {
        enterOuterAlt(_localctx, 4);
        setState(623);
        annotation_rule_projection();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH: {
        enterOuterAlt(_localctx, 5);
        setState(624);
        annotation_rule_rewriting_arith();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS: {
        enterOuterAlt(_localctx, 6);
        setState(625);
        annotation_rule_align_substitutions();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD: {
        enterOuterAlt(_localctx, 7);
        setState(626);
        annotation_rule_look_ahead();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE: {
        enterOuterAlt(_localctx, 8);
        setState(627);
        annotation_rule_to_decompose();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE: {
        enterOuterAlt(_localctx, 9);
        setState(628);
        annotation_rule_to_not_decompose();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_to_decomposeContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_to_decomposeContext::Annotation_rule_to_decomposeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_decomposeContext::ANNOTATION_RULE_TO_DECOMPOSE() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_decomposeContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_decomposeContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_decomposeContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_to_decomposeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_to_decompose;
}

void ASPCore2Parser::Annotation_rule_to_decomposeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_to_decompose(this);
}

void ASPCore2Parser::Annotation_rule_to_decomposeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_to_decompose(this);
}

ASPCore2Parser::Annotation_rule_to_decomposeContext* ASPCore2Parser::annotation_rule_to_decompose() {
  Annotation_rule_to_decomposeContext *_localctx = _tracker.createInstance<Annotation_rule_to_decomposeContext>(_ctx, getState());
  enterRule(_localctx, 130, ASPCore2Parser::RuleAnnotation_rule_to_decompose);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(637);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(631);
      match(ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE);
      setState(632);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(633);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(634);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(635);
      match(ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE);
      setState(636);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_to_not_decomposeContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_to_not_decomposeContext::Annotation_rule_to_not_decomposeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_not_decomposeContext::ANNOTATION_RULE_TO_NOT_DECOMPOSE() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_not_decomposeContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_not_decomposeContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_not_decomposeContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_to_not_decomposeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_to_not_decompose;
}

void ASPCore2Parser::Annotation_rule_to_not_decomposeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_to_not_decompose(this);
}

void ASPCore2Parser::Annotation_rule_to_not_decomposeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_to_not_decompose(this);
}

ASPCore2Parser::Annotation_rule_to_not_decomposeContext* ASPCore2Parser::annotation_rule_to_not_decompose() {
  Annotation_rule_to_not_decomposeContext *_localctx = _tracker.createInstance<Annotation_rule_to_not_decomposeContext>(_ctx, getState());
  enterRule(_localctx, 132, ASPCore2Parser::RuleAnnotation_rule_to_not_decompose);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(645);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(639);
      match(ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE);
      setState(640);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(641);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(642);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(643);
      match(ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE);
      setState(644);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_orderingContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_orderingContext::Annotation_rule_orderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::ANNOTATION_RULE_ORDERING() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_ORDERING, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::ANNOTATION_ORDERING_VALUE() {
  return getToken(ASPCore2Parser::ANNOTATION_ORDERING_VALUE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::EQUAL() {
  return getToken(ASPCore2Parser::EQUAL, 0);
}

ASPCore2Parser::Rule_ordering_typeContext* ASPCore2Parser::Annotation_rule_orderingContext::rule_ordering_type() {
  return getRuleContext<ASPCore2Parser::Rule_ordering_typeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_orderingContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_ordering;
}

void ASPCore2Parser::Annotation_rule_orderingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_ordering(this);
}

void ASPCore2Parser::Annotation_rule_orderingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_ordering(this);
}

ASPCore2Parser::Annotation_rule_orderingContext* ASPCore2Parser::annotation_rule_ordering() {
  Annotation_rule_orderingContext *_localctx = _tracker.createInstance<Annotation_rule_orderingContext>(_ctx, getState());
  enterRule(_localctx, 134, ASPCore2Parser::RuleAnnotation_rule_ordering);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(661);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(647);
      match(ASPCore2Parser::ANNOTATION_RULE_ORDERING);
      setState(648);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(649);
      match(ASPCore2Parser::ANNOTATION_ORDERING_VALUE);
      setState(650);
      match(ASPCore2Parser::EQUAL);
      setState(651);
      rule_ordering_type();
      setState(652);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(653);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(655);
      match(ASPCore2Parser::ANNOTATION_RULE_ORDERING);
      setState(656);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(657);
      rule_ordering_type();
      setState(658);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(659);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_orderingContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_orderingContext::Annotation_global_orderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::ANNOTATION_GLOBAL_ORDERING() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::ANNOTATION_ORDERING_VALUE() {
  return getToken(ASPCore2Parser::ANNOTATION_ORDERING_VALUE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::EQUAL() {
  return getToken(ASPCore2Parser::EQUAL, 0);
}

ASPCore2Parser::Global_ordering_typeContext* ASPCore2Parser::Annotation_global_orderingContext::global_ordering_type() {
  return getRuleContext<ASPCore2Parser::Global_ordering_typeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_orderingContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_ordering;
}

void ASPCore2Parser::Annotation_global_orderingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_ordering(this);
}

void ASPCore2Parser::Annotation_global_orderingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_ordering(this);
}

ASPCore2Parser::Annotation_global_orderingContext* ASPCore2Parser::annotation_global_ordering() {
  Annotation_global_orderingContext *_localctx = _tracker.createInstance<Annotation_global_orderingContext>(_ctx, getState());
  enterRule(_localctx, 136, ASPCore2Parser::RuleAnnotation_global_ordering);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(677);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(663);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING);
      setState(664);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(665);
      match(ASPCore2Parser::ANNOTATION_ORDERING_VALUE);
      setState(666);
      match(ASPCore2Parser::EQUAL);
      setState(667);
      global_ordering_type();
      setState(668);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(669);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(671);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING);
      setState(672);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(673);
      global_ordering_type();
      setState(674);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(675);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_extatom_conversionContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_extatom_conversionContext::Annotation_global_extatom_conversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::ANNOTATION_GLOBAL_EXTATOM_CONVERSION() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::ANNOTATION_EXTATOM_PREDICATE() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_PREDICATE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_extatom_conversionContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Annotation_extpredicateContext* ASPCore2Parser::Annotation_global_extatom_conversionContext::annotation_extpredicate() {
  return getRuleContext<ASPCore2Parser::Annotation_extpredicateContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::ANNOTATION_EXTATOM_TYPE() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE, 0);
}

ASPCore2Parser::Extatom_conv_typesContext* ASPCore2Parser::Annotation_global_extatom_conversionContext::extatom_conv_types() {
  return getRuleContext<ASPCore2Parser::Extatom_conv_typesContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_extatom_conversionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_extatom_conversion;
}

void ASPCore2Parser::Annotation_global_extatom_conversionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_extatom_conversion(this);
}

void ASPCore2Parser::Annotation_global_extatom_conversionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_extatom_conversion(this);
}

ASPCore2Parser::Annotation_global_extatom_conversionContext* ASPCore2Parser::annotation_global_extatom_conversion() {
  Annotation_global_extatom_conversionContext *_localctx = _tracker.createInstance<Annotation_global_extatom_conversionContext>(_ctx, getState());
  enterRule(_localctx, 138, ASPCore2Parser::RuleAnnotation_global_extatom_conversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(679);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION);
    setState(680);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(681);
    match(ASPCore2Parser::ANNOTATION_EXTATOM_PREDICATE);
    setState(682);
    match(ASPCore2Parser::EQUAL);
    setState(683);
    annotation_extpredicate();
    setState(684);
    match(ASPCore2Parser::COMMA);
    setState(685);
    match(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE);
    setState(686);
    match(ASPCore2Parser::EQUAL);
    setState(687);
    extatom_conv_types();
    setState(688);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(689);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_extpredicateContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_extpredicateContext::Annotation_extpredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_extpredicateContext::AMPERSAND() {
  return getToken(ASPCore2Parser::AMPERSAND, 0);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::Annotation_extpredicateContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}


size_t ASPCore2Parser::Annotation_extpredicateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_extpredicate;
}

void ASPCore2Parser::Annotation_extpredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_extpredicate(this);
}

void ASPCore2Parser::Annotation_extpredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_extpredicate(this);
}

ASPCore2Parser::Annotation_extpredicateContext* ASPCore2Parser::annotation_extpredicate() {
  Annotation_extpredicateContext *_localctx = _tracker.createInstance<Annotation_extpredicateContext>(_ctx, getState());
  enterRule(_localctx, 140, ASPCore2Parser::RuleAnnotation_extpredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(691);
    match(ASPCore2Parser::AMPERSAND);
    setState(692);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extatom_conv_typesContext ------------------------------------------------------------------

ASPCore2Parser::Extatom_conv_typesContext::Extatom_conv_typesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Extatom_conv_typeContext* ASPCore2Parser::Extatom_conv_typesContext::extatom_conv_type() {
  return getRuleContext<ASPCore2Parser::Extatom_conv_typeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typesContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Extatom_conv_typesContext* ASPCore2Parser::Extatom_conv_typesContext::extatom_conv_types() {
  return getRuleContext<ASPCore2Parser::Extatom_conv_typesContext>(0);
}


size_t ASPCore2Parser::Extatom_conv_typesContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExtatom_conv_types;
}

void ASPCore2Parser::Extatom_conv_typesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtatom_conv_types(this);
}

void ASPCore2Parser::Extatom_conv_typesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtatom_conv_types(this);
}

ASPCore2Parser::Extatom_conv_typesContext* ASPCore2Parser::extatom_conv_types() {
  Extatom_conv_typesContext *_localctx = _tracker.createInstance<Extatom_conv_typesContext>(_ctx, getState());
  enterRule(_localctx, 142, ASPCore2Parser::RuleExtatom_conv_types);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(699);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(694);
      extatom_conv_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(695);
      extatom_conv_type();
      setState(696);
      match(ASPCore2Parser::COMMA);
      setState(697);
      extatom_conv_types();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extatom_conv_typeContext ------------------------------------------------------------------

ASPCore2Parser::Extatom_conv_typeContext::Extatom_conv_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_QCONST() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_QCONST, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_CONST() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_CONST, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_U_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_U_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_UT_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_UT_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_UR_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_UR_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_T_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_T_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_R_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_R_INT, 0);
}


size_t ASPCore2Parser::Extatom_conv_typeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExtatom_conv_type;
}

void ASPCore2Parser::Extatom_conv_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtatom_conv_type(this);
}

void ASPCore2Parser::Extatom_conv_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtatom_conv_type(this);
}

ASPCore2Parser::Extatom_conv_typeContext* ASPCore2Parser::extatom_conv_type() {
  Extatom_conv_typeContext *_localctx = _tracker.createInstance<Extatom_conv_typeContext>(_ctx, getState());
  enterRule(_localctx, 144, ASPCore2Parser::RuleExtatom_conv_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(701);
    _la = _input->LA(1);
    if (!(((((_la - 58) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 58)) & ((1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_QCONST - 58))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_CONST - 58))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_U_INT - 58))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_UR_INT - 58))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_UT_INT - 58))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_R_INT - 58))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_T_INT - 58)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_ordering_typeContext ------------------------------------------------------------------

ASPCore2Parser::Rule_ordering_typeContext::Rule_ordering_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Rule_ordering_typeContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}


size_t ASPCore2Parser::Rule_ordering_typeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_ordering_type;
}

void ASPCore2Parser::Rule_ordering_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_ordering_type(this);
}

void ASPCore2Parser::Rule_ordering_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_ordering_type(this);
}

ASPCore2Parser::Rule_ordering_typeContext* ASPCore2Parser::rule_ordering_type() {
  Rule_ordering_typeContext *_localctx = _tracker.createInstance<Rule_ordering_typeContext>(_ctx, getState());
  enterRule(_localctx, 146, ASPCore2Parser::RuleRule_ordering_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(703);
    match(ASPCore2Parser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_ordering_typeContext ------------------------------------------------------------------

ASPCore2Parser::Global_ordering_typeContext::Global_ordering_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Global_ordering_typeContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}


size_t ASPCore2Parser::Global_ordering_typeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_ordering_type;
}

void ASPCore2Parser::Global_ordering_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_ordering_type(this);
}

void ASPCore2Parser::Global_ordering_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_ordering_type(this);
}

ASPCore2Parser::Global_ordering_typeContext* ASPCore2Parser::global_ordering_type() {
  Global_ordering_typeContext *_localctx = _tracker.createInstance<Global_ordering_typeContext>(_ctx, getState());
  enterRule(_localctx, 148, ASPCore2Parser::RuleGlobal_ordering_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(705);
    match(ASPCore2Parser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_atom_indexedContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_atom_indexedContext::Annotation_rule_atom_indexedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::ANNOTATION_RULE_ATOM_INDEXED() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::ANNOTATION_ATOM_INDEXED_ATOM() {
  return getToken(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ATOM, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_rule_atom_indexedContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Rule_naf_literal_annotationContext* ASPCore2Parser::Annotation_rule_atom_indexedContext::rule_naf_literal_annotation() {
  return getRuleContext<ASPCore2Parser::Rule_naf_literal_annotationContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::ANNOTATION_ATOM_INDEXED_ARGUMENTS() {
  return getToken(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ARGUMENTS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Rule_indexing_argumentsContext* ASPCore2Parser::Annotation_rule_atom_indexedContext::rule_indexing_arguments() {
  return getRuleContext<ASPCore2Parser::Rule_indexing_argumentsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_atom_indexedContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_atom_indexed;
}

void ASPCore2Parser::Annotation_rule_atom_indexedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_atom_indexed(this);
}

void ASPCore2Parser::Annotation_rule_atom_indexedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_atom_indexed(this);
}

ASPCore2Parser::Annotation_rule_atom_indexedContext* ASPCore2Parser::annotation_rule_atom_indexed() {
  Annotation_rule_atom_indexedContext *_localctx = _tracker.createInstance<Annotation_rule_atom_indexedContext>(_ctx, getState());
  enterRule(_localctx, 150, ASPCore2Parser::RuleAnnotation_rule_atom_indexed);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(707);
    match(ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED);
    setState(708);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(709);
    match(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ATOM);
    setState(710);
    match(ASPCore2Parser::EQUAL);
    setState(711);
    rule_naf_literal_annotation();
    setState(712);
    match(ASPCore2Parser::COMMA);
    setState(713);
    match(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ARGUMENTS);
    setState(714);
    match(ASPCore2Parser::EQUAL);
    setState(715);
    match(ASPCore2Parser::CURLY_OPEN);
    setState(716);
    rule_indexing_arguments();
    setState(717);
    match(ASPCore2Parser::CURLY_CLOSE);
    setState(718);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(719);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_atom_indexedContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_atom_indexedContext::Annotation_global_atom_indexedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::ANNOTATION_GLOBAL_ATOM_INDEXED() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::ANNOTATION_ATOM_INDEXED_ATOM() {
  return getToken(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ATOM, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_atom_indexedContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Global_naf_literal_annotationContext* ASPCore2Parser::Annotation_global_atom_indexedContext::global_naf_literal_annotation() {
  return getRuleContext<ASPCore2Parser::Global_naf_literal_annotationContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::ANNOTATION_ATOM_INDEXED_ARGUMENTS() {
  return getToken(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ARGUMENTS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Global_indexing_argumentsContext* ASPCore2Parser::Annotation_global_atom_indexedContext::global_indexing_arguments() {
  return getRuleContext<ASPCore2Parser::Global_indexing_argumentsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_atom_indexedContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_atom_indexed;
}

void ASPCore2Parser::Annotation_global_atom_indexedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_atom_indexed(this);
}

void ASPCore2Parser::Annotation_global_atom_indexedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_atom_indexed(this);
}

ASPCore2Parser::Annotation_global_atom_indexedContext* ASPCore2Parser::annotation_global_atom_indexed() {
  Annotation_global_atom_indexedContext *_localctx = _tracker.createInstance<Annotation_global_atom_indexedContext>(_ctx, getState());
  enterRule(_localctx, 152, ASPCore2Parser::RuleAnnotation_global_atom_indexed);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(721);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED);
    setState(722);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(723);
    match(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ATOM);
    setState(724);
    match(ASPCore2Parser::EQUAL);
    setState(725);
    global_naf_literal_annotation();
    setState(726);
    match(ASPCore2Parser::COMMA);
    setState(727);
    match(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ARGUMENTS);
    setState(728);
    match(ASPCore2Parser::EQUAL);
    setState(729);
    match(ASPCore2Parser::CURLY_OPEN);
    setState(730);
    global_indexing_arguments();
    setState(731);
    match(ASPCore2Parser::CURLY_CLOSE);
    setState(732);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(733);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_indexing_argumentsContext ------------------------------------------------------------------

ASPCore2Parser::Rule_indexing_argumentsContext::Rule_indexing_argumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Rule_indexing_argumentsContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}

tree::TerminalNode* ASPCore2Parser::Rule_indexing_argumentsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Rule_indexing_argumentsContext* ASPCore2Parser::Rule_indexing_argumentsContext::rule_indexing_arguments() {
  return getRuleContext<ASPCore2Parser::Rule_indexing_argumentsContext>(0);
}


size_t ASPCore2Parser::Rule_indexing_argumentsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_indexing_arguments;
}

void ASPCore2Parser::Rule_indexing_argumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_indexing_arguments(this);
}

void ASPCore2Parser::Rule_indexing_argumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_indexing_arguments(this);
}

ASPCore2Parser::Rule_indexing_argumentsContext* ASPCore2Parser::rule_indexing_arguments() {
  Rule_indexing_argumentsContext *_localctx = _tracker.createInstance<Rule_indexing_argumentsContext>(_ctx, getState());
  enterRule(_localctx, 154, ASPCore2Parser::RuleRule_indexing_arguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(739);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(735);
      match(ASPCore2Parser::NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(736);
      match(ASPCore2Parser::NUMBER);
      setState(737);
      match(ASPCore2Parser::COMMA);
      setState(738);
      rule_indexing_arguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_naf_literal_annotationContext ------------------------------------------------------------------

ASPCore2Parser::Rule_naf_literal_annotationContext::Rule_naf_literal_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Rule_naf_literal_annotationContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_naf_literal_annotationContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}


size_t ASPCore2Parser::Rule_naf_literal_annotationContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_naf_literal_annotation;
}

void ASPCore2Parser::Rule_naf_literal_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_naf_literal_annotation(this);
}

void ASPCore2Parser::Rule_naf_literal_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_naf_literal_annotation(this);
}

ASPCore2Parser::Rule_naf_literal_annotationContext* ASPCore2Parser::rule_naf_literal_annotation() {
  Rule_naf_literal_annotationContext *_localctx = _tracker.createInstance<Rule_naf_literal_annotationContext>(_ctx, getState());
  enterRule(_localctx, 156, ASPCore2Parser::RuleRule_naf_literal_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(744);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING:
      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 1);
        setState(741);
        classic_literal();
        break;
      }

      case ASPCore2Parser::NAF: {
        enterOuterAlt(_localctx, 2);
        setState(742);
        match(ASPCore2Parser::NAF);
        setState(743);
        classic_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_indexing_argumentsContext ------------------------------------------------------------------

ASPCore2Parser::Global_indexing_argumentsContext::Global_indexing_argumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Global_indexing_argumentsContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}

tree::TerminalNode* ASPCore2Parser::Global_indexing_argumentsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Global_indexing_argumentsContext* ASPCore2Parser::Global_indexing_argumentsContext::global_indexing_arguments() {
  return getRuleContext<ASPCore2Parser::Global_indexing_argumentsContext>(0);
}


size_t ASPCore2Parser::Global_indexing_argumentsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_indexing_arguments;
}

void ASPCore2Parser::Global_indexing_argumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_indexing_arguments(this);
}

void ASPCore2Parser::Global_indexing_argumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_indexing_arguments(this);
}

ASPCore2Parser::Global_indexing_argumentsContext* ASPCore2Parser::global_indexing_arguments() {
  Global_indexing_argumentsContext *_localctx = _tracker.createInstance<Global_indexing_argumentsContext>(_ctx, getState());
  enterRule(_localctx, 158, ASPCore2Parser::RuleGlobal_indexing_arguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(750);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(746);
      match(ASPCore2Parser::NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(747);
      match(ASPCore2Parser::NUMBER);
      setState(748);
      match(ASPCore2Parser::COMMA);
      setState(749);
      global_indexing_arguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_naf_literal_annotationContext ------------------------------------------------------------------

ASPCore2Parser::Global_naf_literal_annotationContext::Global_naf_literal_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Global_naf_literal_annotationContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_naf_literal_annotationContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}


size_t ASPCore2Parser::Global_naf_literal_annotationContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_naf_literal_annotation;
}

void ASPCore2Parser::Global_naf_literal_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_naf_literal_annotation(this);
}

void ASPCore2Parser::Global_naf_literal_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_naf_literal_annotation(this);
}

ASPCore2Parser::Global_naf_literal_annotationContext* ASPCore2Parser::global_naf_literal_annotation() {
  Global_naf_literal_annotationContext *_localctx = _tracker.createInstance<Global_naf_literal_annotationContext>(_ctx, getState());
  enterRule(_localctx, 160, ASPCore2Parser::RuleGlobal_naf_literal_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(755);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING:
      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 1);
        setState(752);
        classic_literal();
        break;
      }

      case ASPCore2Parser::NAF: {
        enterOuterAlt(_localctx, 2);
        setState(753);
        match(ASPCore2Parser::NAF);
        setState(754);
        classic_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_atom_annotation_beforeContext ------------------------------------------------------------------

ASPCore2Parser::Rule_atom_annotation_beforeContext::Rule_atom_annotation_beforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Rule_atom_annotation_beforeContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_atom_annotation_beforeContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Rule_atom_annotation_beforeContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Rule_atom_annotation_beforeContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Rule_atom_annotation_beforeContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Rule_atom_annotation_beforeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_atom_annotation_before;
}

void ASPCore2Parser::Rule_atom_annotation_beforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_atom_annotation_before(this);
}

void ASPCore2Parser::Rule_atom_annotation_beforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_atom_annotation_before(this);
}

ASPCore2Parser::Rule_atom_annotation_beforeContext* ASPCore2Parser::rule_atom_annotation_before() {
  Rule_atom_annotation_beforeContext *_localctx = _tracker.createInstance<Rule_atom_annotation_beforeContext>(_ctx, getState());
  enterRule(_localctx, 162, ASPCore2Parser::RuleRule_atom_annotation_before);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(767);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(757);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(758);
      match(ASPCore2Parser::NAF);
      setState(759);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(760);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(761);
      aggregate_atom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(762);
      match(ASPCore2Parser::NAF);
      setState(763);
      aggregate_atom();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(764);
      extAtom();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(765);
      match(ASPCore2Parser::NAF);
      setState(766);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_atom_annotation_beforeContext ------------------------------------------------------------------

ASPCore2Parser::Global_atom_annotation_beforeContext::Global_atom_annotation_beforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Global_atom_annotation_beforeContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_atom_annotation_beforeContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Global_atom_annotation_beforeContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Global_atom_annotation_beforeContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Global_atom_annotation_beforeContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Global_atom_annotation_beforeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_atom_annotation_before;
}

void ASPCore2Parser::Global_atom_annotation_beforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_atom_annotation_before(this);
}

void ASPCore2Parser::Global_atom_annotation_beforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_atom_annotation_before(this);
}

ASPCore2Parser::Global_atom_annotation_beforeContext* ASPCore2Parser::global_atom_annotation_before() {
  Global_atom_annotation_beforeContext *_localctx = _tracker.createInstance<Global_atom_annotation_beforeContext>(_ctx, getState());
  enterRule(_localctx, 164, ASPCore2Parser::RuleGlobal_atom_annotation_before);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(779);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(769);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(770);
      match(ASPCore2Parser::NAF);
      setState(771);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(772);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(773);
      aggregate_atom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(774);
      match(ASPCore2Parser::NAF);
      setState(775);
      aggregate_atom();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(776);
      extAtom();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(777);
      match(ASPCore2Parser::NAF);
      setState(778);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_atom_annotation_afterContext ------------------------------------------------------------------

ASPCore2Parser::Rule_atom_annotation_afterContext::Rule_atom_annotation_afterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Rule_atom_annotation_afterContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_atom_annotation_afterContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Rule_atom_annotation_afterContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Rule_atom_annotation_afterContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Rule_atom_annotation_afterContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Rule_atom_annotation_afterContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_atom_annotation_after;
}

void ASPCore2Parser::Rule_atom_annotation_afterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_atom_annotation_after(this);
}

void ASPCore2Parser::Rule_atom_annotation_afterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_atom_annotation_after(this);
}

ASPCore2Parser::Rule_atom_annotation_afterContext* ASPCore2Parser::rule_atom_annotation_after() {
  Rule_atom_annotation_afterContext *_localctx = _tracker.createInstance<Rule_atom_annotation_afterContext>(_ctx, getState());
  enterRule(_localctx, 166, ASPCore2Parser::RuleRule_atom_annotation_after);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(791);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(781);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(782);
      match(ASPCore2Parser::NAF);
      setState(783);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(784);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(785);
      aggregate_atom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(786);
      match(ASPCore2Parser::NAF);
      setState(787);
      aggregate_atom();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(788);
      extAtom();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(789);
      match(ASPCore2Parser::NAF);
      setState(790);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_atom_annotation_afterContext ------------------------------------------------------------------

ASPCore2Parser::Global_atom_annotation_afterContext::Global_atom_annotation_afterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Global_atom_annotation_afterContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_atom_annotation_afterContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Global_atom_annotation_afterContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Global_atom_annotation_afterContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Global_atom_annotation_afterContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Global_atom_annotation_afterContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_atom_annotation_after;
}

void ASPCore2Parser::Global_atom_annotation_afterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_atom_annotation_after(this);
}

void ASPCore2Parser::Global_atom_annotation_afterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_atom_annotation_after(this);
}

ASPCore2Parser::Global_atom_annotation_afterContext* ASPCore2Parser::global_atom_annotation_after() {
  Global_atom_annotation_afterContext *_localctx = _tracker.createInstance<Global_atom_annotation_afterContext>(_ctx, getState());
  enterRule(_localctx, 168, ASPCore2Parser::RuleGlobal_atom_annotation_after);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(803);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(793);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(794);
      match(ASPCore2Parser::NAF);
      setState(795);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(796);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(797);
      aggregate_atom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(798);
      match(ASPCore2Parser::NAF);
      setState(799);
      aggregate_atom();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(800);
      extAtom();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(801);
      match(ASPCore2Parser::NAF);
      setState(802);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_atoms_annotation_beforeContext ------------------------------------------------------------------

ASPCore2Parser::Rule_atoms_annotation_beforeContext::Rule_atoms_annotation_beforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Rule_atom_annotation_beforeContext* ASPCore2Parser::Rule_atoms_annotation_beforeContext::rule_atom_annotation_before() {
  return getRuleContext<ASPCore2Parser::Rule_atom_annotation_beforeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_atoms_annotation_beforeContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Rule_atoms_annotation_beforeContext* ASPCore2Parser::Rule_atoms_annotation_beforeContext::rule_atoms_annotation_before() {
  return getRuleContext<ASPCore2Parser::Rule_atoms_annotation_beforeContext>(0);
}


size_t ASPCore2Parser::Rule_atoms_annotation_beforeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_atoms_annotation_before;
}

void ASPCore2Parser::Rule_atoms_annotation_beforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_atoms_annotation_before(this);
}

void ASPCore2Parser::Rule_atoms_annotation_beforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_atoms_annotation_before(this);
}

ASPCore2Parser::Rule_atoms_annotation_beforeContext* ASPCore2Parser::rule_atoms_annotation_before() {
  Rule_atoms_annotation_beforeContext *_localctx = _tracker.createInstance<Rule_atoms_annotation_beforeContext>(_ctx, getState());
  enterRule(_localctx, 170, ASPCore2Parser::RuleRule_atoms_annotation_before);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(810);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(805);
      rule_atom_annotation_before();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(806);
      rule_atom_annotation_before();
      setState(807);
      match(ASPCore2Parser::COMMA);
      setState(808);
      rule_atoms_annotation_before();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_atoms_annotation_beforeContext ------------------------------------------------------------------

ASPCore2Parser::Global_atoms_annotation_beforeContext::Global_atoms_annotation_beforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Global_atom_annotation_beforeContext* ASPCore2Parser::Global_atoms_annotation_beforeContext::global_atom_annotation_before() {
  return getRuleContext<ASPCore2Parser::Global_atom_annotation_beforeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_atoms_annotation_beforeContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Global_atoms_annotation_beforeContext* ASPCore2Parser::Global_atoms_annotation_beforeContext::global_atoms_annotation_before() {
  return getRuleContext<ASPCore2Parser::Global_atoms_annotation_beforeContext>(0);
}


size_t ASPCore2Parser::Global_atoms_annotation_beforeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_atoms_annotation_before;
}

void ASPCore2Parser::Global_atoms_annotation_beforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_atoms_annotation_before(this);
}

void ASPCore2Parser::Global_atoms_annotation_beforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_atoms_annotation_before(this);
}

ASPCore2Parser::Global_atoms_annotation_beforeContext* ASPCore2Parser::global_atoms_annotation_before() {
  Global_atoms_annotation_beforeContext *_localctx = _tracker.createInstance<Global_atoms_annotation_beforeContext>(_ctx, getState());
  enterRule(_localctx, 172, ASPCore2Parser::RuleGlobal_atoms_annotation_before);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(817);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(812);
      global_atom_annotation_before();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(813);
      global_atom_annotation_before();
      setState(814);
      match(ASPCore2Parser::COMMA);
      setState(815);
      global_atoms_annotation_before();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_atoms_annotation_afterContext ------------------------------------------------------------------

ASPCore2Parser::Rule_atoms_annotation_afterContext::Rule_atoms_annotation_afterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Rule_atom_annotation_afterContext* ASPCore2Parser::Rule_atoms_annotation_afterContext::rule_atom_annotation_after() {
  return getRuleContext<ASPCore2Parser::Rule_atom_annotation_afterContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_atoms_annotation_afterContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Rule_atoms_annotation_afterContext* ASPCore2Parser::Rule_atoms_annotation_afterContext::rule_atoms_annotation_after() {
  return getRuleContext<ASPCore2Parser::Rule_atoms_annotation_afterContext>(0);
}


size_t ASPCore2Parser::Rule_atoms_annotation_afterContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_atoms_annotation_after;
}

void ASPCore2Parser::Rule_atoms_annotation_afterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_atoms_annotation_after(this);
}

void ASPCore2Parser::Rule_atoms_annotation_afterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_atoms_annotation_after(this);
}

ASPCore2Parser::Rule_atoms_annotation_afterContext* ASPCore2Parser::rule_atoms_annotation_after() {
  Rule_atoms_annotation_afterContext *_localctx = _tracker.createInstance<Rule_atoms_annotation_afterContext>(_ctx, getState());
  enterRule(_localctx, 174, ASPCore2Parser::RuleRule_atoms_annotation_after);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(824);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(819);
      rule_atom_annotation_after();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(820);
      rule_atom_annotation_after();
      setState(821);
      match(ASPCore2Parser::COMMA);
      setState(822);
      rule_atoms_annotation_after();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_atoms_annotation_afterContext ------------------------------------------------------------------

ASPCore2Parser::Global_atoms_annotation_afterContext::Global_atoms_annotation_afterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Global_atom_annotation_afterContext* ASPCore2Parser::Global_atoms_annotation_afterContext::global_atom_annotation_after() {
  return getRuleContext<ASPCore2Parser::Global_atom_annotation_afterContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_atoms_annotation_afterContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

std::vector<ASPCore2Parser::Global_atoms_annotation_afterContext *> ASPCore2Parser::Global_atoms_annotation_afterContext::global_atoms_annotation_after() {
  return getRuleContexts<ASPCore2Parser::Global_atoms_annotation_afterContext>();
}

ASPCore2Parser::Global_atoms_annotation_afterContext* ASPCore2Parser::Global_atoms_annotation_afterContext::global_atoms_annotation_after(size_t i) {
  return getRuleContext<ASPCore2Parser::Global_atoms_annotation_afterContext>(i);
}


size_t ASPCore2Parser::Global_atoms_annotation_afterContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_atoms_annotation_after;
}

void ASPCore2Parser::Global_atoms_annotation_afterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_atoms_annotation_after(this);
}

void ASPCore2Parser::Global_atoms_annotation_afterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_atoms_annotation_after(this);
}

ASPCore2Parser::Global_atoms_annotation_afterContext* ASPCore2Parser::global_atoms_annotation_after() {
  Global_atoms_annotation_afterContext *_localctx = _tracker.createInstance<Global_atoms_annotation_afterContext>(_ctx, getState());
  enterRule(_localctx, 176, ASPCore2Parser::RuleGlobal_atoms_annotation_after);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(832);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(826);
      global_atom_annotation_after();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(827);
      global_atom_annotation_after();
      setState(828);
      match(ASPCore2Parser::COMMA);
      setState(829);
      global_atoms_annotation_after();
      setState(830);
      global_atoms_annotation_after();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_partial_order_beginContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_partial_order_beginContext::Annotation_rule_partial_order_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_order_beginContext::ANNOTATION_RULE_PARTIAL_ORDER() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER, 0);
}


size_t ASPCore2Parser::Annotation_rule_partial_order_beginContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_partial_order_begin;
}

void ASPCore2Parser::Annotation_rule_partial_order_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_partial_order_begin(this);
}

void ASPCore2Parser::Annotation_rule_partial_order_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_partial_order_begin(this);
}

ASPCore2Parser::Annotation_rule_partial_order_beginContext* ASPCore2Parser::annotation_rule_partial_order_begin() {
  Annotation_rule_partial_order_beginContext *_localctx = _tracker.createInstance<Annotation_rule_partial_order_beginContext>(_ctx, getState());
  enterRule(_localctx, 178, ASPCore2Parser::RuleAnnotation_rule_partial_order_begin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(834);
    match(ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_partial_order_beginContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_partial_order_beginContext::Annotation_global_partial_order_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_order_beginContext::ANNOTATION_GLOBAL_PARTIAL_ORDER() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER, 0);
}


size_t ASPCore2Parser::Annotation_global_partial_order_beginContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_partial_order_begin;
}

void ASPCore2Parser::Annotation_global_partial_order_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_partial_order_begin(this);
}

void ASPCore2Parser::Annotation_global_partial_order_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_partial_order_begin(this);
}

ASPCore2Parser::Annotation_global_partial_order_beginContext* ASPCore2Parser::annotation_global_partial_order_begin() {
  Annotation_global_partial_order_beginContext *_localctx = _tracker.createInstance<Annotation_global_partial_order_beginContext>(_ctx, getState());
  enterRule(_localctx, 180, ASPCore2Parser::RuleAnnotation_global_partial_order_begin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(836);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_partial_orderContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_partial_orderContext::Annotation_rule_partial_orderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_rule_partial_order_beginContext* ASPCore2Parser::Annotation_rule_partial_orderContext::annotation_rule_partial_order_begin() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_partial_order_beginContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::ANNOTATION_PARTIAL_ORDER_BEFORE() {
  return getToken(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_rule_partial_orderContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_rule_partial_orderContext::CURLY_OPEN() {
  return getTokens(ASPCore2Parser::CURLY_OPEN);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::CURLY_OPEN(size_t i) {
  return getToken(ASPCore2Parser::CURLY_OPEN, i);
}

ASPCore2Parser::Rule_atoms_annotation_beforeContext* ASPCore2Parser::Annotation_rule_partial_orderContext::rule_atoms_annotation_before() {
  return getRuleContext<ASPCore2Parser::Rule_atoms_annotation_beforeContext>(0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_rule_partial_orderContext::CURLY_CLOSE() {
  return getTokens(ASPCore2Parser::CURLY_CLOSE);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::CURLY_CLOSE(size_t i) {
  return getToken(ASPCore2Parser::CURLY_CLOSE, i);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::ANNOTATION_PARTIAL_ORDER_AFTER() {
  return getToken(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER, 0);
}

ASPCore2Parser::Rule_atoms_annotation_afterContext* ASPCore2Parser::Annotation_rule_partial_orderContext::rule_atoms_annotation_after() {
  return getRuleContext<ASPCore2Parser::Rule_atoms_annotation_afterContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_partial_orderContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_partial_order;
}

void ASPCore2Parser::Annotation_rule_partial_orderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_partial_order(this);
}

void ASPCore2Parser::Annotation_rule_partial_orderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_partial_order(this);
}

ASPCore2Parser::Annotation_rule_partial_orderContext* ASPCore2Parser::annotation_rule_partial_order() {
  Annotation_rule_partial_orderContext *_localctx = _tracker.createInstance<Annotation_rule_partial_orderContext>(_ctx, getState());
  enterRule(_localctx, 182, ASPCore2Parser::RuleAnnotation_rule_partial_order);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(870);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(838);
      annotation_rule_partial_order_begin();
      setState(839);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(840);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE);
      setState(841);
      match(ASPCore2Parser::EQUAL);
      setState(842);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(843);
      rule_atoms_annotation_before();
      setState(844);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(845);
      match(ASPCore2Parser::COMMA);
      setState(846);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER);
      setState(847);
      match(ASPCore2Parser::EQUAL);
      setState(848);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(849);
      rule_atoms_annotation_after();
      setState(850);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(851);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(852);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(854);
      annotation_rule_partial_order_begin();
      setState(855);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(856);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER);
      setState(857);
      match(ASPCore2Parser::EQUAL);
      setState(858);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(859);
      rule_atoms_annotation_after();
      setState(860);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(861);
      match(ASPCore2Parser::COMMA);
      setState(862);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE);
      setState(863);
      match(ASPCore2Parser::EQUAL);
      setState(864);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(865);
      rule_atoms_annotation_before();
      setState(866);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(867);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(868);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_partial_orderContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_partial_orderContext::Annotation_global_partial_orderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_global_partial_order_beginContext* ASPCore2Parser::Annotation_global_partial_orderContext::annotation_global_partial_order_begin() {
  return getRuleContext<ASPCore2Parser::Annotation_global_partial_order_beginContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::ANNOTATION_PARTIAL_ORDER_BEFORE() {
  return getToken(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_partial_orderContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_partial_orderContext::CURLY_OPEN() {
  return getTokens(ASPCore2Parser::CURLY_OPEN);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::CURLY_OPEN(size_t i) {
  return getToken(ASPCore2Parser::CURLY_OPEN, i);
}

ASPCore2Parser::Global_atoms_annotation_beforeContext* ASPCore2Parser::Annotation_global_partial_orderContext::global_atoms_annotation_before() {
  return getRuleContext<ASPCore2Parser::Global_atoms_annotation_beforeContext>(0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_partial_orderContext::CURLY_CLOSE() {
  return getTokens(ASPCore2Parser::CURLY_CLOSE);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::CURLY_CLOSE(size_t i) {
  return getToken(ASPCore2Parser::CURLY_CLOSE, i);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::ANNOTATION_PARTIAL_ORDER_AFTER() {
  return getToken(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER, 0);
}

ASPCore2Parser::Global_atoms_annotation_afterContext* ASPCore2Parser::Annotation_global_partial_orderContext::global_atoms_annotation_after() {
  return getRuleContext<ASPCore2Parser::Global_atoms_annotation_afterContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_partial_orderContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_partial_order;
}

void ASPCore2Parser::Annotation_global_partial_orderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_partial_order(this);
}

void ASPCore2Parser::Annotation_global_partial_orderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_partial_order(this);
}

ASPCore2Parser::Annotation_global_partial_orderContext* ASPCore2Parser::annotation_global_partial_order() {
  Annotation_global_partial_orderContext *_localctx = _tracker.createInstance<Annotation_global_partial_orderContext>(_ctx, getState());
  enterRule(_localctx, 184, ASPCore2Parser::RuleAnnotation_global_partial_order);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(904);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(872);
      annotation_global_partial_order_begin();
      setState(873);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(874);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE);
      setState(875);
      match(ASPCore2Parser::EQUAL);
      setState(876);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(877);
      global_atoms_annotation_before();
      setState(878);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(879);
      match(ASPCore2Parser::COMMA);
      setState(880);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER);
      setState(881);
      match(ASPCore2Parser::EQUAL);
      setState(882);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(883);
      global_atoms_annotation_after();
      setState(884);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(885);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(886);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(888);
      annotation_global_partial_order_begin();
      setState(889);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(890);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER);
      setState(891);
      match(ASPCore2Parser::EQUAL);
      setState(892);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(893);
      global_atoms_annotation_after();
      setState(894);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(895);
      match(ASPCore2Parser::COMMA);
      setState(896);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE);
      setState(897);
      match(ASPCore2Parser::EQUAL);
      setState(898);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(899);
      global_atoms_annotation_before();
      setState(900);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(901);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(902);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_projectionContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_projectionContext::Annotation_rule_projectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::ANNOTATION_RULE_PROJECTION() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_PROJECTION, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::ANNOTATION_ORDERING_VALUE() {
  return getToken(ASPCore2Parser::ANNOTATION_ORDERING_VALUE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::EQUAL() {
  return getToken(ASPCore2Parser::EQUAL, 0);
}

ASPCore2Parser::Annotation_rule_projection_valueContext* ASPCore2Parser::Annotation_rule_projectionContext::annotation_rule_projection_value() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_projection_valueContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_projectionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_projection;
}

void ASPCore2Parser::Annotation_rule_projectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_projection(this);
}

void ASPCore2Parser::Annotation_rule_projectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_projection(this);
}

ASPCore2Parser::Annotation_rule_projectionContext* ASPCore2Parser::annotation_rule_projection() {
  Annotation_rule_projectionContext *_localctx = _tracker.createInstance<Annotation_rule_projectionContext>(_ctx, getState());
  enterRule(_localctx, 186, ASPCore2Parser::RuleAnnotation_rule_projection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    match(ASPCore2Parser::ANNOTATION_RULE_PROJECTION);
    setState(907);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(908);
    match(ASPCore2Parser::ANNOTATION_ORDERING_VALUE);
    setState(909);
    match(ASPCore2Parser::EQUAL);
    setState(910);
    annotation_rule_projection_value();
    setState(911);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(912);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_projection_valueContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_projection_valueContext::Annotation_rule_projection_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projection_valueContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}


size_t ASPCore2Parser::Annotation_rule_projection_valueContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_projection_value;
}

void ASPCore2Parser::Annotation_rule_projection_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_projection_value(this);
}

void ASPCore2Parser::Annotation_rule_projection_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_projection_value(this);
}

ASPCore2Parser::Annotation_rule_projection_valueContext* ASPCore2Parser::annotation_rule_projection_value() {
  Annotation_rule_projection_valueContext *_localctx = _tracker.createInstance<Annotation_rule_projection_valueContext>(_ctx, getState());
  enterRule(_localctx, 188, ASPCore2Parser::RuleAnnotation_rule_projection_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(914);
    match(ASPCore2Parser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_rewriting_arithContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_rewriting_arithContext::Annotation_rule_rewriting_arithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_rewriting_arithContext::ANNOTATION_RULE_REWRITING_ARITH() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_rewriting_arithContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_rewriting_arithContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_rewriting_arithContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_rewriting_arithContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_rewriting_arith;
}

void ASPCore2Parser::Annotation_rule_rewriting_arithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_rewriting_arith(this);
}

void ASPCore2Parser::Annotation_rule_rewriting_arithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_rewriting_arith(this);
}

ASPCore2Parser::Annotation_rule_rewriting_arithContext* ASPCore2Parser::annotation_rule_rewriting_arith() {
  Annotation_rule_rewriting_arithContext *_localctx = _tracker.createInstance<Annotation_rule_rewriting_arithContext>(_ctx, getState());
  enterRule(_localctx, 190, ASPCore2Parser::RuleAnnotation_rule_rewriting_arith);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(922);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(916);
      match(ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH);
      setState(917);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(918);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(919);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(920);
      match(ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH);
      setState(921);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_align_substitutionsContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_align_substitutionsContext::Annotation_rule_align_substitutionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_align_substitutionsContext::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_align_substitutionsContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_align_substitutionsContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_align_substitutionsContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_align_substitutionsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_align_substitutions;
}

void ASPCore2Parser::Annotation_rule_align_substitutionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_align_substitutions(this);
}

void ASPCore2Parser::Annotation_rule_align_substitutionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_align_substitutions(this);
}

ASPCore2Parser::Annotation_rule_align_substitutionsContext* ASPCore2Parser::annotation_rule_align_substitutions() {
  Annotation_rule_align_substitutionsContext *_localctx = _tracker.createInstance<Annotation_rule_align_substitutionsContext>(_ctx, getState());
  enterRule(_localctx, 192, ASPCore2Parser::RuleAnnotation_rule_align_substitutions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(930);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(924);
      match(ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS);
      setState(925);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(926);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(927);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(928);
      match(ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS);
      setState(929);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_look_aheadContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_look_aheadContext::Annotation_rule_look_aheadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_look_aheadContext::ANNOTATION_RULE_LOOK_AHEAD() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_look_aheadContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_look_aheadContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_look_aheadContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_look_aheadContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_look_ahead;
}

void ASPCore2Parser::Annotation_rule_look_aheadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_look_ahead(this);
}

void ASPCore2Parser::Annotation_rule_look_aheadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_look_ahead(this);
}

ASPCore2Parser::Annotation_rule_look_aheadContext* ASPCore2Parser::annotation_rule_look_ahead() {
  Annotation_rule_look_aheadContext *_localctx = _tracker.createInstance<Annotation_rule_look_aheadContext>(_ctx, getState());
  enterRule(_localctx, 194, ASPCore2Parser::RuleAnnotation_rule_look_ahead);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(938);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(932);
      match(ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD);
      setState(933);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(934);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(935);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(936);
      match(ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD);
      setState(937);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_wasp_propagatorContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_wasp_propagatorContext::Annotation_global_wasp_propagatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_global_wasp_propagator_beginContext* ASPCore2Parser::Annotation_global_wasp_propagatorContext::annotation_global_wasp_propagator_begin() {
  return getRuleContext<ASPCore2Parser::Annotation_global_wasp_propagator_beginContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_wasp_propagatorContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Heuristic_python_fileContext* ASPCore2Parser::Annotation_global_wasp_propagatorContext::heuristic_python_file() {
  return getRuleContext<ASPCore2Parser::Heuristic_python_fileContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Aggregate_elements_heuristicContext* ASPCore2Parser::Annotation_global_wasp_propagatorContext::aggregate_elements_heuristic() {
  return getRuleContext<ASPCore2Parser::Aggregate_elements_heuristicContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_wasp_propagatorContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_wasp_propagator;
}

void ASPCore2Parser::Annotation_global_wasp_propagatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_wasp_propagator(this);
}

void ASPCore2Parser::Annotation_global_wasp_propagatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_wasp_propagator(this);
}

ASPCore2Parser::Annotation_global_wasp_propagatorContext* ASPCore2Parser::annotation_global_wasp_propagator() {
  Annotation_global_wasp_propagatorContext *_localctx = _tracker.createInstance<Annotation_global_wasp_propagatorContext>(_ctx, getState());
  enterRule(_localctx, 196, ASPCore2Parser::RuleAnnotation_global_wasp_propagator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(968);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(940);
      annotation_global_wasp_propagator_begin();
      setState(941);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(942);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE);
      setState(943);
      match(ASPCore2Parser::EQUAL);
      setState(944);
      heuristic_python_file();
      setState(945);
      match(ASPCore2Parser::COMMA);
      setState(946);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS);
      setState(947);
      match(ASPCore2Parser::EQUAL);
      setState(948);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(949);
      aggregate_elements_heuristic();
      setState(950);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(951);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(952);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(954);
      annotation_global_wasp_propagator_begin();
      setState(955);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(956);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS);
      setState(957);
      match(ASPCore2Parser::EQUAL);
      setState(958);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(959);
      aggregate_elements_heuristic();
      setState(960);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(961);
      match(ASPCore2Parser::COMMA);
      setState(962);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE);
      setState(963);
      match(ASPCore2Parser::EQUAL);
      setState(964);
      heuristic_python_file();
      setState(965);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(966);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_wasp_propagator_beginContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::Annotation_global_wasp_propagator_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::ANNOTATION_GLOBAL_WASP_PROPAGATOR() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR, 0);
}


size_t ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_wasp_propagator_begin;
}

void ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_wasp_propagator_begin(this);
}

void ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_wasp_propagator_begin(this);
}

ASPCore2Parser::Annotation_global_wasp_propagator_beginContext* ASPCore2Parser::annotation_global_wasp_propagator_begin() {
  Annotation_global_wasp_propagator_beginContext *_localctx = _tracker.createInstance<Annotation_global_wasp_propagator_beginContext>(_ctx, getState());
  enterRule(_localctx, 198, ASPCore2Parser::RuleAnnotation_global_wasp_propagator_begin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(970);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_wasp_heuristicContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_wasp_heuristicContext::Annotation_global_wasp_heuristicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext* ASPCore2Parser::Annotation_global_wasp_heuristicContext::annotation_global_wasp_heuristic_begin() {
  return getRuleContext<ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_wasp_heuristicContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Heuristic_python_fileContext* ASPCore2Parser::Annotation_global_wasp_heuristicContext::heuristic_python_file() {
  return getRuleContext<ASPCore2Parser::Heuristic_python_fileContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Aggregate_elements_heuristicContext* ASPCore2Parser::Annotation_global_wasp_heuristicContext::aggregate_elements_heuristic() {
  return getRuleContext<ASPCore2Parser::Aggregate_elements_heuristicContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_wasp_heuristicContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_wasp_heuristic;
}

void ASPCore2Parser::Annotation_global_wasp_heuristicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_wasp_heuristic(this);
}

void ASPCore2Parser::Annotation_global_wasp_heuristicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_wasp_heuristic(this);
}

ASPCore2Parser::Annotation_global_wasp_heuristicContext* ASPCore2Parser::annotation_global_wasp_heuristic() {
  Annotation_global_wasp_heuristicContext *_localctx = _tracker.createInstance<Annotation_global_wasp_heuristicContext>(_ctx, getState());
  enterRule(_localctx, 200, ASPCore2Parser::RuleAnnotation_global_wasp_heuristic);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1000);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(972);
      annotation_global_wasp_heuristic_begin();
      setState(973);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(974);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE);
      setState(975);
      match(ASPCore2Parser::EQUAL);
      setState(976);
      heuristic_python_file();
      setState(977);
      match(ASPCore2Parser::COMMA);
      setState(978);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS);
      setState(979);
      match(ASPCore2Parser::EQUAL);
      setState(980);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(981);
      aggregate_elements_heuristic();
      setState(982);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(983);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(984);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(986);
      annotation_global_wasp_heuristic_begin();
      setState(987);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(988);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS);
      setState(989);
      match(ASPCore2Parser::EQUAL);
      setState(990);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(991);
      aggregate_elements_heuristic();
      setState(992);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(993);
      match(ASPCore2Parser::COMMA);
      setState(994);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE);
      setState(995);
      match(ASPCore2Parser::EQUAL);
      setState(996);
      heuristic_python_file();
      setState(997);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(998);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_wasp_heuristic_beginContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::Annotation_global_wasp_heuristic_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::ANNOTATION_GLOBAL_WASP_HEURISTIC() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC, 0);
}


size_t ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_wasp_heuristic_begin;
}

void ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_wasp_heuristic_begin(this);
}

void ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_wasp_heuristic_begin(this);
}

ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext* ASPCore2Parser::annotation_global_wasp_heuristic_begin() {
  Annotation_global_wasp_heuristic_beginContext *_localctx = _tracker.createInstance<Annotation_global_wasp_heuristic_beginContext>(_ctx, getState());
  enterRule(_localctx, 202, ASPCore2Parser::RuleAnnotation_global_wasp_heuristic_begin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1002);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Heuristic_python_fileContext ------------------------------------------------------------------

ASPCore2Parser::Heuristic_python_fileContext::Heuristic_python_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Heuristic_python_fileContext::STRING() {
  return getToken(ASPCore2Parser::STRING, 0);
}


size_t ASPCore2Parser::Heuristic_python_fileContext::getRuleIndex() const {
  return ASPCore2Parser::RuleHeuristic_python_file;
}

void ASPCore2Parser::Heuristic_python_fileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHeuristic_python_file(this);
}

void ASPCore2Parser::Heuristic_python_fileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHeuristic_python_file(this);
}

ASPCore2Parser::Heuristic_python_fileContext* ASPCore2Parser::heuristic_python_file() {
  Heuristic_python_fileContext *_localctx = _tracker.createInstance<Heuristic_python_fileContext>(_ctx, getState());
  enterRule(_localctx, 204, ASPCore2Parser::RuleHeuristic_python_file);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1004);
    match(ASPCore2Parser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_element_heuristicContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_element_heuristicContext::Aggregate_element_heuristicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Aggregate_elementContext* ASPCore2Parser::Aggregate_element_heuristicContext::aggregate_element() {
  return getRuleContext<ASPCore2Parser::Aggregate_elementContext>(0);
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Aggregate_element_heuristicContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}


size_t ASPCore2Parser::Aggregate_element_heuristicContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_element_heuristic;
}

void ASPCore2Parser::Aggregate_element_heuristicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_element_heuristic(this);
}

void ASPCore2Parser::Aggregate_element_heuristicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_element_heuristic(this);
}

ASPCore2Parser::Aggregate_element_heuristicContext* ASPCore2Parser::aggregate_element_heuristic() {
  Aggregate_element_heuristicContext *_localctx = _tracker.createInstance<Aggregate_element_heuristicContext>(_ctx, getState());
  enterRule(_localctx, 206, ASPCore2Parser::RuleAggregate_element_heuristic);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1008);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1006);
      aggregate_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1007);
      classic_literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_elements_heuristicContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_elements_heuristicContext::Aggregate_elements_heuristicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Aggregate_element_heuristicContext* ASPCore2Parser::Aggregate_elements_heuristicContext::aggregate_element_heuristic() {
  return getRuleContext<ASPCore2Parser::Aggregate_element_heuristicContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_elements_heuristicContext::SEMICOLON() {
  return getToken(ASPCore2Parser::SEMICOLON, 0);
}

ASPCore2Parser::Aggregate_elements_heuristicContext* ASPCore2Parser::Aggregate_elements_heuristicContext::aggregate_elements_heuristic() {
  return getRuleContext<ASPCore2Parser::Aggregate_elements_heuristicContext>(0);
}


size_t ASPCore2Parser::Aggregate_elements_heuristicContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_elements_heuristic;
}

void ASPCore2Parser::Aggregate_elements_heuristicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_elements_heuristic(this);
}

void ASPCore2Parser::Aggregate_elements_heuristicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_elements_heuristic(this);
}

ASPCore2Parser::Aggregate_elements_heuristicContext* ASPCore2Parser::aggregate_elements_heuristic() {
  Aggregate_elements_heuristicContext *_localctx = _tracker.createInstance<Aggregate_elements_heuristicContext>(_ctx, getState());
  enterRule(_localctx, 208, ASPCore2Parser::RuleAggregate_elements_heuristic);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1015);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1010);
      aggregate_element_heuristic();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1011);
      aggregate_element_heuristic();
      setState(1012);
      match(ASPCore2Parser::SEMICOLON);
      setState(1013);
      aggregate_elements_heuristic();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void ASPCore2Parser::initialize() {
  std::call_once(aspcore2ParserOnceFlag, aspcore2ParserInitialize);
}
